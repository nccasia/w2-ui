schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "Action"
"""
type Action {
  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!
  action: String!
  content: String!
  createdAt: timestamp!
  domain: String!
  id: Int!
  intent: String!
  type: ActionType!
}

scalar ActionType

"""
Boolean expression to compare columns of type "ActionType". All fields are combined with logical 'AND'.
"""
input ActionType_comparison_exp {
  _eq: ActionType
  _gt: ActionType
  _gte: ActionType
  _in: [ActionType!]
  _is_null: Boolean
  _lt: ActionType
  _lte: ActionType
  _neq: ActionType
  _nin: [ActionType!]
}

"""
aggregated selection of "Action"
"""
type Action_aggregate {
  aggregate: Action_aggregate_fields
  nodes: [Action!]!
}

"""
aggregate fields of "Action"
"""
type Action_aggregate_fields {
  avg: Action_avg_fields
  count(columns: [Action_select_column!], distinct: Boolean): Int!
  max: Action_max_fields
  min: Action_min_fields
  stddev: Action_stddev_fields
  stddev_pop: Action_stddev_pop_fields
  stddev_samp: Action_stddev_samp_fields
  sum: Action_sum_fields
  var_pop: Action_var_pop_fields
  var_samp: Action_var_samp_fields
  variance: Action_variance_fields
}

"""aggregate avg on columns"""
type Action_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Action". All fields are combined with a logical 'AND'.
"""
input Action_bool_exp {
  EventLogs: EventLog_bool_exp
  EventLogs_aggregate: EventLog_aggregate_bool_exp
  _and: [Action_bool_exp!]
  _not: Action_bool_exp
  _or: [Action_bool_exp!]
  action: String_comparison_exp
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  domain: String_comparison_exp
  id: Int_comparison_exp
  intent: String_comparison_exp
  type: ActionType_comparison_exp
}

"""
unique or primary key constraints on table "Action"
"""
enum Action_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Action_pkey
}

"""
input type for incrementing numeric columns in table "Action"
"""
input Action_inc_input {
  id: Int
}

"""
input type for inserting data into table "Action"
"""
input Action_insert_input {
  EventLogs: EventLog_arr_rel_insert_input
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: Int
  intent: String
  type: ActionType
}

"""aggregate max on columns"""
type Action_max_fields {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: Int
  intent: String
  type: ActionType
}

"""aggregate min on columns"""
type Action_min_fields {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: Int
  intent: String
  type: ActionType
}

"""
response of any mutation on the table "Action"
"""
type Action_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Action!]!
}

"""
input type for inserting object relation for remote table "Action"
"""
input Action_obj_rel_insert_input {
  data: Action_insert_input!

  """upsert condition"""
  on_conflict: Action_on_conflict
}

"""
on_conflict condition type for table "Action"
"""
input Action_on_conflict {
  constraint: Action_constraint!
  update_columns: [Action_update_column!]! = []
  where: Action_bool_exp
}

"""Ordering options when selecting data from "Action"."""
input Action_order_by {
  EventLogs_aggregate: EventLog_aggregate_order_by
  action: order_by
  content: order_by
  createdAt: order_by
  domain: order_by
  id: order_by
  intent: order_by
  type: order_by
}

"""primary key columns input for table: Action"""
input Action_pk_columns_input {
  id: Int!
}

"""
select columns of table "Action"
"""
enum Action_select_column {
  """column name"""
  action

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  domain

  """column name"""
  id

  """column name"""
  intent

  """column name"""
  type
}

"""
input type for updating data in table "Action"
"""
input Action_set_input {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: Int
  intent: String
  type: ActionType
}

"""aggregate stddev on columns"""
type Action_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Action_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Action_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "Action"
"""
input Action_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Action_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Action_stream_cursor_value_input {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: Int
  intent: String
  type: ActionType
}

"""aggregate sum on columns"""
type Action_sum_fields {
  id: Int
}

"""
update columns of table "Action"
"""
enum Action_update_column {
  """column name"""
  action

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  domain

  """column name"""
  id

  """column name"""
  intent

  """column name"""
  type
}

input Action_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Action_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Action_set_input
  where: Action_bool_exp!
}

"""aggregate var_pop on columns"""
type Action_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Action_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Action_variance_fields {
  id: Float
}

"""
columns and relationships of "Activity"
"""
type Activity {
  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!

  """An array relationship"""
  Triggers(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): [Trigger!]!

  """An aggregate relationship"""
  Triggers_aggregate(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): Trigger_aggregate!

  """An object relationship"""
  Workflow: Workflow!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  updatedAt: timestamp!
  workflowId: Int!
}

"""
aggregated selection of "Activity"
"""
type Activity_aggregate {
  aggregate: Activity_aggregate_fields
  nodes: [Activity!]!
}

input Activity_aggregate_bool_exp {
  count: Activity_aggregate_bool_exp_count
}

input Activity_aggregate_bool_exp_count {
  arguments: [Activity_select_column!]
  distinct: Boolean
  filter: Activity_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Activity"
"""
type Activity_aggregate_fields {
  avg: Activity_avg_fields
  count(columns: [Activity_select_column!], distinct: Boolean): Int!
  max: Activity_max_fields
  min: Activity_min_fields
  stddev: Activity_stddev_fields
  stddev_pop: Activity_stddev_pop_fields
  stddev_samp: Activity_stddev_samp_fields
  sum: Activity_sum_fields
  var_pop: Activity_var_pop_fields
  var_samp: Activity_var_samp_fields
  variance: Activity_variance_fields
}

"""
order by aggregate values of table "Activity"
"""
input Activity_aggregate_order_by {
  avg: Activity_avg_order_by
  count: order_by
  max: Activity_max_order_by
  min: Activity_min_order_by
  stddev: Activity_stddev_order_by
  stddev_pop: Activity_stddev_pop_order_by
  stddev_samp: Activity_stddev_samp_order_by
  sum: Activity_sum_order_by
  var_pop: Activity_var_pop_order_by
  var_samp: Activity_var_samp_order_by
  variance: Activity_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input Activity_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "Activity"
"""
input Activity_arr_rel_insert_input {
  data: [Activity_insert_input!]!

  """upsert condition"""
  on_conflict: Activity_on_conflict
}

"""aggregate avg on columns"""
type Activity_avg_fields {
  id: Float
  workflowId: Float
}

"""
order by avg() on columns of table "Activity"
"""
input Activity_avg_order_by {
  id: order_by
  workflowId: order_by
}

"""
Boolean expression to filter rows from the table "Activity". All fields are combined with a logical 'AND'.
"""
input Activity_bool_exp {
  TaskDefinitions: TaskDefinition_bool_exp
  TaskDefinitions_aggregate: TaskDefinition_aggregate_bool_exp
  Triggers: Trigger_bool_exp
  Triggers_aggregate: Trigger_aggregate_bool_exp
  Workflow: Workflow_bool_exp
  _and: [Activity_bool_exp!]
  _not: Activity_bool_exp
  _or: [Activity_bool_exp!]
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  workflowId: Int_comparison_exp
}

"""
unique or primary key constraints on table "Activity"
"""
enum Activity_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Activity_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input Activity_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input Activity_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input Activity_delete_key_input {
  config: String
}

"""
input type for incrementing numeric columns in table "Activity"
"""
input Activity_inc_input {
  id: Int
  workflowId: Int
}

"""
input type for inserting data into table "Activity"
"""
input Activity_insert_input {
  TaskDefinitions: TaskDefinition_arr_rel_insert_input
  Triggers: Trigger_arr_rel_insert_input
  Workflow: Workflow_obj_rel_insert_input
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate max on columns"""
type Activity_max_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
  workflowId: Int
}

"""
order by max() on columns of table "Activity"
"""
input Activity_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""aggregate min on columns"""
type Activity_min_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
  workflowId: Int
}

"""
order by min() on columns of table "Activity"
"""
input Activity_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""
response of any mutation on the table "Activity"
"""
type Activity_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Activity!]!
}

"""
input type for inserting object relation for remote table "Activity"
"""
input Activity_obj_rel_insert_input {
  data: Activity_insert_input!

  """upsert condition"""
  on_conflict: Activity_on_conflict
}

"""
on_conflict condition type for table "Activity"
"""
input Activity_on_conflict {
  constraint: Activity_constraint!
  update_columns: [Activity_update_column!]! = []
  where: Activity_bool_exp
}

"""Ordering options when selecting data from "Activity"."""
input Activity_order_by {
  TaskDefinitions_aggregate: TaskDefinition_aggregate_order_by
  Triggers_aggregate: Trigger_aggregate_order_by
  Workflow: Workflow_order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""primary key columns input for table: Activity"""
input Activity_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input Activity_prepend_input {
  config: jsonb
}

"""
select columns of table "Activity"
"""
enum Activity_select_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
input type for updating data in table "Activity"
"""
input Activity_set_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate stddev on columns"""
type Activity_stddev_fields {
  id: Float
  workflowId: Float
}

"""
order by stddev() on columns of table "Activity"
"""
input Activity_stddev_order_by {
  id: order_by
  workflowId: order_by
}

"""aggregate stddev_pop on columns"""
type Activity_stddev_pop_fields {
  id: Float
  workflowId: Float
}

"""
order by stddev_pop() on columns of table "Activity"
"""
input Activity_stddev_pop_order_by {
  id: order_by
  workflowId: order_by
}

"""aggregate stddev_samp on columns"""
type Activity_stddev_samp_fields {
  id: Float
  workflowId: Float
}

"""
order by stddev_samp() on columns of table "Activity"
"""
input Activity_stddev_samp_order_by {
  id: order_by
  workflowId: order_by
}

"""
Streaming cursor of the table "Activity"
"""
input Activity_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Activity_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Activity_stream_cursor_value_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate sum on columns"""
type Activity_sum_fields {
  id: Int
  workflowId: Int
}

"""
order by sum() on columns of table "Activity"
"""
input Activity_sum_order_by {
  id: order_by
  workflowId: order_by
}

"""
update columns of table "Activity"
"""
enum Activity_update_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

input Activity_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: Activity_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: Activity_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: Activity_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: Activity_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: Activity_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: Activity_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: Activity_set_input
  where: Activity_bool_exp!
}

"""aggregate var_pop on columns"""
type Activity_var_pop_fields {
  id: Float
  workflowId: Float
}

"""
order by var_pop() on columns of table "Activity"
"""
input Activity_var_pop_order_by {
  id: order_by
  workflowId: order_by
}

"""aggregate var_samp on columns"""
type Activity_var_samp_fields {
  id: Float
  workflowId: Float
}

"""
order by var_samp() on columns of table "Activity"
"""
input Activity_var_samp_order_by {
  id: order_by
  workflowId: order_by
}

"""aggregate variance on columns"""
type Activity_variance_fields {
  id: Float
  workflowId: Float
}

"""
order by variance() on columns of table "Activity"
"""
input Activity_variance_order_by {
  id: order_by
  workflowId: order_by
}

type Authbe {
  """JWT access token"""
  accessToken: JWTbe!

  """JWT refresh token"""
  refreshToken: JWTbe!
  user: Userbe!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input ChangePasswordInputbe {
  newPassword: String!
  oldPassword: String!
}

"""
columns and relationships of "Comment"
"""
type Comment {
  """An object relationship"""
  Task: Task!

  """An object relationship"""
  User: User!
  content: String!
  createdAt: timestamp!
  creatorId: Int!
  id: Int!
  taskId: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "Comment"
"""
type Comment_aggregate {
  aggregate: Comment_aggregate_fields
  nodes: [Comment!]!
}

input Comment_aggregate_bool_exp {
  count: Comment_aggregate_bool_exp_count
}

input Comment_aggregate_bool_exp_count {
  arguments: [Comment_select_column!]
  distinct: Boolean
  filter: Comment_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Comment"
"""
type Comment_aggregate_fields {
  avg: Comment_avg_fields
  count(columns: [Comment_select_column!], distinct: Boolean): Int!
  max: Comment_max_fields
  min: Comment_min_fields
  stddev: Comment_stddev_fields
  stddev_pop: Comment_stddev_pop_fields
  stddev_samp: Comment_stddev_samp_fields
  sum: Comment_sum_fields
  var_pop: Comment_var_pop_fields
  var_samp: Comment_var_samp_fields
  variance: Comment_variance_fields
}

"""
order by aggregate values of table "Comment"
"""
input Comment_aggregate_order_by {
  avg: Comment_avg_order_by
  count: order_by
  max: Comment_max_order_by
  min: Comment_min_order_by
  stddev: Comment_stddev_order_by
  stddev_pop: Comment_stddev_pop_order_by
  stddev_samp: Comment_stddev_samp_order_by
  sum: Comment_sum_order_by
  var_pop: Comment_var_pop_order_by
  var_samp: Comment_var_samp_order_by
  variance: Comment_variance_order_by
}

"""
input type for inserting array relation for remote table "Comment"
"""
input Comment_arr_rel_insert_input {
  data: [Comment_insert_input!]!

  """upsert condition"""
  on_conflict: Comment_on_conflict
}

"""aggregate avg on columns"""
type Comment_avg_fields {
  creatorId: Float
  id: Float
}

"""
order by avg() on columns of table "Comment"
"""
input Comment_avg_order_by {
  creatorId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "Comment". All fields are combined with a logical 'AND'.
"""
input Comment_bool_exp {
  Task: Task_bool_exp
  User: User_bool_exp
  _and: [Comment_bool_exp!]
  _not: Comment_bool_exp
  _or: [Comment_bool_exp!]
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: Int_comparison_exp
  id: Int_comparison_exp
  taskId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Comment"
"""
enum Comment_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Comment_pkey
}

"""
input type for incrementing numeric columns in table "Comment"
"""
input Comment_inc_input {
  creatorId: Int
  id: Int
}

"""
input type for inserting data into table "Comment"
"""
input Comment_insert_input {
  Task: Task_obj_rel_insert_input
  User: User_obj_rel_insert_input
  content: String
  createdAt: timestamp
  creatorId: Int
  id: Int
  taskId: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Comment_max_fields {
  content: String
  createdAt: timestamp
  creatorId: Int
  id: Int
  taskId: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "Comment"
"""
input Comment_max_order_by {
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Comment_min_fields {
  content: String
  createdAt: timestamp
  creatorId: Int
  id: Int
  taskId: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "Comment"
"""
input Comment_min_order_by {
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Comment"
"""
type Comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Comment!]!
}

"""
on_conflict condition type for table "Comment"
"""
input Comment_on_conflict {
  constraint: Comment_constraint!
  update_columns: [Comment_update_column!]! = []
  where: Comment_bool_exp
}

"""Ordering options when selecting data from "Comment"."""
input Comment_order_by {
  Task: Task_order_by
  User: User_order_by
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Comment"""
input Comment_pk_columns_input {
  id: Int!
}

"""
select columns of table "Comment"
"""
enum Comment_select_column {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  taskId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Comment"
"""
input Comment_set_input {
  content: String
  createdAt: timestamp
  creatorId: Int
  id: Int
  taskId: String
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Comment_stddev_fields {
  creatorId: Float
  id: Float
}

"""
order by stddev() on columns of table "Comment"
"""
input Comment_stddev_order_by {
  creatorId: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type Comment_stddev_pop_fields {
  creatorId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "Comment"
"""
input Comment_stddev_pop_order_by {
  creatorId: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type Comment_stddev_samp_fields {
  creatorId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "Comment"
"""
input Comment_stddev_samp_order_by {
  creatorId: order_by
  id: order_by
}

"""
Streaming cursor of the table "Comment"
"""
input Comment_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Comment_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Comment_stream_cursor_value_input {
  content: String
  createdAt: timestamp
  creatorId: Int
  id: Int
  taskId: String
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Comment_sum_fields {
  creatorId: Int
  id: Int
}

"""
order by sum() on columns of table "Comment"
"""
input Comment_sum_order_by {
  creatorId: order_by
  id: order_by
}

"""
update columns of table "Comment"
"""
enum Comment_update_column {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  taskId

  """column name"""
  updatedAt
}

input Comment_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Comment_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Comment_set_input
  where: Comment_bool_exp!
}

"""aggregate var_pop on columns"""
type Comment_var_pop_fields {
  creatorId: Float
  id: Float
}

"""
order by var_pop() on columns of table "Comment"
"""
input Comment_var_pop_order_by {
  creatorId: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type Comment_var_samp_fields {
  creatorId: Float
  id: Float
}

"""
order by var_samp() on columns of table "Comment"
"""
input Comment_var_samp_order_by {
  creatorId: order_by
  id: order_by
}

"""aggregate variance on columns"""
type Comment_variance_fields {
  creatorId: Float
  id: Float
}

"""
order by variance() on columns of table "Comment"
"""
input Comment_variance_order_by {
  creatorId: order_by
  id: order_by
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTimebe

"""
columns and relationships of "EventLog"
"""
type EventLog {
  """An object relationship"""
  Action: Action!

  """An object relationship"""
  Organization: Organization!

  """An object relationship"""
  Task: Task

  """An object relationship"""
  User: User
  actionId: Int!
  createdAt: timestamp!
  id: Int!
  organizationId: Int!
  taskId: String
  userId: Int
}

"""
aggregated selection of "EventLog"
"""
type EventLog_aggregate {
  aggregate: EventLog_aggregate_fields
  nodes: [EventLog!]!
}

input EventLog_aggregate_bool_exp {
  count: EventLog_aggregate_bool_exp_count
}

input EventLog_aggregate_bool_exp_count {
  arguments: [EventLog_select_column!]
  distinct: Boolean
  filter: EventLog_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "EventLog"
"""
type EventLog_aggregate_fields {
  avg: EventLog_avg_fields
  count(columns: [EventLog_select_column!], distinct: Boolean): Int!
  max: EventLog_max_fields
  min: EventLog_min_fields
  stddev: EventLog_stddev_fields
  stddev_pop: EventLog_stddev_pop_fields
  stddev_samp: EventLog_stddev_samp_fields
  sum: EventLog_sum_fields
  var_pop: EventLog_var_pop_fields
  var_samp: EventLog_var_samp_fields
  variance: EventLog_variance_fields
}

"""
order by aggregate values of table "EventLog"
"""
input EventLog_aggregate_order_by {
  avg: EventLog_avg_order_by
  count: order_by
  max: EventLog_max_order_by
  min: EventLog_min_order_by
  stddev: EventLog_stddev_order_by
  stddev_pop: EventLog_stddev_pop_order_by
  stddev_samp: EventLog_stddev_samp_order_by
  sum: EventLog_sum_order_by
  var_pop: EventLog_var_pop_order_by
  var_samp: EventLog_var_samp_order_by
  variance: EventLog_variance_order_by
}

"""
input type for inserting array relation for remote table "EventLog"
"""
input EventLog_arr_rel_insert_input {
  data: [EventLog_insert_input!]!

  """upsert condition"""
  on_conflict: EventLog_on_conflict
}

"""aggregate avg on columns"""
type EventLog_avg_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by avg() on columns of table "EventLog"
"""
input EventLog_avg_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "EventLog". All fields are combined with a logical 'AND'.
"""
input EventLog_bool_exp {
  Action: Action_bool_exp
  Organization: Organization_bool_exp
  Task: Task_bool_exp
  User: User_bool_exp
  _and: [EventLog_bool_exp!]
  _not: EventLog_bool_exp
  _or: [EventLog_bool_exp!]
  actionId: Int_comparison_exp
  createdAt: timestamp_comparison_exp
  id: Int_comparison_exp
  organizationId: Int_comparison_exp
  taskId: String_comparison_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "EventLog"
"""
enum EventLog_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  EventLog_pkey
}

"""
input type for incrementing numeric columns in table "EventLog"
"""
input EventLog_inc_input {
  actionId: Int
  id: Int
  organizationId: Int
  userId: Int
}

"""
input type for inserting data into table "EventLog"
"""
input EventLog_insert_input {
  Action: Action_obj_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  Task: Task_obj_rel_insert_input
  User: User_obj_rel_insert_input
  actionId: Int
  createdAt: timestamp
  id: Int
  organizationId: Int
  taskId: String
  userId: Int
}

"""aggregate max on columns"""
type EventLog_max_fields {
  actionId: Int
  createdAt: timestamp
  id: Int
  organizationId: Int
  taskId: String
  userId: Int
}

"""
order by max() on columns of table "EventLog"
"""
input EventLog_max_order_by {
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type EventLog_min_fields {
  actionId: Int
  createdAt: timestamp
  id: Int
  organizationId: Int
  taskId: String
  userId: Int
}

"""
order by min() on columns of table "EventLog"
"""
input EventLog_min_order_by {
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""
response of any mutation on the table "EventLog"
"""
type EventLog_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [EventLog!]!
}

"""
on_conflict condition type for table "EventLog"
"""
input EventLog_on_conflict {
  constraint: EventLog_constraint!
  update_columns: [EventLog_update_column!]! = []
  where: EventLog_bool_exp
}

"""Ordering options when selecting data from "EventLog"."""
input EventLog_order_by {
  Action: Action_order_by
  Organization: Organization_order_by
  Task: Task_order_by
  User: User_order_by
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""primary key columns input for table: EventLog"""
input EventLog_pk_columns_input {
  id: Int!
}

"""
select columns of table "EventLog"
"""
enum EventLog_select_column {
  """column name"""
  actionId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  taskId

  """column name"""
  userId
}

"""
input type for updating data in table "EventLog"
"""
input EventLog_set_input {
  actionId: Int
  createdAt: timestamp
  id: Int
  organizationId: Int
  taskId: String
  userId: Int
}

"""aggregate stddev on columns"""
type EventLog_stddev_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by stddev() on columns of table "EventLog"
"""
input EventLog_stddev_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type EventLog_stddev_pop_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "EventLog"
"""
input EventLog_stddev_pop_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type EventLog_stddev_samp_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "EventLog"
"""
input EventLog_stddev_samp_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "EventLog"
"""
input EventLog_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: EventLog_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input EventLog_stream_cursor_value_input {
  actionId: Int
  createdAt: timestamp
  id: Int
  organizationId: Int
  taskId: String
  userId: Int
}

"""aggregate sum on columns"""
type EventLog_sum_fields {
  actionId: Int
  id: Int
  organizationId: Int
  userId: Int
}

"""
order by sum() on columns of table "EventLog"
"""
input EventLog_sum_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""
update columns of table "EventLog"
"""
enum EventLog_update_column {
  """column name"""
  actionId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  taskId

  """column name"""
  userId
}

input EventLog_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: EventLog_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: EventLog_set_input
  where: EventLog_bool_exp!
}

"""aggregate var_pop on columns"""
type EventLog_var_pop_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "EventLog"
"""
input EventLog_var_pop_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type EventLog_var_samp_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "EventLog"
"""
input EventLog_var_samp_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type EventLog_variance_fields {
  actionId: Float
  id: Float
  organizationId: Float
  userId: Float
}

"""
order by variance() on columns of table "EventLog"
"""
input EventLog_variance_order_by {
  actionId: order_by
  id: order_by
  organizationId: order_by
  userId: order_by
}

"""
columns and relationships of "File"
"""
type File {
  """An object relationship"""
  File: File

  """An array relationship"""
  Files(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): [File!]!

  """An aggregate relationship"""
  Files_aggregate(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): File_aggregate!

  """An object relationship"""
  Organization: Organization!
  cdnUrl: String!
  createdAt: timestamp!
  data: String!
  encoding: String!
  fileType: FileType!
  filename: String!
  id: Int!
  mimetype: String!
  organizationId: Int!
  updatedAt: timestamp!
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

scalar FileType

"""
Boolean expression to compare columns of type "FileType". All fields are combined with logical 'AND'.
"""
input FileType_comparison_exp {
  _eq: FileType
  _gt: FileType
  _gte: FileType
  _in: [FileType!]
  _is_null: Boolean
  _lt: FileType
  _lte: FileType
  _neq: FileType
  _nin: [FileType!]
}

"""
aggregated selection of "File"
"""
type File_aggregate {
  aggregate: File_aggregate_fields
  nodes: [File!]!
}

input File_aggregate_bool_exp {
  count: File_aggregate_bool_exp_count
}

input File_aggregate_bool_exp_count {
  arguments: [File_select_column!]
  distinct: Boolean
  filter: File_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "File"
"""
type File_aggregate_fields {
  avg: File_avg_fields
  count(columns: [File_select_column!], distinct: Boolean): Int!
  max: File_max_fields
  min: File_min_fields
  stddev: File_stddev_fields
  stddev_pop: File_stddev_pop_fields
  stddev_samp: File_stddev_samp_fields
  sum: File_sum_fields
  var_pop: File_var_pop_fields
  var_samp: File_var_samp_fields
  variance: File_variance_fields
}

"""
order by aggregate values of table "File"
"""
input File_aggregate_order_by {
  avg: File_avg_order_by
  count: order_by
  max: File_max_order_by
  min: File_min_order_by
  stddev: File_stddev_order_by
  stddev_pop: File_stddev_pop_order_by
  stddev_samp: File_stddev_samp_order_by
  sum: File_sum_order_by
  var_pop: File_var_pop_order_by
  var_samp: File_var_samp_order_by
  variance: File_variance_order_by
}

"""
input type for inserting array relation for remote table "File"
"""
input File_arr_rel_insert_input {
  data: [File_insert_input!]!

  """upsert condition"""
  on_conflict: File_on_conflict
}

"""aggregate avg on columns"""
type File_avg_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by avg() on columns of table "File"
"""
input File_avg_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""
Boolean expression to filter rows from the table "File". All fields are combined with a logical 'AND'.
"""
input File_bool_exp {
  File: File_bool_exp
  Files: File_bool_exp
  Files_aggregate: File_aggregate_bool_exp
  Organization: Organization_bool_exp
  _and: [File_bool_exp!]
  _not: File_bool_exp
  _or: [File_bool_exp!]
  cdnUrl: String_comparison_exp
  createdAt: timestamp_comparison_exp
  data: String_comparison_exp
  encoding: String_comparison_exp
  fileType: FileType_comparison_exp
  filename: String_comparison_exp
  id: Int_comparison_exp
  mimetype: String_comparison_exp
  organizationId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
  varantName: String_comparison_exp
  variantKey: String_comparison_exp
  variantOfId: Int_comparison_exp
  variantValue: String_comparison_exp
}

"""
unique or primary key constraints on table "File"
"""
enum File_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  File_pkey
}

"""
input type for incrementing numeric columns in table "File"
"""
input File_inc_input {
  id: Int
  organizationId: Int
  variantOfId: Int
}

"""
input type for inserting data into table "File"
"""
input File_insert_input {
  File: File_obj_rel_insert_input
  Files: File_arr_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: Int
  mimetype: String
  organizationId: Int
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

"""aggregate max on columns"""
type File_max_fields {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: Int
  mimetype: String
  organizationId: Int
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

"""
order by max() on columns of table "File"
"""
input File_max_order_by {
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  fileType: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""aggregate min on columns"""
type File_min_fields {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: Int
  mimetype: String
  organizationId: Int
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

"""
order by min() on columns of table "File"
"""
input File_min_order_by {
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  fileType: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""
response of any mutation on the table "File"
"""
type File_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [File!]!
}

"""
input type for inserting object relation for remote table "File"
"""
input File_obj_rel_insert_input {
  data: File_insert_input!

  """upsert condition"""
  on_conflict: File_on_conflict
}

"""
on_conflict condition type for table "File"
"""
input File_on_conflict {
  constraint: File_constraint!
  update_columns: [File_update_column!]! = []
  where: File_bool_exp
}

"""Ordering options when selecting data from "File"."""
input File_order_by {
  File: File_order_by
  Files_aggregate: File_aggregate_order_by
  Organization: Organization_order_by
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  fileType: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""primary key columns input for table: File"""
input File_pk_columns_input {
  id: Int!
}

"""
select columns of table "File"
"""
enum File_select_column {
  """column name"""
  cdnUrl

  """column name"""
  createdAt

  """column name"""
  data

  """column name"""
  encoding

  """column name"""
  fileType

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  mimetype

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  varantName

  """column name"""
  variantKey

  """column name"""
  variantOfId

  """column name"""
  variantValue
}

"""
input type for updating data in table "File"
"""
input File_set_input {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: Int
  mimetype: String
  organizationId: Int
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

"""aggregate stddev on columns"""
type File_stddev_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by stddev() on columns of table "File"
"""
input File_stddev_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""aggregate stddev_pop on columns"""
type File_stddev_pop_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by stddev_pop() on columns of table "File"
"""
input File_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""aggregate stddev_samp on columns"""
type File_stddev_samp_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by stddev_samp() on columns of table "File"
"""
input File_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""
Streaming cursor of the table "File"
"""
input File_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: File_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input File_stream_cursor_value_input {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: Int
  mimetype: String
  organizationId: Int
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: Int
  variantValue: String
}

"""aggregate sum on columns"""
type File_sum_fields {
  id: Int
  organizationId: Int
  variantOfId: Int
}

"""
order by sum() on columns of table "File"
"""
input File_sum_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""
update columns of table "File"
"""
enum File_update_column {
  """column name"""
  cdnUrl

  """column name"""
  createdAt

  """column name"""
  data

  """column name"""
  encoding

  """column name"""
  fileType

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  mimetype

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  varantName

  """column name"""
  variantKey

  """column name"""
  variantOfId

  """column name"""
  variantValue
}

input File_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: File_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: File_set_input
  where: File_bool_exp!
}

"""aggregate var_pop on columns"""
type File_var_pop_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by var_pop() on columns of table "File"
"""
input File_var_pop_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""aggregate var_samp on columns"""
type File_var_samp_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by var_samp() on columns of table "File"
"""
input File_var_samp_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""aggregate variance on columns"""
type File_variance_fields {
  id: Float
  organizationId: Float
  variantOfId: Float
}

"""
order by variance() on columns of table "File"
"""
input File_variance_order_by {
  id: order_by
  organizationId: order_by
  variantOfId: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWTbe

input LoginInputbe {
  email: String!
  password: String!
}

"""
columns and relationships of "MemberOnTeams"
"""
type MemberOnTeams {
  """An object relationship"""
  Team: Team!

  """An object relationship"""
  User: User!
  assignedAt: timestamp!
  assignedBy: String!
  teamId: String!
  userId: Int!
}

"""
aggregated selection of "MemberOnTeams"
"""
type MemberOnTeams_aggregate {
  aggregate: MemberOnTeams_aggregate_fields
  nodes: [MemberOnTeams!]!
}

input MemberOnTeams_aggregate_bool_exp {
  count: MemberOnTeams_aggregate_bool_exp_count
}

input MemberOnTeams_aggregate_bool_exp_count {
  arguments: [MemberOnTeams_select_column!]
  distinct: Boolean
  filter: MemberOnTeams_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "MemberOnTeams"
"""
type MemberOnTeams_aggregate_fields {
  avg: MemberOnTeams_avg_fields
  count(columns: [MemberOnTeams_select_column!], distinct: Boolean): Int!
  max: MemberOnTeams_max_fields
  min: MemberOnTeams_min_fields
  stddev: MemberOnTeams_stddev_fields
  stddev_pop: MemberOnTeams_stddev_pop_fields
  stddev_samp: MemberOnTeams_stddev_samp_fields
  sum: MemberOnTeams_sum_fields
  var_pop: MemberOnTeams_var_pop_fields
  var_samp: MemberOnTeams_var_samp_fields
  variance: MemberOnTeams_variance_fields
}

"""
order by aggregate values of table "MemberOnTeams"
"""
input MemberOnTeams_aggregate_order_by {
  avg: MemberOnTeams_avg_order_by
  count: order_by
  max: MemberOnTeams_max_order_by
  min: MemberOnTeams_min_order_by
  stddev: MemberOnTeams_stddev_order_by
  stddev_pop: MemberOnTeams_stddev_pop_order_by
  stddev_samp: MemberOnTeams_stddev_samp_order_by
  sum: MemberOnTeams_sum_order_by
  var_pop: MemberOnTeams_var_pop_order_by
  var_samp: MemberOnTeams_var_samp_order_by
  variance: MemberOnTeams_variance_order_by
}

"""
input type for inserting array relation for remote table "MemberOnTeams"
"""
input MemberOnTeams_arr_rel_insert_input {
  data: [MemberOnTeams_insert_input!]!

  """upsert condition"""
  on_conflict: MemberOnTeams_on_conflict
}

"""aggregate avg on columns"""
type MemberOnTeams_avg_fields {
  userId: Float
}

"""
order by avg() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_avg_order_by {
  userId: order_by
}

"""
Boolean expression to filter rows from the table "MemberOnTeams". All fields are combined with a logical 'AND'.
"""
input MemberOnTeams_bool_exp {
  Team: Team_bool_exp
  User: User_bool_exp
  _and: [MemberOnTeams_bool_exp!]
  _not: MemberOnTeams_bool_exp
  _or: [MemberOnTeams_bool_exp!]
  assignedAt: timestamp_comparison_exp
  assignedBy: String_comparison_exp
  teamId: String_comparison_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "MemberOnTeams"
"""
enum MemberOnTeams_constraint {
  """
  unique or primary key constraint on columns "teamId", "userId"
  """
  MemberOnTeams_pkey
}

"""
input type for incrementing numeric columns in table "MemberOnTeams"
"""
input MemberOnTeams_inc_input {
  userId: Int
}

"""
input type for inserting data into table "MemberOnTeams"
"""
input MemberOnTeams_insert_input {
  Team: Team_obj_rel_insert_input
  User: User_obj_rel_insert_input
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: Int
}

"""aggregate max on columns"""
type MemberOnTeams_max_fields {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: Int
}

"""
order by max() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_max_order_by {
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type MemberOnTeams_min_fields {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: Int
}

"""
order by min() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_min_order_by {
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""
response of any mutation on the table "MemberOnTeams"
"""
type MemberOnTeams_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [MemberOnTeams!]!
}

"""
on_conflict condition type for table "MemberOnTeams"
"""
input MemberOnTeams_on_conflict {
  constraint: MemberOnTeams_constraint!
  update_columns: [MemberOnTeams_update_column!]! = []
  where: MemberOnTeams_bool_exp
}

"""Ordering options when selecting data from "MemberOnTeams"."""
input MemberOnTeams_order_by {
  Team: Team_order_by
  User: User_order_by
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""primary key columns input for table: MemberOnTeams"""
input MemberOnTeams_pk_columns_input {
  teamId: String!
  userId: Int!
}

"""
select columns of table "MemberOnTeams"
"""
enum MemberOnTeams_select_column {
  """column name"""
  assignedAt

  """column name"""
  assignedBy

  """column name"""
  teamId

  """column name"""
  userId
}

"""
input type for updating data in table "MemberOnTeams"
"""
input MemberOnTeams_set_input {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: Int
}

"""aggregate stddev on columns"""
type MemberOnTeams_stddev_fields {
  userId: Float
}

"""
order by stddev() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_stddev_order_by {
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type MemberOnTeams_stddev_pop_fields {
  userId: Float
}

"""
order by stddev_pop() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_stddev_pop_order_by {
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type MemberOnTeams_stddev_samp_fields {
  userId: Float
}

"""
order by stddev_samp() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_stddev_samp_order_by {
  userId: order_by
}

"""
Streaming cursor of the table "MemberOnTeams"
"""
input MemberOnTeams_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: MemberOnTeams_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input MemberOnTeams_stream_cursor_value_input {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: Int
}

"""aggregate sum on columns"""
type MemberOnTeams_sum_fields {
  userId: Int
}

"""
order by sum() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_sum_order_by {
  userId: order_by
}

"""
update columns of table "MemberOnTeams"
"""
enum MemberOnTeams_update_column {
  """column name"""
  assignedAt

  """column name"""
  assignedBy

  """column name"""
  teamId

  """column name"""
  userId
}

input MemberOnTeams_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: MemberOnTeams_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: MemberOnTeams_set_input
  where: MemberOnTeams_bool_exp!
}

"""aggregate var_pop on columns"""
type MemberOnTeams_var_pop_fields {
  userId: Float
}

"""
order by var_pop() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_var_pop_order_by {
  userId: order_by
}

"""aggregate var_samp on columns"""
type MemberOnTeams_var_samp_fields {
  userId: Float
}

"""
order by var_samp() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_var_samp_order_by {
  userId: order_by
}

"""aggregate variance on columns"""
type MemberOnTeams_variance_fields {
  userId: Float
}

"""
order by variance() on columns of table "MemberOnTeams"
"""
input MemberOnTeams_variance_order_by {
  userId: order_by
}

"""
columns and relationships of "Organization"
"""
type Organization {
  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """An array relationship"""
  Files(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): [File!]!

  """An aggregate relationship"""
  Files_aggregate(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): File_aggregate!

  """An array relationship"""
  PermissionGroups(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): [PermissionGroup!]!

  """An aggregate relationship"""
  PermissionGroups_aggregate(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): PermissionGroup_aggregate!

  """An array relationship"""
  Permissions(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): [Permission!]!

  """An aggregate relationship"""
  Permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): Permission_aggregate!

  """An array relationship"""
  Settings(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): [Settings!]!

  """An aggregate relationship"""
  Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): Settings_aggregate!

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): Task_aggregate!

  """An array relationship"""
  Teams(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """An aggregate relationship"""
  Teams_aggregate(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): Team_aggregate!

  """An array relationship"""
  Users(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): [User!]!

  """An aggregate relationship"""
  Users_aggregate(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): User_aggregate!

  """An array relationship"""
  Workflows(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): [Workflow!]!

  """An aggregate relationship"""
  Workflows_aggregate(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): Workflow_aggregate!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "Organization"
"""
type Organization_aggregate {
  aggregate: Organization_aggregate_fields
  nodes: [Organization!]!
}

"""
aggregate fields of "Organization"
"""
type Organization_aggregate_fields {
  avg: Organization_avg_fields
  count(columns: [Organization_select_column!], distinct: Boolean): Int!
  max: Organization_max_fields
  min: Organization_min_fields
  stddev: Organization_stddev_fields
  stddev_pop: Organization_stddev_pop_fields
  stddev_samp: Organization_stddev_samp_fields
  sum: Organization_sum_fields
  var_pop: Organization_var_pop_fields
  var_samp: Organization_var_samp_fields
  variance: Organization_variance_fields
}

"""aggregate avg on columns"""
type Organization_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Organization". All fields are combined with a logical 'AND'.
"""
input Organization_bool_exp {
  EventLogs: EventLog_bool_exp
  EventLogs_aggregate: EventLog_aggregate_bool_exp
  Files: File_bool_exp
  Files_aggregate: File_aggregate_bool_exp
  PermissionGroups: PermissionGroup_bool_exp
  PermissionGroups_aggregate: PermissionGroup_aggregate_bool_exp
  Permissions: Permission_bool_exp
  Permissions_aggregate: Permission_aggregate_bool_exp
  Settings: Settings_bool_exp
  Settings_aggregate: Settings_aggregate_bool_exp
  TaskDefinitions: TaskDefinition_bool_exp
  TaskDefinitions_aggregate: TaskDefinition_aggregate_bool_exp
  Tasks: Task_bool_exp
  Tasks_aggregate: Task_aggregate_bool_exp
  Teams: Team_bool_exp
  Teams_aggregate: Team_aggregate_bool_exp
  Users: User_bool_exp
  Users_aggregate: User_aggregate_bool_exp
  Workflows: Workflow_bool_exp
  Workflows_aggregate: Workflow_aggregate_bool_exp
  _and: [Organization_bool_exp!]
  _not: Organization_bool_exp
  _or: [Organization_bool_exp!]
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Organization"
"""
enum Organization_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Organization_pkey
}

"""
input type for incrementing numeric columns in table "Organization"
"""
input Organization_inc_input {
  id: Int
}

"""
input type for inserting data into table "Organization"
"""
input Organization_insert_input {
  EventLogs: EventLog_arr_rel_insert_input
  Files: File_arr_rel_insert_input
  PermissionGroups: PermissionGroup_arr_rel_insert_input
  Permissions: Permission_arr_rel_insert_input
  Settings: Settings_arr_rel_insert_input
  TaskDefinitions: TaskDefinition_arr_rel_insert_input
  Tasks: Task_arr_rel_insert_input
  Teams: Team_arr_rel_insert_input
  Users: User_arr_rel_insert_input
  Workflows: Workflow_arr_rel_insert_input
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Organization_max_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
}

"""aggregate min on columns"""
type Organization_min_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
}

"""
response of any mutation on the table "Organization"
"""
type Organization_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Organization!]!
}

"""
input type for inserting object relation for remote table "Organization"
"""
input Organization_obj_rel_insert_input {
  data: Organization_insert_input!

  """upsert condition"""
  on_conflict: Organization_on_conflict
}

"""
on_conflict condition type for table "Organization"
"""
input Organization_on_conflict {
  constraint: Organization_constraint!
  update_columns: [Organization_update_column!]! = []
  where: Organization_bool_exp
}

"""Ordering options when selecting data from "Organization"."""
input Organization_order_by {
  EventLogs_aggregate: EventLog_aggregate_order_by
  Files_aggregate: File_aggregate_order_by
  PermissionGroups_aggregate: PermissionGroup_aggregate_order_by
  Permissions_aggregate: Permission_aggregate_order_by
  Settings_aggregate: Settings_aggregate_order_by
  TaskDefinitions_aggregate: TaskDefinition_aggregate_order_by
  Tasks_aggregate: Task_aggregate_order_by
  Teams_aggregate: Team_aggregate_order_by
  Users_aggregate: User_aggregate_order_by
  Workflows_aggregate: Workflow_aggregate_order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Organization"""
input Organization_pk_columns_input {
  id: Int!
}

"""
select columns of table "Organization"
"""
enum Organization_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Organization"
"""
input Organization_set_input {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Organization_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Organization_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Organization_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "Organization"
"""
input Organization_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Organization_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Organization_stream_cursor_value_input {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Organization_sum_fields {
  id: Int
}

"""
update columns of table "Organization"
"""
enum Organization_update_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

input Organization_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Organization_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Organization_set_input
  where: Organization_bool_exp!
}

"""aggregate var_pop on columns"""
type Organization_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Organization_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Organization_variance_fields {
  id: Float
}

"""
columns and relationships of "Permission"
"""
type Permission {
  """An object relationship"""
  Organization: Organization!

  """An object relationship"""
  PermissionGroup: PermissionGroup!

  """An array relationship"""
  UserPermissions(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): [UserPermission!]!

  """An aggregate relationship"""
  UserPermissions_aggregate(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): UserPermission_aggregate!
  code: String!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  organizationId: Int!
  permissionGroupId: Int!
  updatedAt: timestamp!
}

"""
columns and relationships of "PermissionGroup"
"""
type PermissionGroup {
  """An object relationship"""
  Organization: Organization!

  """An array relationship"""
  Permissions(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): [Permission!]!

  """An aggregate relationship"""
  Permissions_aggregate(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): Permission_aggregate!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  organizationId: Int!
  updatedAt: timestamp!
}

"""
aggregated selection of "PermissionGroup"
"""
type PermissionGroup_aggregate {
  aggregate: PermissionGroup_aggregate_fields
  nodes: [PermissionGroup!]!
}

input PermissionGroup_aggregate_bool_exp {
  count: PermissionGroup_aggregate_bool_exp_count
}

input PermissionGroup_aggregate_bool_exp_count {
  arguments: [PermissionGroup_select_column!]
  distinct: Boolean
  filter: PermissionGroup_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "PermissionGroup"
"""
type PermissionGroup_aggregate_fields {
  avg: PermissionGroup_avg_fields
  count(columns: [PermissionGroup_select_column!], distinct: Boolean): Int!
  max: PermissionGroup_max_fields
  min: PermissionGroup_min_fields
  stddev: PermissionGroup_stddev_fields
  stddev_pop: PermissionGroup_stddev_pop_fields
  stddev_samp: PermissionGroup_stddev_samp_fields
  sum: PermissionGroup_sum_fields
  var_pop: PermissionGroup_var_pop_fields
  var_samp: PermissionGroup_var_samp_fields
  variance: PermissionGroup_variance_fields
}

"""
order by aggregate values of table "PermissionGroup"
"""
input PermissionGroup_aggregate_order_by {
  avg: PermissionGroup_avg_order_by
  count: order_by
  max: PermissionGroup_max_order_by
  min: PermissionGroup_min_order_by
  stddev: PermissionGroup_stddev_order_by
  stddev_pop: PermissionGroup_stddev_pop_order_by
  stddev_samp: PermissionGroup_stddev_samp_order_by
  sum: PermissionGroup_sum_order_by
  var_pop: PermissionGroup_var_pop_order_by
  var_samp: PermissionGroup_var_samp_order_by
  variance: PermissionGroup_variance_order_by
}

"""
input type for inserting array relation for remote table "PermissionGroup"
"""
input PermissionGroup_arr_rel_insert_input {
  data: [PermissionGroup_insert_input!]!

  """upsert condition"""
  on_conflict: PermissionGroup_on_conflict
}

"""aggregate avg on columns"""
type PermissionGroup_avg_fields {
  id: Float
  organizationId: Float
}

"""
order by avg() on columns of table "PermissionGroup"
"""
input PermissionGroup_avg_order_by {
  id: order_by
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "PermissionGroup". All fields are combined with a logical 'AND'.
"""
input PermissionGroup_bool_exp {
  Organization: Organization_bool_exp
  Permissions: Permission_bool_exp
  Permissions_aggregate: Permission_aggregate_bool_exp
  _and: [PermissionGroup_bool_exp!]
  _not: PermissionGroup_bool_exp
  _or: [PermissionGroup_bool_exp!]
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  organizationId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "PermissionGroup"
"""
enum PermissionGroup_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  PermissionGroup_pkey
}

"""
input type for incrementing numeric columns in table "PermissionGroup"
"""
input PermissionGroup_inc_input {
  id: Int
  organizationId: Int
}

"""
input type for inserting data into table "PermissionGroup"
"""
input PermissionGroup_insert_input {
  Organization: Organization_obj_rel_insert_input
  Permissions: Permission_arr_rel_insert_input
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate max on columns"""
type PermissionGroup_max_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by max() on columns of table "PermissionGroup"
"""
input PermissionGroup_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type PermissionGroup_min_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by min() on columns of table "PermissionGroup"
"""
input PermissionGroup_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "PermissionGroup"
"""
type PermissionGroup_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [PermissionGroup!]!
}

"""
input type for inserting object relation for remote table "PermissionGroup"
"""
input PermissionGroup_obj_rel_insert_input {
  data: PermissionGroup_insert_input!

  """upsert condition"""
  on_conflict: PermissionGroup_on_conflict
}

"""
on_conflict condition type for table "PermissionGroup"
"""
input PermissionGroup_on_conflict {
  constraint: PermissionGroup_constraint!
  update_columns: [PermissionGroup_update_column!]! = []
  where: PermissionGroup_bool_exp
}

"""Ordering options when selecting data from "PermissionGroup"."""
input PermissionGroup_order_by {
  Organization: Organization_order_by
  Permissions_aggregate: Permission_aggregate_order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: PermissionGroup"""
input PermissionGroup_pk_columns_input {
  id: Int!
}

"""
select columns of table "PermissionGroup"
"""
enum PermissionGroup_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "PermissionGroup"
"""
input PermissionGroup_set_input {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type PermissionGroup_stddev_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev() on columns of table "PermissionGroup"
"""
input PermissionGroup_stddev_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type PermissionGroup_stddev_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "PermissionGroup"
"""
input PermissionGroup_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type PermissionGroup_stddev_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "PermissionGroup"
"""
input PermissionGroup_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""
Streaming cursor of the table "PermissionGroup"
"""
input PermissionGroup_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: PermissionGroup_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input PermissionGroup_stream_cursor_value_input {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type PermissionGroup_sum_fields {
  id: Int
  organizationId: Int
}

"""
order by sum() on columns of table "PermissionGroup"
"""
input PermissionGroup_sum_order_by {
  id: order_by
  organizationId: order_by
}

"""
update columns of table "PermissionGroup"
"""
enum PermissionGroup_update_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

input PermissionGroup_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: PermissionGroup_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: PermissionGroup_set_input
  where: PermissionGroup_bool_exp!
}

"""aggregate var_pop on columns"""
type PermissionGroup_var_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by var_pop() on columns of table "PermissionGroup"
"""
input PermissionGroup_var_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type PermissionGroup_var_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by var_samp() on columns of table "PermissionGroup"
"""
input PermissionGroup_var_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate variance on columns"""
type PermissionGroup_variance_fields {
  id: Float
  organizationId: Float
}

"""
order by variance() on columns of table "PermissionGroup"
"""
input PermissionGroup_variance_order_by {
  id: order_by
  organizationId: order_by
}

"""
aggregated selection of "Permission"
"""
type Permission_aggregate {
  aggregate: Permission_aggregate_fields
  nodes: [Permission!]!
}

input Permission_aggregate_bool_exp {
  count: Permission_aggregate_bool_exp_count
}

input Permission_aggregate_bool_exp_count {
  arguments: [Permission_select_column!]
  distinct: Boolean
  filter: Permission_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Permission"
"""
type Permission_aggregate_fields {
  avg: Permission_avg_fields
  count(columns: [Permission_select_column!], distinct: Boolean): Int!
  max: Permission_max_fields
  min: Permission_min_fields
  stddev: Permission_stddev_fields
  stddev_pop: Permission_stddev_pop_fields
  stddev_samp: Permission_stddev_samp_fields
  sum: Permission_sum_fields
  var_pop: Permission_var_pop_fields
  var_samp: Permission_var_samp_fields
  variance: Permission_variance_fields
}

"""
order by aggregate values of table "Permission"
"""
input Permission_aggregate_order_by {
  avg: Permission_avg_order_by
  count: order_by
  max: Permission_max_order_by
  min: Permission_min_order_by
  stddev: Permission_stddev_order_by
  stddev_pop: Permission_stddev_pop_order_by
  stddev_samp: Permission_stddev_samp_order_by
  sum: Permission_sum_order_by
  var_pop: Permission_var_pop_order_by
  var_samp: Permission_var_samp_order_by
  variance: Permission_variance_order_by
}

"""
input type for inserting array relation for remote table "Permission"
"""
input Permission_arr_rel_insert_input {
  data: [Permission_insert_input!]!

  """upsert condition"""
  on_conflict: Permission_on_conflict
}

"""aggregate avg on columns"""
type Permission_avg_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by avg() on columns of table "Permission"
"""
input Permission_avg_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""
Boolean expression to filter rows from the table "Permission". All fields are combined with a logical 'AND'.
"""
input Permission_bool_exp {
  Organization: Organization_bool_exp
  PermissionGroup: PermissionGroup_bool_exp
  UserPermissions: UserPermission_bool_exp
  UserPermissions_aggregate: UserPermission_aggregate_bool_exp
  _and: [Permission_bool_exp!]
  _not: Permission_bool_exp
  _or: [Permission_bool_exp!]
  code: String_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  organizationId: Int_comparison_exp
  permissionGroupId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Permission"
"""
enum Permission_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Permission_pkey
}

"""
input type for incrementing numeric columns in table "Permission"
"""
input Permission_inc_input {
  id: Int
  organizationId: Int
  permissionGroupId: Int
}

"""
input type for inserting data into table "Permission"
"""
input Permission_insert_input {
  Organization: Organization_obj_rel_insert_input
  PermissionGroup: PermissionGroup_obj_rel_insert_input
  UserPermissions: UserPermission_arr_rel_insert_input
  code: String
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  permissionGroupId: Int
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Permission_max_fields {
  code: String
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  permissionGroupId: Int
  updatedAt: timestamp
}

"""
order by max() on columns of table "Permission"
"""
input Permission_max_order_by {
  code: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  permissionGroupId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Permission_min_fields {
  code: String
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  permissionGroupId: Int
  updatedAt: timestamp
}

"""
order by min() on columns of table "Permission"
"""
input Permission_min_order_by {
  code: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  permissionGroupId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Permission"
"""
type Permission_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Permission!]!
}

"""
input type for inserting object relation for remote table "Permission"
"""
input Permission_obj_rel_insert_input {
  data: Permission_insert_input!

  """upsert condition"""
  on_conflict: Permission_on_conflict
}

"""
on_conflict condition type for table "Permission"
"""
input Permission_on_conflict {
  constraint: Permission_constraint!
  update_columns: [Permission_update_column!]! = []
  where: Permission_bool_exp
}

"""Ordering options when selecting data from "Permission"."""
input Permission_order_by {
  Organization: Organization_order_by
  PermissionGroup: PermissionGroup_order_by
  UserPermissions_aggregate: UserPermission_aggregate_order_by
  code: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  permissionGroupId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Permission"""
input Permission_pk_columns_input {
  id: Int!
}

"""
select columns of table "Permission"
"""
enum Permission_select_column {
  """column name"""
  code

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  permissionGroupId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Permission"
"""
input Permission_set_input {
  code: String
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  permissionGroupId: Int
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Permission_stddev_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by stddev() on columns of table "Permission"
"""
input Permission_stddev_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""aggregate stddev_pop on columns"""
type Permission_stddev_pop_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by stddev_pop() on columns of table "Permission"
"""
input Permission_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""aggregate stddev_samp on columns"""
type Permission_stddev_samp_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by stddev_samp() on columns of table "Permission"
"""
input Permission_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""
Streaming cursor of the table "Permission"
"""
input Permission_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Permission_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Permission_stream_cursor_value_input {
  code: String
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  permissionGroupId: Int
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Permission_sum_fields {
  id: Int
  organizationId: Int
  permissionGroupId: Int
}

"""
order by sum() on columns of table "Permission"
"""
input Permission_sum_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""
update columns of table "Permission"
"""
enum Permission_update_column {
  """column name"""
  code

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  permissionGroupId

  """column name"""
  updatedAt
}

input Permission_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Permission_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Permission_set_input
  where: Permission_bool_exp!
}

"""aggregate var_pop on columns"""
type Permission_var_pop_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by var_pop() on columns of table "Permission"
"""
input Permission_var_pop_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""aggregate var_samp on columns"""
type Permission_var_samp_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by var_samp() on columns of table "Permission"
"""
input Permission_var_samp_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

"""aggregate variance on columns"""
type Permission_variance_fields {
  id: Float
  organizationId: Float
  permissionGroupId: Float
}

"""
order by variance() on columns of table "Permission"
"""
input Permission_variance_order_by {
  id: order_by
  organizationId: order_by
  permissionGroupId: order_by
}

type Permissionbe {
  code: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTimebe!
  id: Int!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTimebe!
}

"""
columns and relationships of "Post"
"""
type Post {
  """An object relationship"""
  User: User
  authorId: Int
  content: String
  createdAt: timestamp!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "Post"
"""
type Post_aggregate {
  aggregate: Post_aggregate_fields
  nodes: [Post!]!
}

input Post_aggregate_bool_exp {
  bool_and: Post_aggregate_bool_exp_bool_and
  bool_or: Post_aggregate_bool_exp_bool_or
  count: Post_aggregate_bool_exp_count
}

input Post_aggregate_bool_exp_bool_and {
  arguments: Post_select_column_Post_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: Post_bool_exp
  predicate: Boolean_comparison_exp!
}

input Post_aggregate_bool_exp_bool_or {
  arguments: Post_select_column_Post_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: Post_bool_exp
  predicate: Boolean_comparison_exp!
}

input Post_aggregate_bool_exp_count {
  arguments: [Post_select_column!]
  distinct: Boolean
  filter: Post_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Post"
"""
type Post_aggregate_fields {
  avg: Post_avg_fields
  count(columns: [Post_select_column!], distinct: Boolean): Int!
  max: Post_max_fields
  min: Post_min_fields
  stddev: Post_stddev_fields
  stddev_pop: Post_stddev_pop_fields
  stddev_samp: Post_stddev_samp_fields
  sum: Post_sum_fields
  var_pop: Post_var_pop_fields
  var_samp: Post_var_samp_fields
  variance: Post_variance_fields
}

"""
order by aggregate values of table "Post"
"""
input Post_aggregate_order_by {
  avg: Post_avg_order_by
  count: order_by
  max: Post_max_order_by
  min: Post_min_order_by
  stddev: Post_stddev_order_by
  stddev_pop: Post_stddev_pop_order_by
  stddev_samp: Post_stddev_samp_order_by
  sum: Post_sum_order_by
  var_pop: Post_var_pop_order_by
  var_samp: Post_var_samp_order_by
  variance: Post_variance_order_by
}

"""
input type for inserting array relation for remote table "Post"
"""
input Post_arr_rel_insert_input {
  data: [Post_insert_input!]!

  """upsert condition"""
  on_conflict: Post_on_conflict
}

"""aggregate avg on columns"""
type Post_avg_fields {
  authorId: Float
  id: Float
}

"""
order by avg() on columns of table "Post"
"""
input Post_avg_order_by {
  authorId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "Post". All fields are combined with a logical 'AND'.
"""
input Post_bool_exp {
  User: User_bool_exp
  _and: [Post_bool_exp!]
  _not: Post_bool_exp
  _or: [Post_bool_exp!]
  authorId: Int_comparison_exp
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  id: Int_comparison_exp
  published: Boolean_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Post"
"""
enum Post_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Post_pkey
}

"""
input type for incrementing numeric columns in table "Post"
"""
input Post_inc_input {
  authorId: Int
  id: Int
}

"""
input type for inserting data into table "Post"
"""
input Post_insert_input {
  User: User_obj_rel_insert_input
  authorId: Int
  content: String
  createdAt: timestamp
  id: Int
  published: Boolean
  title: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Post_max_fields {
  authorId: Int
  content: String
  createdAt: timestamp
  id: Int
  title: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "Post"
"""
input Post_max_order_by {
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  title: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Post_min_fields {
  authorId: Int
  content: String
  createdAt: timestamp
  id: Int
  title: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "Post"
"""
input Post_min_order_by {
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  title: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Post"
"""
type Post_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Post!]!
}

"""
on_conflict condition type for table "Post"
"""
input Post_on_conflict {
  constraint: Post_constraint!
  update_columns: [Post_update_column!]! = []
  where: Post_bool_exp
}

"""Ordering options when selecting data from "Post"."""
input Post_order_by {
  User: User_order_by
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  published: order_by
  title: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Post"""
input Post_pk_columns_input {
  id: Int!
}

"""
select columns of table "Post"
"""
enum Post_select_column {
  """column name"""
  authorId

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  published

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
select "Post_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Post"
"""
enum Post_select_column_Post_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  published
}

"""
select "Post_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Post"
"""
enum Post_select_column_Post_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  published
}

"""
input type for updating data in table "Post"
"""
input Post_set_input {
  authorId: Int
  content: String
  createdAt: timestamp
  id: Int
  published: Boolean
  title: String
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Post_stddev_fields {
  authorId: Float
  id: Float
}

"""
order by stddev() on columns of table "Post"
"""
input Post_stddev_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type Post_stddev_pop_fields {
  authorId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "Post"
"""
input Post_stddev_pop_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type Post_stddev_samp_fields {
  authorId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "Post"
"""
input Post_stddev_samp_order_by {
  authorId: order_by
  id: order_by
}

"""
Streaming cursor of the table "Post"
"""
input Post_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Post_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Post_stream_cursor_value_input {
  authorId: Int
  content: String
  createdAt: timestamp
  id: Int
  published: Boolean
  title: String
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Post_sum_fields {
  authorId: Int
  id: Int
}

"""
order by sum() on columns of table "Post"
"""
input Post_sum_order_by {
  authorId: order_by
  id: order_by
}

"""
update columns of table "Post"
"""
enum Post_update_column {
  """column name"""
  authorId

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  published

  """column name"""
  title

  """column name"""
  updatedAt
}

input Post_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Post_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Post_set_input
  where: Post_bool_exp!
}

"""aggregate var_pop on columns"""
type Post_var_pop_fields {
  authorId: Float
  id: Float
}

"""
order by var_pop() on columns of table "Post"
"""
input Post_var_pop_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type Post_var_samp_fields {
  authorId: Float
  id: Float
}

"""
order by var_samp() on columns of table "Post"
"""
input Post_var_samp_order_by {
  authorId: order_by
  id: order_by
}

"""aggregate variance on columns"""
type Post_variance_fields {
  authorId: Float
  id: Float
}

"""
order by variance() on columns of table "Post"
"""
input Post_variance_order_by {
  authorId: order_by
  id: order_by
}

scalar Role

"""
Boolean expression to compare columns of type "Role". All fields are combined with logical 'AND'.
"""
input Role_comparison_exp {
  _eq: Role
  _gt: Role
  _gte: Role
  _in: [Role!]
  _is_null: Boolean
  _lt: Role
  _lte: Role
  _neq: Role
  _nin: [Role!]
}

"""User role"""
enum Rolebe {
  ADMIN
  USER
}

"""
columns and relationships of "Settings"
"""
type Settings {
  """An object relationship"""
  Organization: Organization!
  createdAt: timestamp!
  id: Int!
  key: String!
  organizationId: Int!
  updatedAt: timestamp!
  value: String!
}

"""
aggregated selection of "Settings"
"""
type Settings_aggregate {
  aggregate: Settings_aggregate_fields
  nodes: [Settings!]!
}

input Settings_aggregate_bool_exp {
  count: Settings_aggregate_bool_exp_count
}

input Settings_aggregate_bool_exp_count {
  arguments: [Settings_select_column!]
  distinct: Boolean
  filter: Settings_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Settings"
"""
type Settings_aggregate_fields {
  avg: Settings_avg_fields
  count(columns: [Settings_select_column!], distinct: Boolean): Int!
  max: Settings_max_fields
  min: Settings_min_fields
  stddev: Settings_stddev_fields
  stddev_pop: Settings_stddev_pop_fields
  stddev_samp: Settings_stddev_samp_fields
  sum: Settings_sum_fields
  var_pop: Settings_var_pop_fields
  var_samp: Settings_var_samp_fields
  variance: Settings_variance_fields
}

"""
order by aggregate values of table "Settings"
"""
input Settings_aggregate_order_by {
  avg: Settings_avg_order_by
  count: order_by
  max: Settings_max_order_by
  min: Settings_min_order_by
  stddev: Settings_stddev_order_by
  stddev_pop: Settings_stddev_pop_order_by
  stddev_samp: Settings_stddev_samp_order_by
  sum: Settings_sum_order_by
  var_pop: Settings_var_pop_order_by
  var_samp: Settings_var_samp_order_by
  variance: Settings_variance_order_by
}

"""
input type for inserting array relation for remote table "Settings"
"""
input Settings_arr_rel_insert_input {
  data: [Settings_insert_input!]!

  """upsert condition"""
  on_conflict: Settings_on_conflict
}

"""aggregate avg on columns"""
type Settings_avg_fields {
  id: Float
  organizationId: Float
}

"""
order by avg() on columns of table "Settings"
"""
input Settings_avg_order_by {
  id: order_by
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "Settings". All fields are combined with a logical 'AND'.
"""
input Settings_bool_exp {
  Organization: Organization_bool_exp
  _and: [Settings_bool_exp!]
  _not: Settings_bool_exp
  _or: [Settings_bool_exp!]
  createdAt: timestamp_comparison_exp
  id: Int_comparison_exp
  key: String_comparison_exp
  organizationId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "Settings"
"""
enum Settings_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Settings_pkey
}

"""
input type for incrementing numeric columns in table "Settings"
"""
input Settings_inc_input {
  id: Int
  organizationId: Int
}

"""
input type for inserting data into table "Settings"
"""
input Settings_insert_input {
  Organization: Organization_obj_rel_insert_input
  createdAt: timestamp
  id: Int
  key: String
  organizationId: Int
  updatedAt: timestamp
  value: String
}

"""aggregate max on columns"""
type Settings_max_fields {
  createdAt: timestamp
  id: Int
  key: String
  organizationId: Int
  updatedAt: timestamp
  value: String
}

"""
order by max() on columns of table "Settings"
"""
input Settings_max_order_by {
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""aggregate min on columns"""
type Settings_min_fields {
  createdAt: timestamp
  id: Int
  key: String
  organizationId: Int
  updatedAt: timestamp
  value: String
}

"""
order by min() on columns of table "Settings"
"""
input Settings_min_order_by {
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""
response of any mutation on the table "Settings"
"""
type Settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Settings!]!
}

"""
on_conflict condition type for table "Settings"
"""
input Settings_on_conflict {
  constraint: Settings_constraint!
  update_columns: [Settings_update_column!]! = []
  where: Settings_bool_exp
}

"""Ordering options when selecting data from "Settings"."""
input Settings_order_by {
  Organization: Organization_order_by
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""primary key columns input for table: Settings"""
input Settings_pk_columns_input {
  id: Int!
}

"""
select columns of table "Settings"
"""
enum Settings_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  key

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  value
}

"""
input type for updating data in table "Settings"
"""
input Settings_set_input {
  createdAt: timestamp
  id: Int
  key: String
  organizationId: Int
  updatedAt: timestamp
  value: String
}

"""aggregate stddev on columns"""
type Settings_stddev_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev() on columns of table "Settings"
"""
input Settings_stddev_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type Settings_stddev_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "Settings"
"""
input Settings_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type Settings_stddev_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "Settings"
"""
input Settings_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""
Streaming cursor of the table "Settings"
"""
input Settings_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Settings_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Settings_stream_cursor_value_input {
  createdAt: timestamp
  id: Int
  key: String
  organizationId: Int
  updatedAt: timestamp
  value: String
}

"""aggregate sum on columns"""
type Settings_sum_fields {
  id: Int
  organizationId: Int
}

"""
order by sum() on columns of table "Settings"
"""
input Settings_sum_order_by {
  id: order_by
  organizationId: order_by
}

"""
update columns of table "Settings"
"""
enum Settings_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  key

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  value
}

input Settings_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Settings_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Settings_set_input
  where: Settings_bool_exp!
}

"""aggregate var_pop on columns"""
type Settings_var_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by var_pop() on columns of table "Settings"
"""
input Settings_var_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type Settings_var_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by var_samp() on columns of table "Settings"
"""
input Settings_var_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate variance on columns"""
type Settings_variance_fields {
  id: Float
  organizationId: Float
}

"""
order by variance() on columns of table "Settings"
"""
input Settings_variance_order_by {
  id: order_by
  organizationId: order_by
}

input SignupInputbe {
  email: String!
  firstname: String
  lastname: String
  organizationId: Int!
  password: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "Task"
"""
type Task {
  """An array relationship"""
  Comments(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): [Comment!]!

  """An aggregate relationship"""
  Comments_aggregate(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): Comment_aggregate!

  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """An object relationship"""
  Organization: Organization!

  """An object relationship"""
  Task: Task

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): Task_aggregate!

  """An object relationship"""
  Team: Team!
  assigneeId: String!
  createdAt: timestamp!
  creatorId: String!
  description: String!
  dueDate: timestamp!
  id: String!
  organizationId: Int!
  parentId: String
  priority: TaskPriority!
  projectId: String!
  status: TaskStatus!
  teamId: String!
  title: String!
  updatedAt: timestamp!
}

"""
columns and relationships of "TaskDefinition"
"""
type TaskDefinition {
  """An object relationship"""
  Activity: Activity!

  """An object relationship"""
  Organization: Organization!

  """An object relationship"""
  TaskDefinition: TaskDefinition

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!

  """An object relationship"""
  Workflow: Workflow!
  actvityId: Int!
  config: String!
  createdAt: timestamp!
  description: String!
  icon: String!
  id: Int!
  organizationId: Int!
  parentId: Int
  thumbnail: String!
  title: String!
  updatedAt: timestamp!
  workflowId: Int!
}

"""
aggregated selection of "TaskDefinition"
"""
type TaskDefinition_aggregate {
  aggregate: TaskDefinition_aggregate_fields
  nodes: [TaskDefinition!]!
}

input TaskDefinition_aggregate_bool_exp {
  count: TaskDefinition_aggregate_bool_exp_count
}

input TaskDefinition_aggregate_bool_exp_count {
  arguments: [TaskDefinition_select_column!]
  distinct: Boolean
  filter: TaskDefinition_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "TaskDefinition"
"""
type TaskDefinition_aggregate_fields {
  avg: TaskDefinition_avg_fields
  count(columns: [TaskDefinition_select_column!], distinct: Boolean): Int!
  max: TaskDefinition_max_fields
  min: TaskDefinition_min_fields
  stddev: TaskDefinition_stddev_fields
  stddev_pop: TaskDefinition_stddev_pop_fields
  stddev_samp: TaskDefinition_stddev_samp_fields
  sum: TaskDefinition_sum_fields
  var_pop: TaskDefinition_var_pop_fields
  var_samp: TaskDefinition_var_samp_fields
  variance: TaskDefinition_variance_fields
}

"""
order by aggregate values of table "TaskDefinition"
"""
input TaskDefinition_aggregate_order_by {
  avg: TaskDefinition_avg_order_by
  count: order_by
  max: TaskDefinition_max_order_by
  min: TaskDefinition_min_order_by
  stddev: TaskDefinition_stddev_order_by
  stddev_pop: TaskDefinition_stddev_pop_order_by
  stddev_samp: TaskDefinition_stddev_samp_order_by
  sum: TaskDefinition_sum_order_by
  var_pop: TaskDefinition_var_pop_order_by
  var_samp: TaskDefinition_var_samp_order_by
  variance: TaskDefinition_variance_order_by
}

"""
input type for inserting array relation for remote table "TaskDefinition"
"""
input TaskDefinition_arr_rel_insert_input {
  data: [TaskDefinition_insert_input!]!

  """upsert condition"""
  on_conflict: TaskDefinition_on_conflict
}

"""aggregate avg on columns"""
type TaskDefinition_avg_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by avg() on columns of table "TaskDefinition"
"""
input TaskDefinition_avg_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""
Boolean expression to filter rows from the table "TaskDefinition". All fields are combined with a logical 'AND'.
"""
input TaskDefinition_bool_exp {
  Activity: Activity_bool_exp
  Organization: Organization_bool_exp
  TaskDefinition: TaskDefinition_bool_exp
  TaskDefinitions: TaskDefinition_bool_exp
  TaskDefinitions_aggregate: TaskDefinition_aggregate_bool_exp
  Workflow: Workflow_bool_exp
  _and: [TaskDefinition_bool_exp!]
  _not: TaskDefinition_bool_exp
  _or: [TaskDefinition_bool_exp!]
  actvityId: Int_comparison_exp
  config: String_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  icon: String_comparison_exp
  id: Int_comparison_exp
  organizationId: Int_comparison_exp
  parentId: Int_comparison_exp
  thumbnail: String_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  workflowId: Int_comparison_exp
}

"""
unique or primary key constraints on table "TaskDefinition"
"""
enum TaskDefinition_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  TaskDefinition_pkey
}

"""
input type for incrementing numeric columns in table "TaskDefinition"
"""
input TaskDefinition_inc_input {
  actvityId: Int
  id: Int
  organizationId: Int
  parentId: Int
  workflowId: Int
}

"""
input type for inserting data into table "TaskDefinition"
"""
input TaskDefinition_insert_input {
  Activity: Activity_obj_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  TaskDefinition: TaskDefinition_obj_rel_insert_input
  TaskDefinitions: TaskDefinition_arr_rel_insert_input
  Workflow: Workflow_obj_rel_insert_input
  actvityId: Int
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: Int
  organizationId: Int
  parentId: Int
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate max on columns"""
type TaskDefinition_max_fields {
  actvityId: Int
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: Int
  organizationId: Int
  parentId: Int
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: Int
}

"""
order by max() on columns of table "TaskDefinition"
"""
input TaskDefinition_max_order_by {
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""aggregate min on columns"""
type TaskDefinition_min_fields {
  actvityId: Int
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: Int
  organizationId: Int
  parentId: Int
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: Int
}

"""
order by min() on columns of table "TaskDefinition"
"""
input TaskDefinition_min_order_by {
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""
response of any mutation on the table "TaskDefinition"
"""
type TaskDefinition_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [TaskDefinition!]!
}

"""
input type for inserting object relation for remote table "TaskDefinition"
"""
input TaskDefinition_obj_rel_insert_input {
  data: TaskDefinition_insert_input!

  """upsert condition"""
  on_conflict: TaskDefinition_on_conflict
}

"""
on_conflict condition type for table "TaskDefinition"
"""
input TaskDefinition_on_conflict {
  constraint: TaskDefinition_constraint!
  update_columns: [TaskDefinition_update_column!]! = []
  where: TaskDefinition_bool_exp
}

"""Ordering options when selecting data from "TaskDefinition"."""
input TaskDefinition_order_by {
  Activity: Activity_order_by
  Organization: Organization_order_by
  TaskDefinition: TaskDefinition_order_by
  TaskDefinitions_aggregate: TaskDefinition_aggregate_order_by
  Workflow: Workflow_order_by
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""primary key columns input for table: TaskDefinition"""
input TaskDefinition_pk_columns_input {
  id: Int!
}

"""
select columns of table "TaskDefinition"
"""
enum TaskDefinition_select_column {
  """column name"""
  actvityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  icon

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  thumbnail

  """column name"""
  title

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
input type for updating data in table "TaskDefinition"
"""
input TaskDefinition_set_input {
  actvityId: Int
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: Int
  organizationId: Int
  parentId: Int
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate stddev on columns"""
type TaskDefinition_stddev_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by stddev() on columns of table "TaskDefinition"
"""
input TaskDefinition_stddev_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""aggregate stddev_pop on columns"""
type TaskDefinition_stddev_pop_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by stddev_pop() on columns of table "TaskDefinition"
"""
input TaskDefinition_stddev_pop_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""aggregate stddev_samp on columns"""
type TaskDefinition_stddev_samp_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by stddev_samp() on columns of table "TaskDefinition"
"""
input TaskDefinition_stddev_samp_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""
Streaming cursor of the table "TaskDefinition"
"""
input TaskDefinition_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: TaskDefinition_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input TaskDefinition_stream_cursor_value_input {
  actvityId: Int
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: Int
  organizationId: Int
  parentId: Int
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: Int
}

"""aggregate sum on columns"""
type TaskDefinition_sum_fields {
  actvityId: Int
  id: Int
  organizationId: Int
  parentId: Int
  workflowId: Int
}

"""
order by sum() on columns of table "TaskDefinition"
"""
input TaskDefinition_sum_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""
update columns of table "TaskDefinition"
"""
enum TaskDefinition_update_column {
  """column name"""
  actvityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  icon

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  thumbnail

  """column name"""
  title

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

input TaskDefinition_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: TaskDefinition_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: TaskDefinition_set_input
  where: TaskDefinition_bool_exp!
}

"""aggregate var_pop on columns"""
type TaskDefinition_var_pop_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by var_pop() on columns of table "TaskDefinition"
"""
input TaskDefinition_var_pop_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""aggregate var_samp on columns"""
type TaskDefinition_var_samp_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by var_samp() on columns of table "TaskDefinition"
"""
input TaskDefinition_var_samp_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

"""aggregate variance on columns"""
type TaskDefinition_variance_fields {
  actvityId: Float
  id: Float
  organizationId: Float
  parentId: Float
  workflowId: Float
}

"""
order by variance() on columns of table "TaskDefinition"
"""
input TaskDefinition_variance_order_by {
  actvityId: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  workflowId: order_by
}

scalar TaskPriority

"""
Boolean expression to compare columns of type "TaskPriority". All fields are combined with logical 'AND'.
"""
input TaskPriority_comparison_exp {
  _eq: TaskPriority
  _gt: TaskPriority
  _gte: TaskPriority
  _in: [TaskPriority!]
  _is_null: Boolean
  _lt: TaskPriority
  _lte: TaskPriority
  _neq: TaskPriority
  _nin: [TaskPriority!]
}

scalar TaskStatus

"""
Boolean expression to compare columns of type "TaskStatus". All fields are combined with logical 'AND'.
"""
input TaskStatus_comparison_exp {
  _eq: TaskStatus
  _gt: TaskStatus
  _gte: TaskStatus
  _in: [TaskStatus!]
  _is_null: Boolean
  _lt: TaskStatus
  _lte: TaskStatus
  _neq: TaskStatus
  _nin: [TaskStatus!]
}

"""
aggregated selection of "Task"
"""
type Task_aggregate {
  aggregate: Task_aggregate_fields
  nodes: [Task!]!
}

input Task_aggregate_bool_exp {
  count: Task_aggregate_bool_exp_count
}

input Task_aggregate_bool_exp_count {
  arguments: [Task_select_column!]
  distinct: Boolean
  filter: Task_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Task"
"""
type Task_aggregate_fields {
  avg: Task_avg_fields
  count(columns: [Task_select_column!], distinct: Boolean): Int!
  max: Task_max_fields
  min: Task_min_fields
  stddev: Task_stddev_fields
  stddev_pop: Task_stddev_pop_fields
  stddev_samp: Task_stddev_samp_fields
  sum: Task_sum_fields
  var_pop: Task_var_pop_fields
  var_samp: Task_var_samp_fields
  variance: Task_variance_fields
}

"""
order by aggregate values of table "Task"
"""
input Task_aggregate_order_by {
  avg: Task_avg_order_by
  count: order_by
  max: Task_max_order_by
  min: Task_min_order_by
  stddev: Task_stddev_order_by
  stddev_pop: Task_stddev_pop_order_by
  stddev_samp: Task_stddev_samp_order_by
  sum: Task_sum_order_by
  var_pop: Task_var_pop_order_by
  var_samp: Task_var_samp_order_by
  variance: Task_variance_order_by
}

"""
input type for inserting array relation for remote table "Task"
"""
input Task_arr_rel_insert_input {
  data: [Task_insert_input!]!

  """upsert condition"""
  on_conflict: Task_on_conflict
}

"""aggregate avg on columns"""
type Task_avg_fields {
  organizationId: Float
}

"""
order by avg() on columns of table "Task"
"""
input Task_avg_order_by {
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "Task". All fields are combined with a logical 'AND'.
"""
input Task_bool_exp {
  Comments: Comment_bool_exp
  Comments_aggregate: Comment_aggregate_bool_exp
  EventLogs: EventLog_bool_exp
  EventLogs_aggregate: EventLog_aggregate_bool_exp
  Organization: Organization_bool_exp
  Task: Task_bool_exp
  Tasks: Task_bool_exp
  Tasks_aggregate: Task_aggregate_bool_exp
  Team: Team_bool_exp
  _and: [Task_bool_exp!]
  _not: Task_bool_exp
  _or: [Task_bool_exp!]
  assigneeId: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: String_comparison_exp
  description: String_comparison_exp
  dueDate: timestamp_comparison_exp
  id: String_comparison_exp
  organizationId: Int_comparison_exp
  parentId: String_comparison_exp
  priority: TaskPriority_comparison_exp
  projectId: String_comparison_exp
  status: TaskStatus_comparison_exp
  teamId: String_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Task"
"""
enum Task_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Task_pkey
}

"""
input type for incrementing numeric columns in table "Task"
"""
input Task_inc_input {
  organizationId: Int
}

"""
input type for inserting data into table "Task"
"""
input Task_insert_input {
  Comments: Comment_arr_rel_insert_input
  EventLogs: EventLog_arr_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  Task: Task_obj_rel_insert_input
  Tasks: Task_arr_rel_insert_input
  Team: Team_obj_rel_insert_input
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: Int
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Task_max_fields {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: Int
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "Task"
"""
input Task_max_order_by {
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  priority: order_by
  projectId: order_by
  status: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Task_min_fields {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: Int
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "Task"
"""
input Task_min_order_by {
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  priority: order_by
  projectId: order_by
  status: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Task"
"""
type Task_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Task!]!
}

"""
input type for inserting object relation for remote table "Task"
"""
input Task_obj_rel_insert_input {
  data: Task_insert_input!

  """upsert condition"""
  on_conflict: Task_on_conflict
}

"""
on_conflict condition type for table "Task"
"""
input Task_on_conflict {
  constraint: Task_constraint!
  update_columns: [Task_update_column!]! = []
  where: Task_bool_exp
}

"""Ordering options when selecting data from "Task"."""
input Task_order_by {
  Comments_aggregate: Comment_aggregate_order_by
  EventLogs_aggregate: EventLog_aggregate_order_by
  Organization: Organization_order_by
  Task: Task_order_by
  Tasks_aggregate: Task_aggregate_order_by
  Team: Team_order_by
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  priority: order_by
  projectId: order_by
  status: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Task"""
input Task_pk_columns_input {
  id: String!
}

"""
select columns of table "Task"
"""
enum Task_select_column {
  """column name"""
  assigneeId

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  priority

  """column name"""
  projectId

  """column name"""
  status

  """column name"""
  teamId

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Task"
"""
input Task_set_input {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: Int
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Task_stddev_fields {
  organizationId: Float
}

"""
order by stddev() on columns of table "Task"
"""
input Task_stddev_order_by {
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type Task_stddev_pop_fields {
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "Task"
"""
input Task_stddev_pop_order_by {
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type Task_stddev_samp_fields {
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "Task"
"""
input Task_stddev_samp_order_by {
  organizationId: order_by
}

"""
Streaming cursor of the table "Task"
"""
input Task_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Task_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Task_stream_cursor_value_input {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: Int
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Task_sum_fields {
  organizationId: Int
}

"""
order by sum() on columns of table "Task"
"""
input Task_sum_order_by {
  organizationId: order_by
}

"""
update columns of table "Task"
"""
enum Task_update_column {
  """column name"""
  assigneeId

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  priority

  """column name"""
  projectId

  """column name"""
  status

  """column name"""
  teamId

  """column name"""
  title

  """column name"""
  updatedAt
}

input Task_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Task_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Task_set_input
  where: Task_bool_exp!
}

"""aggregate var_pop on columns"""
type Task_var_pop_fields {
  organizationId: Float
}

"""
order by var_pop() on columns of table "Task"
"""
input Task_var_pop_order_by {
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type Task_var_samp_fields {
  organizationId: Float
}

"""
order by var_samp() on columns of table "Task"
"""
input Task_var_samp_order_by {
  organizationId: order_by
}

"""aggregate variance on columns"""
type Task_variance_fields {
  organizationId: Float
}

"""
order by variance() on columns of table "Task"
"""
input Task_variance_order_by {
  organizationId: order_by
}

"""
columns and relationships of "Team"
"""
type Team {
  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): [MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): MemberOnTeams_aggregate!

  """An object relationship"""
  Organization: Organization!

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): Task_aggregate!

  """An object relationship"""
  User: User!
  bio: String!
  createdAt: timestamp!
  creatorId: Int!
  description: String!
  id: String!
  managerId: Int!
  name: String!
  organizationId: Int!
  updatedAt: timestamp!

  """An object relationship"""
  userByManagerid: User!
}

"""
aggregated selection of "Team"
"""
type Team_aggregate {
  aggregate: Team_aggregate_fields
  nodes: [Team!]!
}

input Team_aggregate_bool_exp {
  count: Team_aggregate_bool_exp_count
}

input Team_aggregate_bool_exp_count {
  arguments: [Team_select_column!]
  distinct: Boolean
  filter: Team_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Team"
"""
type Team_aggregate_fields {
  avg: Team_avg_fields
  count(columns: [Team_select_column!], distinct: Boolean): Int!
  max: Team_max_fields
  min: Team_min_fields
  stddev: Team_stddev_fields
  stddev_pop: Team_stddev_pop_fields
  stddev_samp: Team_stddev_samp_fields
  sum: Team_sum_fields
  var_pop: Team_var_pop_fields
  var_samp: Team_var_samp_fields
  variance: Team_variance_fields
}

"""
order by aggregate values of table "Team"
"""
input Team_aggregate_order_by {
  avg: Team_avg_order_by
  count: order_by
  max: Team_max_order_by
  min: Team_min_order_by
  stddev: Team_stddev_order_by
  stddev_pop: Team_stddev_pop_order_by
  stddev_samp: Team_stddev_samp_order_by
  sum: Team_sum_order_by
  var_pop: Team_var_pop_order_by
  var_samp: Team_var_samp_order_by
  variance: Team_variance_order_by
}

"""
input type for inserting array relation for remote table "Team"
"""
input Team_arr_rel_insert_input {
  data: [Team_insert_input!]!

  """upsert condition"""
  on_conflict: Team_on_conflict
}

"""aggregate avg on columns"""
type Team_avg_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by avg() on columns of table "Team"
"""
input Team_avg_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "Team". All fields are combined with a logical 'AND'.
"""
input Team_bool_exp {
  MemberOnTeams: MemberOnTeams_bool_exp
  MemberOnTeams_aggregate: MemberOnTeams_aggregate_bool_exp
  Organization: Organization_bool_exp
  Tasks: Task_bool_exp
  Tasks_aggregate: Task_aggregate_bool_exp
  User: User_bool_exp
  _and: [Team_bool_exp!]
  _not: Team_bool_exp
  _or: [Team_bool_exp!]
  bio: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: Int_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  managerId: Int_comparison_exp
  name: String_comparison_exp
  organizationId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
  userByManagerid: User_bool_exp
}

"""
unique or primary key constraints on table "Team"
"""
enum Team_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Team_pkey
}

"""
input type for incrementing numeric columns in table "Team"
"""
input Team_inc_input {
  creatorId: Int
  managerId: Int
  organizationId: Int
}

"""
input type for inserting data into table "Team"
"""
input Team_insert_input {
  MemberOnTeams: MemberOnTeams_arr_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  Tasks: Task_arr_rel_insert_input
  User: User_obj_rel_insert_input
  bio: String
  createdAt: timestamp
  creatorId: Int
  description: String
  id: String
  managerId: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
  userByManagerid: User_obj_rel_insert_input
}

"""aggregate max on columns"""
type Team_max_fields {
  bio: String
  createdAt: timestamp
  creatorId: Int
  description: String
  id: String
  managerId: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by max() on columns of table "Team"
"""
input Team_max_order_by {
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Team_min_fields {
  bio: String
  createdAt: timestamp
  creatorId: Int
  description: String
  id: String
  managerId: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by min() on columns of table "Team"
"""
input Team_min_order_by {
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Team"
"""
type Team_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Team!]!
}

"""
input type for inserting object relation for remote table "Team"
"""
input Team_obj_rel_insert_input {
  data: Team_insert_input!

  """upsert condition"""
  on_conflict: Team_on_conflict
}

"""
on_conflict condition type for table "Team"
"""
input Team_on_conflict {
  constraint: Team_constraint!
  update_columns: [Team_update_column!]! = []
  where: Team_bool_exp
}

"""Ordering options when selecting data from "Team"."""
input Team_order_by {
  MemberOnTeams_aggregate: MemberOnTeams_aggregate_order_by
  Organization: Organization_order_by
  Tasks_aggregate: Task_aggregate_order_by
  User: User_order_by
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
  userByManagerid: User_order_by
}

"""primary key columns input for table: Team"""
input Team_pk_columns_input {
  id: String!
}

"""
select columns of table "Team"
"""
enum Team_select_column {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  id

  """column name"""
  managerId

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Team"
"""
input Team_set_input {
  bio: String
  createdAt: timestamp
  creatorId: Int
  description: String
  id: String
  managerId: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Team_stddev_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by stddev() on columns of table "Team"
"""
input Team_stddev_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type Team_stddev_pop_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "Team"
"""
input Team_stddev_pop_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type Team_stddev_samp_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "Team"
"""
input Team_stddev_samp_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""
Streaming cursor of the table "Team"
"""
input Team_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Team_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Team_stream_cursor_value_input {
  bio: String
  createdAt: timestamp
  creatorId: Int
  description: String
  id: String
  managerId: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Team_sum_fields {
  creatorId: Int
  managerId: Int
  organizationId: Int
}

"""
order by sum() on columns of table "Team"
"""
input Team_sum_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""
update columns of table "Team"
"""
enum Team_update_column {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  id

  """column name"""
  managerId

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

input Team_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: Team_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: Team_set_input
  where: Team_bool_exp!
}

"""aggregate var_pop on columns"""
type Team_var_pop_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by var_pop() on columns of table "Team"
"""
input Team_var_pop_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type Team_var_samp_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by var_samp() on columns of table "Team"
"""
input Team_var_samp_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

"""aggregate variance on columns"""
type Team_variance_fields {
  creatorId: Float
  managerId: Float
  organizationId: Float
}

"""
order by variance() on columns of table "Team"
"""
input Team_variance_order_by {
  creatorId: order_by
  managerId: order_by
  organizationId: order_by
}

type Tokenbe {
  """JWT access token"""
  accessToken: JWTbe!

  """JWT refresh token"""
  refreshToken: JWTbe!
}

"""
columns and relationships of "Trigger"
"""
type Trigger {
  """An object relationship"""
  Activity: Activity!
  activityId: Int!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  type: TriggerType!
  updatedAt: timestamp!
}

scalar TriggerType

"""
Boolean expression to compare columns of type "TriggerType". All fields are combined with logical 'AND'.
"""
input TriggerType_comparison_exp {
  _eq: TriggerType
  _gt: TriggerType
  _gte: TriggerType
  _in: [TriggerType!]
  _is_null: Boolean
  _lt: TriggerType
  _lte: TriggerType
  _neq: TriggerType
  _nin: [TriggerType!]
}

"""
aggregated selection of "Trigger"
"""
type Trigger_aggregate {
  aggregate: Trigger_aggregate_fields
  nodes: [Trigger!]!
}

input Trigger_aggregate_bool_exp {
  count: Trigger_aggregate_bool_exp_count
}

input Trigger_aggregate_bool_exp_count {
  arguments: [Trigger_select_column!]
  distinct: Boolean
  filter: Trigger_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Trigger"
"""
type Trigger_aggregate_fields {
  avg: Trigger_avg_fields
  count(columns: [Trigger_select_column!], distinct: Boolean): Int!
  max: Trigger_max_fields
  min: Trigger_min_fields
  stddev: Trigger_stddev_fields
  stddev_pop: Trigger_stddev_pop_fields
  stddev_samp: Trigger_stddev_samp_fields
  sum: Trigger_sum_fields
  var_pop: Trigger_var_pop_fields
  var_samp: Trigger_var_samp_fields
  variance: Trigger_variance_fields
}

"""
order by aggregate values of table "Trigger"
"""
input Trigger_aggregate_order_by {
  avg: Trigger_avg_order_by
  count: order_by
  max: Trigger_max_order_by
  min: Trigger_min_order_by
  stddev: Trigger_stddev_order_by
  stddev_pop: Trigger_stddev_pop_order_by
  stddev_samp: Trigger_stddev_samp_order_by
  sum: Trigger_sum_order_by
  var_pop: Trigger_var_pop_order_by
  var_samp: Trigger_var_samp_order_by
  variance: Trigger_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input Trigger_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "Trigger"
"""
input Trigger_arr_rel_insert_input {
  data: [Trigger_insert_input!]!

  """upsert condition"""
  on_conflict: Trigger_on_conflict
}

"""aggregate avg on columns"""
type Trigger_avg_fields {
  activityId: Float
  id: Float
}

"""
order by avg() on columns of table "Trigger"
"""
input Trigger_avg_order_by {
  activityId: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "Trigger". All fields are combined with a logical 'AND'.
"""
input Trigger_bool_exp {
  Activity: Activity_bool_exp
  _and: [Trigger_bool_exp!]
  _not: Trigger_bool_exp
  _or: [Trigger_bool_exp!]
  activityId: Int_comparison_exp
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  type: TriggerType_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Trigger"
"""
enum Trigger_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Trigger_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input Trigger_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input Trigger_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input Trigger_delete_key_input {
  config: String
}

"""
input type for incrementing numeric columns in table "Trigger"
"""
input Trigger_inc_input {
  activityId: Int
  id: Int
}

"""
input type for inserting data into table "Trigger"
"""
input Trigger_insert_input {
  Activity: Activity_obj_rel_insert_input
  activityId: Int
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Trigger_max_fields {
  activityId: Int
  createdAt: timestamp
  description: String
  id: Int
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""
order by max() on columns of table "Trigger"
"""
input Trigger_max_order_by {
  activityId: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Trigger_min_fields {
  activityId: Int
  createdAt: timestamp
  description: String
  id: Int
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""
order by min() on columns of table "Trigger"
"""
input Trigger_min_order_by {
  activityId: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Trigger"
"""
type Trigger_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Trigger!]!
}

"""
on_conflict condition type for table "Trigger"
"""
input Trigger_on_conflict {
  constraint: Trigger_constraint!
  update_columns: [Trigger_update_column!]! = []
  where: Trigger_bool_exp
}

"""Ordering options when selecting data from "Trigger"."""
input Trigger_order_by {
  Activity: Activity_order_by
  activityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Trigger"""
input Trigger_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input Trigger_prepend_input {
  config: jsonb
}

"""
select columns of table "Trigger"
"""
enum Trigger_select_column {
  """column name"""
  activityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Trigger"
"""
input Trigger_set_input {
  activityId: Int
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Trigger_stddev_fields {
  activityId: Float
  id: Float
}

"""
order by stddev() on columns of table "Trigger"
"""
input Trigger_stddev_order_by {
  activityId: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type Trigger_stddev_pop_fields {
  activityId: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "Trigger"
"""
input Trigger_stddev_pop_order_by {
  activityId: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type Trigger_stddev_samp_fields {
  activityId: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "Trigger"
"""
input Trigger_stddev_samp_order_by {
  activityId: order_by
  id: order_by
}

"""
Streaming cursor of the table "Trigger"
"""
input Trigger_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Trigger_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Trigger_stream_cursor_value_input {
  activityId: Int
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Trigger_sum_fields {
  activityId: Int
  id: Int
}

"""
order by sum() on columns of table "Trigger"
"""
input Trigger_sum_order_by {
  activityId: order_by
  id: order_by
}

"""
update columns of table "Trigger"
"""
enum Trigger_update_column {
  """column name"""
  activityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updatedAt
}

input Trigger_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: Trigger_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: Trigger_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: Trigger_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: Trigger_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: Trigger_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: Trigger_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: Trigger_set_input
  where: Trigger_bool_exp!
}

"""aggregate var_pop on columns"""
type Trigger_var_pop_fields {
  activityId: Float
  id: Float
}

"""
order by var_pop() on columns of table "Trigger"
"""
input Trigger_var_pop_order_by {
  activityId: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type Trigger_var_samp_fields {
  activityId: Float
  id: Float
}

"""
order by var_samp() on columns of table "Trigger"
"""
input Trigger_var_samp_order_by {
  activityId: order_by
  id: order_by
}

"""aggregate variance on columns"""
type Trigger_variance_fields {
  activityId: Float
  id: Float
}

"""
order by variance() on columns of table "Trigger"
"""
input Trigger_variance_order_by {
  activityId: order_by
  id: order_by
}

input UpdateUserInputbe {
  firstname: String
  lastname: String
}

"""
columns and relationships of "User"
"""
type User {
  """An array relationship"""
  Comments(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): [Comment!]!

  """An aggregate relationship"""
  Comments_aggregate(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): Comment_aggregate!

  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): [MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): MemberOnTeams_aggregate!

  """An object relationship"""
  Organization: Organization!

  """An array relationship"""
  Posts(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): [Post!]!

  """An aggregate relationship"""
  Posts_aggregate(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): Post_aggregate!

  """An array relationship"""
  Teams(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """An aggregate relationship"""
  Teams_aggregate(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): Team_aggregate!

  """An array relationship"""
  UserPermissions(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): [UserPermission!]!

  """An aggregate relationship"""
  UserPermissions_aggregate(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): UserPermission_aggregate!
  createdAt: timestamp!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  organizationId: Int!
  password: String!
  role: Role!

  """An array relationship"""
  teamsByManagerid(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """An aggregate relationship"""
  teamsByManagerid_aggregate(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): Team_aggregate!
  updatedAt: timestamp!
}

"""
columns and relationships of "UserPermission"
"""
type UserPermission {
  """An object relationship"""
  Permission: Permission!

  """An object relationship"""
  User: User!
  createdAt: timestamp!
  id: String!
  permissionId: Int!
  userId: Int!
}

"""
aggregated selection of "UserPermission"
"""
type UserPermission_aggregate {
  aggregate: UserPermission_aggregate_fields
  nodes: [UserPermission!]!
}

input UserPermission_aggregate_bool_exp {
  count: UserPermission_aggregate_bool_exp_count
}

input UserPermission_aggregate_bool_exp_count {
  arguments: [UserPermission_select_column!]
  distinct: Boolean
  filter: UserPermission_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "UserPermission"
"""
type UserPermission_aggregate_fields {
  avg: UserPermission_avg_fields
  count(columns: [UserPermission_select_column!], distinct: Boolean): Int!
  max: UserPermission_max_fields
  min: UserPermission_min_fields
  stddev: UserPermission_stddev_fields
  stddev_pop: UserPermission_stddev_pop_fields
  stddev_samp: UserPermission_stddev_samp_fields
  sum: UserPermission_sum_fields
  var_pop: UserPermission_var_pop_fields
  var_samp: UserPermission_var_samp_fields
  variance: UserPermission_variance_fields
}

"""
order by aggregate values of table "UserPermission"
"""
input UserPermission_aggregate_order_by {
  avg: UserPermission_avg_order_by
  count: order_by
  max: UserPermission_max_order_by
  min: UserPermission_min_order_by
  stddev: UserPermission_stddev_order_by
  stddev_pop: UserPermission_stddev_pop_order_by
  stddev_samp: UserPermission_stddev_samp_order_by
  sum: UserPermission_sum_order_by
  var_pop: UserPermission_var_pop_order_by
  var_samp: UserPermission_var_samp_order_by
  variance: UserPermission_variance_order_by
}

"""
input type for inserting array relation for remote table "UserPermission"
"""
input UserPermission_arr_rel_insert_input {
  data: [UserPermission_insert_input!]!

  """upsert condition"""
  on_conflict: UserPermission_on_conflict
}

"""aggregate avg on columns"""
type UserPermission_avg_fields {
  permissionId: Float
  userId: Float
}

"""
order by avg() on columns of table "UserPermission"
"""
input UserPermission_avg_order_by {
  permissionId: order_by
  userId: order_by
}

"""
Boolean expression to filter rows from the table "UserPermission". All fields are combined with a logical 'AND'.
"""
input UserPermission_bool_exp {
  Permission: Permission_bool_exp
  User: User_bool_exp
  _and: [UserPermission_bool_exp!]
  _not: UserPermission_bool_exp
  _or: [UserPermission_bool_exp!]
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  permissionId: Int_comparison_exp
  userId: Int_comparison_exp
}

"""
unique or primary key constraints on table "UserPermission"
"""
enum UserPermission_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  UserPermission_pkey
}

"""
input type for incrementing numeric columns in table "UserPermission"
"""
input UserPermission_inc_input {
  permissionId: Int
  userId: Int
}

"""
input type for inserting data into table "UserPermission"
"""
input UserPermission_insert_input {
  Permission: Permission_obj_rel_insert_input
  User: User_obj_rel_insert_input
  createdAt: timestamp
  id: String
  permissionId: Int
  userId: Int
}

"""aggregate max on columns"""
type UserPermission_max_fields {
  createdAt: timestamp
  id: String
  permissionId: Int
  userId: Int
}

"""
order by max() on columns of table "UserPermission"
"""
input UserPermission_max_order_by {
  createdAt: order_by
  id: order_by
  permissionId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type UserPermission_min_fields {
  createdAt: timestamp
  id: String
  permissionId: Int
  userId: Int
}

"""
order by min() on columns of table "UserPermission"
"""
input UserPermission_min_order_by {
  createdAt: order_by
  id: order_by
  permissionId: order_by
  userId: order_by
}

"""
response of any mutation on the table "UserPermission"
"""
type UserPermission_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [UserPermission!]!
}

"""
on_conflict condition type for table "UserPermission"
"""
input UserPermission_on_conflict {
  constraint: UserPermission_constraint!
  update_columns: [UserPermission_update_column!]! = []
  where: UserPermission_bool_exp
}

"""Ordering options when selecting data from "UserPermission"."""
input UserPermission_order_by {
  Permission: Permission_order_by
  User: User_order_by
  createdAt: order_by
  id: order_by
  permissionId: order_by
  userId: order_by
}

"""primary key columns input for table: UserPermission"""
input UserPermission_pk_columns_input {
  id: String!
}

"""
select columns of table "UserPermission"
"""
enum UserPermission_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  permissionId

  """column name"""
  userId
}

"""
input type for updating data in table "UserPermission"
"""
input UserPermission_set_input {
  createdAt: timestamp
  id: String
  permissionId: Int
  userId: Int
}

"""aggregate stddev on columns"""
type UserPermission_stddev_fields {
  permissionId: Float
  userId: Float
}

"""
order by stddev() on columns of table "UserPermission"
"""
input UserPermission_stddev_order_by {
  permissionId: order_by
  userId: order_by
}

"""aggregate stddev_pop on columns"""
type UserPermission_stddev_pop_fields {
  permissionId: Float
  userId: Float
}

"""
order by stddev_pop() on columns of table "UserPermission"
"""
input UserPermission_stddev_pop_order_by {
  permissionId: order_by
  userId: order_by
}

"""aggregate stddev_samp on columns"""
type UserPermission_stddev_samp_fields {
  permissionId: Float
  userId: Float
}

"""
order by stddev_samp() on columns of table "UserPermission"
"""
input UserPermission_stddev_samp_order_by {
  permissionId: order_by
  userId: order_by
}

"""
Streaming cursor of the table "UserPermission"
"""
input UserPermission_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: UserPermission_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input UserPermission_stream_cursor_value_input {
  createdAt: timestamp
  id: String
  permissionId: Int
  userId: Int
}

"""aggregate sum on columns"""
type UserPermission_sum_fields {
  permissionId: Int
  userId: Int
}

"""
order by sum() on columns of table "UserPermission"
"""
input UserPermission_sum_order_by {
  permissionId: order_by
  userId: order_by
}

"""
update columns of table "UserPermission"
"""
enum UserPermission_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  permissionId

  """column name"""
  userId
}

input UserPermission_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: UserPermission_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: UserPermission_set_input
  where: UserPermission_bool_exp!
}

"""aggregate var_pop on columns"""
type UserPermission_var_pop_fields {
  permissionId: Float
  userId: Float
}

"""
order by var_pop() on columns of table "UserPermission"
"""
input UserPermission_var_pop_order_by {
  permissionId: order_by
  userId: order_by
}

"""aggregate var_samp on columns"""
type UserPermission_var_samp_fields {
  permissionId: Float
  userId: Float
}

"""
order by var_samp() on columns of table "UserPermission"
"""
input UserPermission_var_samp_order_by {
  permissionId: order_by
  userId: order_by
}

"""aggregate variance on columns"""
type UserPermission_variance_fields {
  permissionId: Float
  userId: Float
}

"""
order by variance() on columns of table "UserPermission"
"""
input UserPermission_variance_order_by {
  permissionId: order_by
  userId: order_by
}

"""
aggregated selection of "User"
"""
type User_aggregate {
  aggregate: User_aggregate_fields
  nodes: [User!]!
}

input User_aggregate_bool_exp {
  count: User_aggregate_bool_exp_count
}

input User_aggregate_bool_exp_count {
  arguments: [User_select_column!]
  distinct: Boolean
  filter: User_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "User"
"""
type User_aggregate_fields {
  avg: User_avg_fields
  count(columns: [User_select_column!], distinct: Boolean): Int!
  max: User_max_fields
  min: User_min_fields
  stddev: User_stddev_fields
  stddev_pop: User_stddev_pop_fields
  stddev_samp: User_stddev_samp_fields
  sum: User_sum_fields
  var_pop: User_var_pop_fields
  var_samp: User_var_samp_fields
  variance: User_variance_fields
}

"""
order by aggregate values of table "User"
"""
input User_aggregate_order_by {
  avg: User_avg_order_by
  count: order_by
  max: User_max_order_by
  min: User_min_order_by
  stddev: User_stddev_order_by
  stddev_pop: User_stddev_pop_order_by
  stddev_samp: User_stddev_samp_order_by
  sum: User_sum_order_by
  var_pop: User_var_pop_order_by
  var_samp: User_var_samp_order_by
  variance: User_variance_order_by
}

"""
input type for inserting array relation for remote table "User"
"""
input User_arr_rel_insert_input {
  data: [User_insert_input!]!

  """upsert condition"""
  on_conflict: User_on_conflict
}

"""aggregate avg on columns"""
type User_avg_fields {
  id: Float
  organizationId: Float
}

"""
order by avg() on columns of table "User"
"""
input User_avg_order_by {
  id: order_by
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'.
"""
input User_bool_exp {
  Comments: Comment_bool_exp
  Comments_aggregate: Comment_aggregate_bool_exp
  EventLogs: EventLog_bool_exp
  EventLogs_aggregate: EventLog_aggregate_bool_exp
  MemberOnTeams: MemberOnTeams_bool_exp
  MemberOnTeams_aggregate: MemberOnTeams_aggregate_bool_exp
  Organization: Organization_bool_exp
  Posts: Post_bool_exp
  Posts_aggregate: Post_aggregate_bool_exp
  Teams: Team_bool_exp
  Teams_aggregate: Team_aggregate_bool_exp
  UserPermissions: UserPermission_bool_exp
  UserPermissions_aggregate: UserPermission_aggregate_bool_exp
  _and: [User_bool_exp!]
  _not: User_bool_exp
  _or: [User_bool_exp!]
  createdAt: timestamp_comparison_exp
  email: String_comparison_exp
  firstname: String_comparison_exp
  id: Int_comparison_exp
  lastname: String_comparison_exp
  organizationId: Int_comparison_exp
  password: String_comparison_exp
  role: Role_comparison_exp
  teamsByManagerid: Team_bool_exp
  teamsByManagerid_aggregate: Team_aggregate_bool_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "User"
"""
enum User_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  User_email_key

  """
  unique or primary key constraint on columns "id"
  """
  User_pkey
}

"""
input type for incrementing numeric columns in table "User"
"""
input User_inc_input {
  id: Int
  organizationId: Int
}

"""
input type for inserting data into table "User"
"""
input User_insert_input {
  Comments: Comment_arr_rel_insert_input
  EventLogs: EventLog_arr_rel_insert_input
  MemberOnTeams: MemberOnTeams_arr_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  Posts: Post_arr_rel_insert_input
  Teams: Team_arr_rel_insert_input
  UserPermissions: UserPermission_arr_rel_insert_input
  createdAt: timestamp
  email: String
  firstname: String
  id: Int
  lastname: String
  organizationId: Int
  password: String
  role: Role
  teamsByManagerid: Team_arr_rel_insert_input
  updatedAt: timestamp
}

"""aggregate max on columns"""
type User_max_fields {
  createdAt: timestamp
  email: String
  firstname: String
  id: Int
  lastname: String
  organizationId: Int
  password: String
  role: Role
  updatedAt: timestamp
}

"""
order by max() on columns of table "User"
"""
input User_max_order_by {
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  role: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type User_min_fields {
  createdAt: timestamp
  email: String
  firstname: String
  id: Int
  lastname: String
  organizationId: Int
  password: String
  role: Role
  updatedAt: timestamp
}

"""
order by min() on columns of table "User"
"""
input User_min_order_by {
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  role: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "User"
"""
type User_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [User!]!
}

"""
input type for inserting object relation for remote table "User"
"""
input User_obj_rel_insert_input {
  data: User_insert_input!

  """upsert condition"""
  on_conflict: User_on_conflict
}

"""
on_conflict condition type for table "User"
"""
input User_on_conflict {
  constraint: User_constraint!
  update_columns: [User_update_column!]! = []
  where: User_bool_exp
}

"""Ordering options when selecting data from "User"."""
input User_order_by {
  Comments_aggregate: Comment_aggregate_order_by
  EventLogs_aggregate: EventLog_aggregate_order_by
  MemberOnTeams_aggregate: MemberOnTeams_aggregate_order_by
  Organization: Organization_order_by
  Posts_aggregate: Post_aggregate_order_by
  Teams_aggregate: Team_aggregate_order_by
  UserPermissions_aggregate: UserPermission_aggregate_order_by
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  role: order_by
  teamsByManagerid_aggregate: Team_aggregate_order_by
  updatedAt: order_by
}

"""primary key columns input for table: User"""
input User_pk_columns_input {
  id: Int!
}

"""
select columns of table "User"
"""
enum User_select_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  organizationId

  """column name"""
  password

  """column name"""
  role

  """column name"""
  updatedAt
}

"""
input type for updating data in table "User"
"""
input User_set_input {
  createdAt: timestamp
  email: String
  firstname: String
  id: Int
  lastname: String
  organizationId: Int
  password: String
  role: Role
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type User_stddev_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev() on columns of table "User"
"""
input User_stddev_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type User_stddev_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "User"
"""
input User_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type User_stddev_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "User"
"""
input User_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""
Streaming cursor of the table "User"
"""
input User_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: User_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input User_stream_cursor_value_input {
  createdAt: timestamp
  email: String
  firstname: String
  id: Int
  lastname: String
  organizationId: Int
  password: String
  role: Role
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type User_sum_fields {
  id: Int
  organizationId: Int
}

"""
order by sum() on columns of table "User"
"""
input User_sum_order_by {
  id: order_by
  organizationId: order_by
}

"""
update columns of table "User"
"""
enum User_update_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  organizationId

  """column name"""
  password

  """column name"""
  role

  """column name"""
  updatedAt
}

input User_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: User_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: User_set_input
  where: User_bool_exp!
}

"""aggregate var_pop on columns"""
type User_var_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by var_pop() on columns of table "User"
"""
input User_var_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type User_var_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by var_samp() on columns of table "User"
"""
input User_var_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate variance on columns"""
type User_variance_fields {
  id: Float
  organizationId: Float
}

"""
order by variance() on columns of table "User"
"""
input User_variance_order_by {
  id: order_by
  organizationId: order_by
}

type Userbe {
  """Identifies the date and time when the object was created."""
  createdAt: DateTimebe!
  email: String!
  firstname: String
  id: ID!
  lastname: String
  permissions: [Permissionbe!]
  role: Rolebe!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTimebe!
}

"""
columns and relationships of "Workflow"
"""
type Workflow {
  """An array relationship"""
  Activities(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): [Activity!]!

  """An aggregate relationship"""
  Activities_aggregate(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): Activity_aggregate!

  """An object relationship"""
  Organization: Organization!

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: Int!
  name: String!
  organizationId: Int!
  updatedAt: timestamp!
}

"""
aggregated selection of "Workflow"
"""
type Workflow_aggregate {
  aggregate: Workflow_aggregate_fields
  nodes: [Workflow!]!
}

input Workflow_aggregate_bool_exp {
  count: Workflow_aggregate_bool_exp_count
}

input Workflow_aggregate_bool_exp_count {
  arguments: [Workflow_select_column!]
  distinct: Boolean
  filter: Workflow_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "Workflow"
"""
type Workflow_aggregate_fields {
  avg: Workflow_avg_fields
  count(columns: [Workflow_select_column!], distinct: Boolean): Int!
  max: Workflow_max_fields
  min: Workflow_min_fields
  stddev: Workflow_stddev_fields
  stddev_pop: Workflow_stddev_pop_fields
  stddev_samp: Workflow_stddev_samp_fields
  sum: Workflow_sum_fields
  var_pop: Workflow_var_pop_fields
  var_samp: Workflow_var_samp_fields
  variance: Workflow_variance_fields
}

"""
order by aggregate values of table "Workflow"
"""
input Workflow_aggregate_order_by {
  avg: Workflow_avg_order_by
  count: order_by
  max: Workflow_max_order_by
  min: Workflow_min_order_by
  stddev: Workflow_stddev_order_by
  stddev_pop: Workflow_stddev_pop_order_by
  stddev_samp: Workflow_stddev_samp_order_by
  sum: Workflow_sum_order_by
  var_pop: Workflow_var_pop_order_by
  var_samp: Workflow_var_samp_order_by
  variance: Workflow_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input Workflow_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "Workflow"
"""
input Workflow_arr_rel_insert_input {
  data: [Workflow_insert_input!]!

  """upsert condition"""
  on_conflict: Workflow_on_conflict
}

"""aggregate avg on columns"""
type Workflow_avg_fields {
  id: Float
  organizationId: Float
}

"""
order by avg() on columns of table "Workflow"
"""
input Workflow_avg_order_by {
  id: order_by
  organizationId: order_by
}

"""
Boolean expression to filter rows from the table "Workflow". All fields are combined with a logical 'AND'.
"""
input Workflow_bool_exp {
  Activities: Activity_bool_exp
  Activities_aggregate: Activity_aggregate_bool_exp
  Organization: Organization_bool_exp
  TaskDefinitions: TaskDefinition_bool_exp
  TaskDefinitions_aggregate: TaskDefinition_aggregate_bool_exp
  _and: [Workflow_bool_exp!]
  _not: Workflow_bool_exp
  _or: [Workflow_bool_exp!]
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  organizationId: Int_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Workflow"
"""
enum Workflow_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  Workflow_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input Workflow_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input Workflow_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input Workflow_delete_key_input {
  config: String
}

"""
input type for incrementing numeric columns in table "Workflow"
"""
input Workflow_inc_input {
  id: Int
  organizationId: Int
}

"""
input type for inserting data into table "Workflow"
"""
input Workflow_insert_input {
  Activities: Activity_arr_rel_insert_input
  Organization: Organization_obj_rel_insert_input
  TaskDefinitions: TaskDefinition_arr_rel_insert_input
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate max on columns"""
type Workflow_max_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by max() on columns of table "Workflow"
"""
input Workflow_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type Workflow_min_fields {
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""
order by min() on columns of table "Workflow"
"""
input Workflow_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "Workflow"
"""
type Workflow_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Workflow!]!
}

"""
input type for inserting object relation for remote table "Workflow"
"""
input Workflow_obj_rel_insert_input {
  data: Workflow_insert_input!

  """upsert condition"""
  on_conflict: Workflow_on_conflict
}

"""
on_conflict condition type for table "Workflow"
"""
input Workflow_on_conflict {
  constraint: Workflow_constraint!
  update_columns: [Workflow_update_column!]! = []
  where: Workflow_bool_exp
}

"""Ordering options when selecting data from "Workflow"."""
input Workflow_order_by {
  Activities_aggregate: Activity_aggregate_order_by
  Organization: Organization_order_by
  TaskDefinitions_aggregate: TaskDefinition_aggregate_order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: Workflow"""
input Workflow_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input Workflow_prepend_input {
  config: jsonb
}

"""
select columns of table "Workflow"
"""
enum Workflow_select_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "Workflow"
"""
input Workflow_set_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate stddev on columns"""
type Workflow_stddev_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev() on columns of table "Workflow"
"""
input Workflow_stddev_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_pop on columns"""
type Workflow_stddev_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_pop() on columns of table "Workflow"
"""
input Workflow_stddev_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate stddev_samp on columns"""
type Workflow_stddev_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by stddev_samp() on columns of table "Workflow"
"""
input Workflow_stddev_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""
Streaming cursor of the table "Workflow"
"""
input Workflow_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: Workflow_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input Workflow_stream_cursor_value_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: Int
  name: String
  organizationId: Int
  updatedAt: timestamp
}

"""aggregate sum on columns"""
type Workflow_sum_fields {
  id: Int
  organizationId: Int
}

"""
order by sum() on columns of table "Workflow"
"""
input Workflow_sum_order_by {
  id: order_by
  organizationId: order_by
}

"""
update columns of table "Workflow"
"""
enum Workflow_update_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

input Workflow_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: Workflow_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: Workflow_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: Workflow_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: Workflow_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: Workflow_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: Workflow_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: Workflow_set_input
  where: Workflow_bool_exp!
}

"""aggregate var_pop on columns"""
type Workflow_var_pop_fields {
  id: Float
  organizationId: Float
}

"""
order by var_pop() on columns of table "Workflow"
"""
input Workflow_var_pop_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate var_samp on columns"""
type Workflow_var_samp_fields {
  id: Float
  organizationId: Float
}

"""
order by var_samp() on columns of table "Workflow"
"""
input Workflow_var_samp_order_by {
  id: order_by
  organizationId: order_by
}

"""aggregate variance on columns"""
type Workflow_variance_fields {
  id: Float
  organizationId: Float
}

"""
order by variance() on columns of table "Workflow"
"""
input Workflow_variance_order_by {
  id: order_by
  organizationId: order_by
}

"""
columns and relationships of "_prisma_migrations"
"""
type _prisma_migrations {
  applied_steps_count: Int!
  checksum: String!
  finished_at: timestamptz
  id: String!
  logs: String
  migration_name: String!
  rolled_back_at: timestamptz
  started_at: timestamptz!
}

"""
aggregated selection of "_prisma_migrations"
"""
type _prisma_migrations_aggregate {
  aggregate: _prisma_migrations_aggregate_fields
  nodes: [_prisma_migrations!]!
}

"""
aggregate fields of "_prisma_migrations"
"""
type _prisma_migrations_aggregate_fields {
  avg: _prisma_migrations_avg_fields
  count(columns: [_prisma_migrations_select_column!], distinct: Boolean): Int!
  max: _prisma_migrations_max_fields
  min: _prisma_migrations_min_fields
  stddev: _prisma_migrations_stddev_fields
  stddev_pop: _prisma_migrations_stddev_pop_fields
  stddev_samp: _prisma_migrations_stddev_samp_fields
  sum: _prisma_migrations_sum_fields
  var_pop: _prisma_migrations_var_pop_fields
  var_samp: _prisma_migrations_var_samp_fields
  variance: _prisma_migrations_variance_fields
}

"""aggregate avg on columns"""
type _prisma_migrations_avg_fields {
  applied_steps_count: Float
}

"""
Boolean expression to filter rows from the table "_prisma_migrations". All fields are combined with a logical 'AND'.
"""
input _prisma_migrations_bool_exp {
  _and: [_prisma_migrations_bool_exp!]
  _not: _prisma_migrations_bool_exp
  _or: [_prisma_migrations_bool_exp!]
  applied_steps_count: Int_comparison_exp
  checksum: String_comparison_exp
  finished_at: timestamptz_comparison_exp
  id: String_comparison_exp
  logs: String_comparison_exp
  migration_name: String_comparison_exp
  rolled_back_at: timestamptz_comparison_exp
  started_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "_prisma_migrations"
"""
enum _prisma_migrations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  _prisma_migrations_pkey
}

"""
input type for incrementing numeric columns in table "_prisma_migrations"
"""
input _prisma_migrations_inc_input {
  applied_steps_count: Int
}

"""
input type for inserting data into table "_prisma_migrations"
"""
input _prisma_migrations_insert_input {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate max on columns"""
type _prisma_migrations_max_fields {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate min on columns"""
type _prisma_migrations_min_fields {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""
response of any mutation on the table "_prisma_migrations"
"""
type _prisma_migrations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [_prisma_migrations!]!
}

"""
on_conflict condition type for table "_prisma_migrations"
"""
input _prisma_migrations_on_conflict {
  constraint: _prisma_migrations_constraint!
  update_columns: [_prisma_migrations_update_column!]! = []
  where: _prisma_migrations_bool_exp
}

"""Ordering options when selecting data from "_prisma_migrations"."""
input _prisma_migrations_order_by {
  applied_steps_count: order_by
  checksum: order_by
  finished_at: order_by
  id: order_by
  logs: order_by
  migration_name: order_by
  rolled_back_at: order_by
  started_at: order_by
}

"""primary key columns input for table: _prisma_migrations"""
input _prisma_migrations_pk_columns_input {
  id: String!
}

"""
select columns of table "_prisma_migrations"
"""
enum _prisma_migrations_select_column {
  """column name"""
  applied_steps_count

  """column name"""
  checksum

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  logs

  """column name"""
  migration_name

  """column name"""
  rolled_back_at

  """column name"""
  started_at
}

"""
input type for updating data in table "_prisma_migrations"
"""
input _prisma_migrations_set_input {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate stddev on columns"""
type _prisma_migrations_stddev_fields {
  applied_steps_count: Float
}

"""aggregate stddev_pop on columns"""
type _prisma_migrations_stddev_pop_fields {
  applied_steps_count: Float
}

"""aggregate stddev_samp on columns"""
type _prisma_migrations_stddev_samp_fields {
  applied_steps_count: Float
}

"""
Streaming cursor of the table "_prisma_migrations"
"""
input _prisma_migrations_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: _prisma_migrations_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input _prisma_migrations_stream_cursor_value_input {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate sum on columns"""
type _prisma_migrations_sum_fields {
  applied_steps_count: Int
}

"""
update columns of table "_prisma_migrations"
"""
enum _prisma_migrations_update_column {
  """column name"""
  applied_steps_count

  """column name"""
  checksum

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  logs

  """column name"""
  migration_name

  """column name"""
  rolled_back_at

  """column name"""
  started_at
}

input _prisma_migrations_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: _prisma_migrations_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: _prisma_migrations_set_input
  where: _prisma_migrations_bool_exp!
}

"""aggregate var_pop on columns"""
type _prisma_migrations_var_pop_fields {
  applied_steps_count: Float
}

"""aggregate var_samp on columns"""
type _prisma_migrations_var_samp_fields {
  applied_steps_count: Float
}

"""aggregate variance on columns"""
type _prisma_migrations_variance_fields {
  applied_steps_count: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  changePassword(data: ChangePasswordInputbe!): Userbe!

  """
  delete data from the table: "Action"
  """
  delete_Action(
    """filter the rows which have to be deleted"""
    where: Action_bool_exp!
  ): Action_mutation_response

  """
  delete single row from the table: "Action"
  """
  delete_Action_by_pk(id: Int!): Action

  """
  delete data from the table: "Activity"
  """
  delete_Activity(
    """filter the rows which have to be deleted"""
    where: Activity_bool_exp!
  ): Activity_mutation_response

  """
  delete single row from the table: "Activity"
  """
  delete_Activity_by_pk(id: Int!): Activity

  """
  delete data from the table: "Comment"
  """
  delete_Comment(
    """filter the rows which have to be deleted"""
    where: Comment_bool_exp!
  ): Comment_mutation_response

  """
  delete single row from the table: "Comment"
  """
  delete_Comment_by_pk(id: Int!): Comment

  """
  delete data from the table: "EventLog"
  """
  delete_EventLog(
    """filter the rows which have to be deleted"""
    where: EventLog_bool_exp!
  ): EventLog_mutation_response

  """
  delete single row from the table: "EventLog"
  """
  delete_EventLog_by_pk(id: Int!): EventLog

  """
  delete data from the table: "File"
  """
  delete_File(
    """filter the rows which have to be deleted"""
    where: File_bool_exp!
  ): File_mutation_response

  """
  delete single row from the table: "File"
  """
  delete_File_by_pk(id: Int!): File

  """
  delete data from the table: "MemberOnTeams"
  """
  delete_MemberOnTeams(
    """filter the rows which have to be deleted"""
    where: MemberOnTeams_bool_exp!
  ): MemberOnTeams_mutation_response

  """
  delete single row from the table: "MemberOnTeams"
  """
  delete_MemberOnTeams_by_pk(teamId: String!, userId: Int!): MemberOnTeams

  """
  delete data from the table: "Organization"
  """
  delete_Organization(
    """filter the rows which have to be deleted"""
    where: Organization_bool_exp!
  ): Organization_mutation_response

  """
  delete single row from the table: "Organization"
  """
  delete_Organization_by_pk(id: Int!): Organization

  """
  delete data from the table: "Permission"
  """
  delete_Permission(
    """filter the rows which have to be deleted"""
    where: Permission_bool_exp!
  ): Permission_mutation_response

  """
  delete data from the table: "PermissionGroup"
  """
  delete_PermissionGroup(
    """filter the rows which have to be deleted"""
    where: PermissionGroup_bool_exp!
  ): PermissionGroup_mutation_response

  """
  delete single row from the table: "PermissionGroup"
  """
  delete_PermissionGroup_by_pk(id: Int!): PermissionGroup

  """
  delete single row from the table: "Permission"
  """
  delete_Permission_by_pk(id: Int!): Permission

  """
  delete data from the table: "Post"
  """
  delete_Post(
    """filter the rows which have to be deleted"""
    where: Post_bool_exp!
  ): Post_mutation_response

  """
  delete single row from the table: "Post"
  """
  delete_Post_by_pk(id: Int!): Post

  """
  delete data from the table: "Settings"
  """
  delete_Settings(
    """filter the rows which have to be deleted"""
    where: Settings_bool_exp!
  ): Settings_mutation_response

  """
  delete single row from the table: "Settings"
  """
  delete_Settings_by_pk(id: Int!): Settings

  """
  delete data from the table: "Task"
  """
  delete_Task(
    """filter the rows which have to be deleted"""
    where: Task_bool_exp!
  ): Task_mutation_response

  """
  delete data from the table: "TaskDefinition"
  """
  delete_TaskDefinition(
    """filter the rows which have to be deleted"""
    where: TaskDefinition_bool_exp!
  ): TaskDefinition_mutation_response

  """
  delete single row from the table: "TaskDefinition"
  """
  delete_TaskDefinition_by_pk(id: Int!): TaskDefinition

  """
  delete single row from the table: "Task"
  """
  delete_Task_by_pk(id: String!): Task

  """
  delete data from the table: "Team"
  """
  delete_Team(
    """filter the rows which have to be deleted"""
    where: Team_bool_exp!
  ): Team_mutation_response

  """
  delete single row from the table: "Team"
  """
  delete_Team_by_pk(id: String!): Team

  """
  delete data from the table: "Trigger"
  """
  delete_Trigger(
    """filter the rows which have to be deleted"""
    where: Trigger_bool_exp!
  ): Trigger_mutation_response

  """
  delete single row from the table: "Trigger"
  """
  delete_Trigger_by_pk(id: Int!): Trigger

  """
  delete data from the table: "User"
  """
  delete_User(
    """filter the rows which have to be deleted"""
    where: User_bool_exp!
  ): User_mutation_response

  """
  delete data from the table: "UserPermission"
  """
  delete_UserPermission(
    """filter the rows which have to be deleted"""
    where: UserPermission_bool_exp!
  ): UserPermission_mutation_response

  """
  delete single row from the table: "UserPermission"
  """
  delete_UserPermission_by_pk(id: String!): UserPermission

  """
  delete single row from the table: "User"
  """
  delete_User_by_pk(id: Int!): User

  """
  delete data from the table: "Workflow"
  """
  delete_Workflow(
    """filter the rows which have to be deleted"""
    where: Workflow_bool_exp!
  ): Workflow_mutation_response

  """
  delete single row from the table: "Workflow"
  """
  delete_Workflow_by_pk(id: Int!): Workflow

  """
  delete data from the table: "_prisma_migrations"
  """
  delete__prisma_migrations(
    """filter the rows which have to be deleted"""
    where: _prisma_migrations_bool_exp!
  ): _prisma_migrations_mutation_response

  """
  delete single row from the table: "_prisma_migrations"
  """
  delete__prisma_migrations_by_pk(id: String!): _prisma_migrations

  """
  insert data into the table: "Action"
  """
  insert_Action(
    """the rows to be inserted"""
    objects: [Action_insert_input!]!

    """upsert condition"""
    on_conflict: Action_on_conflict
  ): Action_mutation_response

  """
  insert a single row into the table: "Action"
  """
  insert_Action_one(
    """the row to be inserted"""
    object: Action_insert_input!

    """upsert condition"""
    on_conflict: Action_on_conflict
  ): Action

  """
  insert data into the table: "Activity"
  """
  insert_Activity(
    """the rows to be inserted"""
    objects: [Activity_insert_input!]!

    """upsert condition"""
    on_conflict: Activity_on_conflict
  ): Activity_mutation_response

  """
  insert a single row into the table: "Activity"
  """
  insert_Activity_one(
    """the row to be inserted"""
    object: Activity_insert_input!

    """upsert condition"""
    on_conflict: Activity_on_conflict
  ): Activity

  """
  insert data into the table: "Comment"
  """
  insert_Comment(
    """the rows to be inserted"""
    objects: [Comment_insert_input!]!

    """upsert condition"""
    on_conflict: Comment_on_conflict
  ): Comment_mutation_response

  """
  insert a single row into the table: "Comment"
  """
  insert_Comment_one(
    """the row to be inserted"""
    object: Comment_insert_input!

    """upsert condition"""
    on_conflict: Comment_on_conflict
  ): Comment

  """
  insert data into the table: "EventLog"
  """
  insert_EventLog(
    """the rows to be inserted"""
    objects: [EventLog_insert_input!]!

    """upsert condition"""
    on_conflict: EventLog_on_conflict
  ): EventLog_mutation_response

  """
  insert a single row into the table: "EventLog"
  """
  insert_EventLog_one(
    """the row to be inserted"""
    object: EventLog_insert_input!

    """upsert condition"""
    on_conflict: EventLog_on_conflict
  ): EventLog

  """
  insert data into the table: "File"
  """
  insert_File(
    """the rows to be inserted"""
    objects: [File_insert_input!]!

    """upsert condition"""
    on_conflict: File_on_conflict
  ): File_mutation_response

  """
  insert a single row into the table: "File"
  """
  insert_File_one(
    """the row to be inserted"""
    object: File_insert_input!

    """upsert condition"""
    on_conflict: File_on_conflict
  ): File

  """
  insert data into the table: "MemberOnTeams"
  """
  insert_MemberOnTeams(
    """the rows to be inserted"""
    objects: [MemberOnTeams_insert_input!]!

    """upsert condition"""
    on_conflict: MemberOnTeams_on_conflict
  ): MemberOnTeams_mutation_response

  """
  insert a single row into the table: "MemberOnTeams"
  """
  insert_MemberOnTeams_one(
    """the row to be inserted"""
    object: MemberOnTeams_insert_input!

    """upsert condition"""
    on_conflict: MemberOnTeams_on_conflict
  ): MemberOnTeams

  """
  insert data into the table: "Organization"
  """
  insert_Organization(
    """the rows to be inserted"""
    objects: [Organization_insert_input!]!

    """upsert condition"""
    on_conflict: Organization_on_conflict
  ): Organization_mutation_response

  """
  insert a single row into the table: "Organization"
  """
  insert_Organization_one(
    """the row to be inserted"""
    object: Organization_insert_input!

    """upsert condition"""
    on_conflict: Organization_on_conflict
  ): Organization

  """
  insert data into the table: "Permission"
  """
  insert_Permission(
    """the rows to be inserted"""
    objects: [Permission_insert_input!]!

    """upsert condition"""
    on_conflict: Permission_on_conflict
  ): Permission_mutation_response

  """
  insert data into the table: "PermissionGroup"
  """
  insert_PermissionGroup(
    """the rows to be inserted"""
    objects: [PermissionGroup_insert_input!]!

    """upsert condition"""
    on_conflict: PermissionGroup_on_conflict
  ): PermissionGroup_mutation_response

  """
  insert a single row into the table: "PermissionGroup"
  """
  insert_PermissionGroup_one(
    """the row to be inserted"""
    object: PermissionGroup_insert_input!

    """upsert condition"""
    on_conflict: PermissionGroup_on_conflict
  ): PermissionGroup

  """
  insert a single row into the table: "Permission"
  """
  insert_Permission_one(
    """the row to be inserted"""
    object: Permission_insert_input!

    """upsert condition"""
    on_conflict: Permission_on_conflict
  ): Permission

  """
  insert data into the table: "Post"
  """
  insert_Post(
    """the rows to be inserted"""
    objects: [Post_insert_input!]!

    """upsert condition"""
    on_conflict: Post_on_conflict
  ): Post_mutation_response

  """
  insert a single row into the table: "Post"
  """
  insert_Post_one(
    """the row to be inserted"""
    object: Post_insert_input!

    """upsert condition"""
    on_conflict: Post_on_conflict
  ): Post

  """
  insert data into the table: "Settings"
  """
  insert_Settings(
    """the rows to be inserted"""
    objects: [Settings_insert_input!]!

    """upsert condition"""
    on_conflict: Settings_on_conflict
  ): Settings_mutation_response

  """
  insert a single row into the table: "Settings"
  """
  insert_Settings_one(
    """the row to be inserted"""
    object: Settings_insert_input!

    """upsert condition"""
    on_conflict: Settings_on_conflict
  ): Settings

  """
  insert data into the table: "Task"
  """
  insert_Task(
    """the rows to be inserted"""
    objects: [Task_insert_input!]!

    """upsert condition"""
    on_conflict: Task_on_conflict
  ): Task_mutation_response

  """
  insert data into the table: "TaskDefinition"
  """
  insert_TaskDefinition(
    """the rows to be inserted"""
    objects: [TaskDefinition_insert_input!]!

    """upsert condition"""
    on_conflict: TaskDefinition_on_conflict
  ): TaskDefinition_mutation_response

  """
  insert a single row into the table: "TaskDefinition"
  """
  insert_TaskDefinition_one(
    """the row to be inserted"""
    object: TaskDefinition_insert_input!

    """upsert condition"""
    on_conflict: TaskDefinition_on_conflict
  ): TaskDefinition

  """
  insert a single row into the table: "Task"
  """
  insert_Task_one(
    """the row to be inserted"""
    object: Task_insert_input!

    """upsert condition"""
    on_conflict: Task_on_conflict
  ): Task

  """
  insert data into the table: "Team"
  """
  insert_Team(
    """the rows to be inserted"""
    objects: [Team_insert_input!]!

    """upsert condition"""
    on_conflict: Team_on_conflict
  ): Team_mutation_response

  """
  insert a single row into the table: "Team"
  """
  insert_Team_one(
    """the row to be inserted"""
    object: Team_insert_input!

    """upsert condition"""
    on_conflict: Team_on_conflict
  ): Team

  """
  insert data into the table: "Trigger"
  """
  insert_Trigger(
    """the rows to be inserted"""
    objects: [Trigger_insert_input!]!

    """upsert condition"""
    on_conflict: Trigger_on_conflict
  ): Trigger_mutation_response

  """
  insert a single row into the table: "Trigger"
  """
  insert_Trigger_one(
    """the row to be inserted"""
    object: Trigger_insert_input!

    """upsert condition"""
    on_conflict: Trigger_on_conflict
  ): Trigger

  """
  insert data into the table: "User"
  """
  insert_User(
    """the rows to be inserted"""
    objects: [User_insert_input!]!

    """upsert condition"""
    on_conflict: User_on_conflict
  ): User_mutation_response

  """
  insert data into the table: "UserPermission"
  """
  insert_UserPermission(
    """the rows to be inserted"""
    objects: [UserPermission_insert_input!]!

    """upsert condition"""
    on_conflict: UserPermission_on_conflict
  ): UserPermission_mutation_response

  """
  insert a single row into the table: "UserPermission"
  """
  insert_UserPermission_one(
    """the row to be inserted"""
    object: UserPermission_insert_input!

    """upsert condition"""
    on_conflict: UserPermission_on_conflict
  ): UserPermission

  """
  insert a single row into the table: "User"
  """
  insert_User_one(
    """the row to be inserted"""
    object: User_insert_input!

    """upsert condition"""
    on_conflict: User_on_conflict
  ): User

  """
  insert data into the table: "Workflow"
  """
  insert_Workflow(
    """the rows to be inserted"""
    objects: [Workflow_insert_input!]!

    """upsert condition"""
    on_conflict: Workflow_on_conflict
  ): Workflow_mutation_response

  """
  insert a single row into the table: "Workflow"
  """
  insert_Workflow_one(
    """the row to be inserted"""
    object: Workflow_insert_input!

    """upsert condition"""
    on_conflict: Workflow_on_conflict
  ): Workflow

  """
  insert data into the table: "_prisma_migrations"
  """
  insert__prisma_migrations(
    """the rows to be inserted"""
    objects: [_prisma_migrations_insert_input!]!

    """upsert condition"""
    on_conflict: _prisma_migrations_on_conflict
  ): _prisma_migrations_mutation_response

  """
  insert a single row into the table: "_prisma_migrations"
  """
  insert__prisma_migrations_one(
    """the row to be inserted"""
    object: _prisma_migrations_insert_input!

    """upsert condition"""
    on_conflict: _prisma_migrations_on_conflict
  ): _prisma_migrations
  login(data: LoginInputbe!): Authbe!
  refreshToken(token: JWTbe!): Tokenbe!
  signup(data: SignupInputbe!): Authbe!
  updateUser(data: UpdateUserInputbe!): Userbe!

  """
  update data of the table: "Action"
  """
  update_Action(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Action_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Action_set_input

    """filter the rows which have to be updated"""
    where: Action_bool_exp!
  ): Action_mutation_response

  """
  update single row of the table: "Action"
  """
  update_Action_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Action_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Action_set_input
    pk_columns: Action_pk_columns_input!
  ): Action

  """
  update multiples rows of table: "Action"
  """
  update_Action_many(
    """updates to execute, in order"""
    updates: [Action_updates!]!
  ): [Action_mutation_response]

  """
  update data of the table: "Activity"
  """
  update_Activity(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Activity_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Activity_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Activity_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Activity_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Activity_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Activity_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Activity_set_input

    """filter the rows which have to be updated"""
    where: Activity_bool_exp!
  ): Activity_mutation_response

  """
  update single row of the table: "Activity"
  """
  update_Activity_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Activity_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Activity_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Activity_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Activity_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Activity_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Activity_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Activity_set_input
    pk_columns: Activity_pk_columns_input!
  ): Activity

  """
  update multiples rows of table: "Activity"
  """
  update_Activity_many(
    """updates to execute, in order"""
    updates: [Activity_updates!]!
  ): [Activity_mutation_response]

  """
  update data of the table: "Comment"
  """
  update_Comment(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Comment_set_input

    """filter the rows which have to be updated"""
    where: Comment_bool_exp!
  ): Comment_mutation_response

  """
  update single row of the table: "Comment"
  """
  update_Comment_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Comment_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Comment_set_input
    pk_columns: Comment_pk_columns_input!
  ): Comment

  """
  update multiples rows of table: "Comment"
  """
  update_Comment_many(
    """updates to execute, in order"""
    updates: [Comment_updates!]!
  ): [Comment_mutation_response]

  """
  update data of the table: "EventLog"
  """
  update_EventLog(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventLog_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: EventLog_set_input

    """filter the rows which have to be updated"""
    where: EventLog_bool_exp!
  ): EventLog_mutation_response

  """
  update single row of the table: "EventLog"
  """
  update_EventLog_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: EventLog_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: EventLog_set_input
    pk_columns: EventLog_pk_columns_input!
  ): EventLog

  """
  update multiples rows of table: "EventLog"
  """
  update_EventLog_many(
    """updates to execute, in order"""
    updates: [EventLog_updates!]!
  ): [EventLog_mutation_response]

  """
  update data of the table: "File"
  """
  update_File(
    """increments the numeric columns with given value of the filtered values"""
    _inc: File_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: File_set_input

    """filter the rows which have to be updated"""
    where: File_bool_exp!
  ): File_mutation_response

  """
  update single row of the table: "File"
  """
  update_File_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: File_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: File_set_input
    pk_columns: File_pk_columns_input!
  ): File

  """
  update multiples rows of table: "File"
  """
  update_File_many(
    """updates to execute, in order"""
    updates: [File_updates!]!
  ): [File_mutation_response]

  """
  update data of the table: "MemberOnTeams"
  """
  update_MemberOnTeams(
    """increments the numeric columns with given value of the filtered values"""
    _inc: MemberOnTeams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: MemberOnTeams_set_input

    """filter the rows which have to be updated"""
    where: MemberOnTeams_bool_exp!
  ): MemberOnTeams_mutation_response

  """
  update single row of the table: "MemberOnTeams"
  """
  update_MemberOnTeams_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: MemberOnTeams_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: MemberOnTeams_set_input
    pk_columns: MemberOnTeams_pk_columns_input!
  ): MemberOnTeams

  """
  update multiples rows of table: "MemberOnTeams"
  """
  update_MemberOnTeams_many(
    """updates to execute, in order"""
    updates: [MemberOnTeams_updates!]!
  ): [MemberOnTeams_mutation_response]

  """
  update data of the table: "Organization"
  """
  update_Organization(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Organization_set_input

    """filter the rows which have to be updated"""
    where: Organization_bool_exp!
  ): Organization_mutation_response

  """
  update single row of the table: "Organization"
  """
  update_Organization_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Organization_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Organization_set_input
    pk_columns: Organization_pk_columns_input!
  ): Organization

  """
  update multiples rows of table: "Organization"
  """
  update_Organization_many(
    """updates to execute, in order"""
    updates: [Organization_updates!]!
  ): [Organization_mutation_response]

  """
  update data of the table: "Permission"
  """
  update_Permission(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Permission_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Permission_set_input

    """filter the rows which have to be updated"""
    where: Permission_bool_exp!
  ): Permission_mutation_response

  """
  update data of the table: "PermissionGroup"
  """
  update_PermissionGroup(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PermissionGroup_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: PermissionGroup_set_input

    """filter the rows which have to be updated"""
    where: PermissionGroup_bool_exp!
  ): PermissionGroup_mutation_response

  """
  update single row of the table: "PermissionGroup"
  """
  update_PermissionGroup_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: PermissionGroup_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: PermissionGroup_set_input
    pk_columns: PermissionGroup_pk_columns_input!
  ): PermissionGroup

  """
  update multiples rows of table: "PermissionGroup"
  """
  update_PermissionGroup_many(
    """updates to execute, in order"""
    updates: [PermissionGroup_updates!]!
  ): [PermissionGroup_mutation_response]

  """
  update single row of the table: "Permission"
  """
  update_Permission_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Permission_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Permission_set_input
    pk_columns: Permission_pk_columns_input!
  ): Permission

  """
  update multiples rows of table: "Permission"
  """
  update_Permission_many(
    """updates to execute, in order"""
    updates: [Permission_updates!]!
  ): [Permission_mutation_response]

  """
  update data of the table: "Post"
  """
  update_Post(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Post_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Post_set_input

    """filter the rows which have to be updated"""
    where: Post_bool_exp!
  ): Post_mutation_response

  """
  update single row of the table: "Post"
  """
  update_Post_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Post_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Post_set_input
    pk_columns: Post_pk_columns_input!
  ): Post

  """
  update multiples rows of table: "Post"
  """
  update_Post_many(
    """updates to execute, in order"""
    updates: [Post_updates!]!
  ): [Post_mutation_response]

  """
  update data of the table: "Settings"
  """
  update_Settings(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Settings_set_input

    """filter the rows which have to be updated"""
    where: Settings_bool_exp!
  ): Settings_mutation_response

  """
  update single row of the table: "Settings"
  """
  update_Settings_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Settings_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Settings_set_input
    pk_columns: Settings_pk_columns_input!
  ): Settings

  """
  update multiples rows of table: "Settings"
  """
  update_Settings_many(
    """updates to execute, in order"""
    updates: [Settings_updates!]!
  ): [Settings_mutation_response]

  """
  update data of the table: "Task"
  """
  update_Task(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Task_set_input

    """filter the rows which have to be updated"""
    where: Task_bool_exp!
  ): Task_mutation_response

  """
  update data of the table: "TaskDefinition"
  """
  update_TaskDefinition(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TaskDefinition_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: TaskDefinition_set_input

    """filter the rows which have to be updated"""
    where: TaskDefinition_bool_exp!
  ): TaskDefinition_mutation_response

  """
  update single row of the table: "TaskDefinition"
  """
  update_TaskDefinition_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: TaskDefinition_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: TaskDefinition_set_input
    pk_columns: TaskDefinition_pk_columns_input!
  ): TaskDefinition

  """
  update multiples rows of table: "TaskDefinition"
  """
  update_TaskDefinition_many(
    """updates to execute, in order"""
    updates: [TaskDefinition_updates!]!
  ): [TaskDefinition_mutation_response]

  """
  update single row of the table: "Task"
  """
  update_Task_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Task_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Task_set_input
    pk_columns: Task_pk_columns_input!
  ): Task

  """
  update multiples rows of table: "Task"
  """
  update_Task_many(
    """updates to execute, in order"""
    updates: [Task_updates!]!
  ): [Task_mutation_response]

  """
  update data of the table: "Team"
  """
  update_Team(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Team_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Team_set_input

    """filter the rows which have to be updated"""
    where: Team_bool_exp!
  ): Team_mutation_response

  """
  update single row of the table: "Team"
  """
  update_Team_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Team_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Team_set_input
    pk_columns: Team_pk_columns_input!
  ): Team

  """
  update multiples rows of table: "Team"
  """
  update_Team_many(
    """updates to execute, in order"""
    updates: [Team_updates!]!
  ): [Team_mutation_response]

  """
  update data of the table: "Trigger"
  """
  update_Trigger(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Trigger_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Trigger_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Trigger_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Trigger_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Trigger_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Trigger_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Trigger_set_input

    """filter the rows which have to be updated"""
    where: Trigger_bool_exp!
  ): Trigger_mutation_response

  """
  update single row of the table: "Trigger"
  """
  update_Trigger_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Trigger_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Trigger_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Trigger_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Trigger_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Trigger_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Trigger_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Trigger_set_input
    pk_columns: Trigger_pk_columns_input!
  ): Trigger

  """
  update multiples rows of table: "Trigger"
  """
  update_Trigger_many(
    """updates to execute, in order"""
    updates: [Trigger_updates!]!
  ): [Trigger_mutation_response]

  """
  update data of the table: "User"
  """
  update_User(
    """increments the numeric columns with given value of the filtered values"""
    _inc: User_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: User_set_input

    """filter the rows which have to be updated"""
    where: User_bool_exp!
  ): User_mutation_response

  """
  update data of the table: "UserPermission"
  """
  update_UserPermission(
    """increments the numeric columns with given value of the filtered values"""
    _inc: UserPermission_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: UserPermission_set_input

    """filter the rows which have to be updated"""
    where: UserPermission_bool_exp!
  ): UserPermission_mutation_response

  """
  update single row of the table: "UserPermission"
  """
  update_UserPermission_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: UserPermission_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: UserPermission_set_input
    pk_columns: UserPermission_pk_columns_input!
  ): UserPermission

  """
  update multiples rows of table: "UserPermission"
  """
  update_UserPermission_many(
    """updates to execute, in order"""
    updates: [UserPermission_updates!]!
  ): [UserPermission_mutation_response]

  """
  update single row of the table: "User"
  """
  update_User_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: User_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: User_set_input
    pk_columns: User_pk_columns_input!
  ): User

  """
  update multiples rows of table: "User"
  """
  update_User_many(
    """updates to execute, in order"""
    updates: [User_updates!]!
  ): [User_mutation_response]

  """
  update data of the table: "Workflow"
  """
  update_Workflow(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Workflow_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Workflow_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Workflow_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Workflow_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Workflow_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Workflow_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Workflow_set_input

    """filter the rows which have to be updated"""
    where: Workflow_bool_exp!
  ): Workflow_mutation_response

  """
  update single row of the table: "Workflow"
  """
  update_Workflow_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: Workflow_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: Workflow_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: Workflow_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: Workflow_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: Workflow_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: Workflow_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: Workflow_set_input
    pk_columns: Workflow_pk_columns_input!
  ): Workflow

  """
  update multiples rows of table: "Workflow"
  """
  update_Workflow_many(
    """updates to execute, in order"""
    updates: [Workflow_updates!]!
  ): [Workflow_mutation_response]

  """
  update data of the table: "_prisma_migrations"
  """
  update__prisma_migrations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: _prisma_migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: _prisma_migrations_set_input

    """filter the rows which have to be updated"""
    where: _prisma_migrations_bool_exp!
  ): _prisma_migrations_mutation_response

  """
  update single row of the table: "_prisma_migrations"
  """
  update__prisma_migrations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: _prisma_migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: _prisma_migrations_set_input
    pk_columns: _prisma_migrations_pk_columns_input!
  ): _prisma_migrations

  """
  update multiples rows of table: "_prisma_migrations"
  """
  update__prisma_migrations_many(
    """updates to execute, in order"""
    updates: [_prisma_migrations_updates!]!
  ): [_prisma_migrations_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "Action"
  """
  Action(
    """distinct select on columns"""
    distinct_on: [Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Action_order_by!]

    """filter the rows returned"""
    where: Action_bool_exp
  ): [Action!]!

  """
  fetch aggregated fields from the table: "Action"
  """
  Action_aggregate(
    """distinct select on columns"""
    distinct_on: [Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Action_order_by!]

    """filter the rows returned"""
    where: Action_bool_exp
  ): Action_aggregate!

  """fetch data from the table: "Action" using primary key columns"""
  Action_by_pk(id: Int!): Action

  """
  fetch data from the table: "Activity"
  """
  Activity(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): [Activity!]!

  """
  fetch aggregated fields from the table: "Activity"
  """
  Activity_aggregate(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): Activity_aggregate!

  """fetch data from the table: "Activity" using primary key columns"""
  Activity_by_pk(id: Int!): Activity

  """
  fetch data from the table: "Comment"
  """
  Comment(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): [Comment!]!

  """
  fetch aggregated fields from the table: "Comment"
  """
  Comment_aggregate(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): Comment_aggregate!

  """fetch data from the table: "Comment" using primary key columns"""
  Comment_by_pk(id: Int!): Comment

  """
  fetch data from the table: "EventLog"
  """
  EventLog(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """
  fetch aggregated fields from the table: "EventLog"
  """
  EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """fetch data from the table: "EventLog" using primary key columns"""
  EventLog_by_pk(id: Int!): EventLog

  """
  fetch data from the table: "File"
  """
  File(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): [File!]!

  """
  fetch aggregated fields from the table: "File"
  """
  File_aggregate(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): File_aggregate!

  """fetch data from the table: "File" using primary key columns"""
  File_by_pk(id: Int!): File

  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): [MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): MemberOnTeams_aggregate!

  """fetch data from the table: "MemberOnTeams" using primary key columns"""
  MemberOnTeams_by_pk(teamId: String!, userId: Int!): MemberOnTeams

  """
  fetch data from the table: "Organization"
  """
  Organization(
    """distinct select on columns"""
    distinct_on: [Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Organization_order_by!]

    """filter the rows returned"""
    where: Organization_bool_exp
  ): [Organization!]!

  """
  fetch aggregated fields from the table: "Organization"
  """
  Organization_aggregate(
    """distinct select on columns"""
    distinct_on: [Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Organization_order_by!]

    """filter the rows returned"""
    where: Organization_bool_exp
  ): Organization_aggregate!

  """fetch data from the table: "Organization" using primary key columns"""
  Organization_by_pk(id: Int!): Organization

  """
  fetch data from the table: "Permission"
  """
  Permission(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): [Permission!]!

  """
  fetch data from the table: "PermissionGroup"
  """
  PermissionGroup(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): [PermissionGroup!]!

  """
  fetch aggregated fields from the table: "PermissionGroup"
  """
  PermissionGroup_aggregate(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): PermissionGroup_aggregate!

  """fetch data from the table: "PermissionGroup" using primary key columns"""
  PermissionGroup_by_pk(id: Int!): PermissionGroup

  """
  fetch aggregated fields from the table: "Permission"
  """
  Permission_aggregate(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): Permission_aggregate!

  """fetch data from the table: "Permission" using primary key columns"""
  Permission_by_pk(id: Int!): Permission

  """
  fetch data from the table: "Post"
  """
  Post(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): [Post!]!

  """
  fetch aggregated fields from the table: "Post"
  """
  Post_aggregate(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): Post_aggregate!

  """fetch data from the table: "Post" using primary key columns"""
  Post_by_pk(id: Int!): Post

  """An array relationship"""
  Settings(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): [Settings!]!

  """An aggregate relationship"""
  Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): Settings_aggregate!

  """fetch data from the table: "Settings" using primary key columns"""
  Settings_by_pk(id: Int!): Settings

  """
  fetch data from the table: "Task"
  """
  Task(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """
  fetch data from the table: "TaskDefinition"
  """
  TaskDefinition(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """
  fetch aggregated fields from the table: "TaskDefinition"
  """
  TaskDefinition_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!

  """fetch data from the table: "TaskDefinition" using primary key columns"""
  TaskDefinition_by_pk(id: Int!): TaskDefinition

  """
  fetch aggregated fields from the table: "Task"
  """
  Task_aggregate(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): Task_aggregate!

  """fetch data from the table: "Task" using primary key columns"""
  Task_by_pk(id: String!): Task

  """
  fetch data from the table: "Team"
  """
  Team(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """
  fetch aggregated fields from the table: "Team"
  """
  Team_aggregate(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): Team_aggregate!

  """fetch data from the table: "Team" using primary key columns"""
  Team_by_pk(id: String!): Team

  """
  fetch data from the table: "Trigger"
  """
  Trigger(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): [Trigger!]!

  """
  fetch aggregated fields from the table: "Trigger"
  """
  Trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): Trigger_aggregate!

  """fetch data from the table: "Trigger" using primary key columns"""
  Trigger_by_pk(id: Int!): Trigger

  """
  fetch data from the table: "User"
  """
  User(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): [User!]!

  """
  fetch data from the table: "UserPermission"
  """
  UserPermission(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): [UserPermission!]!

  """
  fetch aggregated fields from the table: "UserPermission"
  """
  UserPermission_aggregate(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): UserPermission_aggregate!

  """fetch data from the table: "UserPermission" using primary key columns"""
  UserPermission_by_pk(id: String!): UserPermission

  """
  fetch aggregated fields from the table: "User"
  """
  User_aggregate(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): User_aggregate!

  """fetch data from the table: "User" using primary key columns"""
  User_by_pk(id: Int!): User

  """
  fetch data from the table: "Workflow"
  """
  Workflow(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): [Workflow!]!

  """
  fetch aggregated fields from the table: "Workflow"
  """
  Workflow_aggregate(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): Workflow_aggregate!

  """fetch data from the table: "Workflow" using primary key columns"""
  Workflow_by_pk(id: Int!): Workflow

  """
  fetch data from the table: "_prisma_migrations"
  """
  _prisma_migrations(
    """distinct select on columns"""
    distinct_on: [_prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_prisma_migrations_order_by!]

    """filter the rows returned"""
    where: _prisma_migrations_bool_exp
  ): [_prisma_migrations!]!

  """
  fetch aggregated fields from the table: "_prisma_migrations"
  """
  _prisma_migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [_prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_prisma_migrations_order_by!]

    """filter the rows returned"""
    where: _prisma_migrations_bool_exp
  ): _prisma_migrations_aggregate!

  """
  fetch data from the table: "_prisma_migrations" using primary key columns
  """
  _prisma_migrations_by_pk(id: String!): _prisma_migrations
  hello(name: String!): String!
  helloWorld: String!
  me: Userbe!
}

type subscription_root {
  """
  fetch data from the table: "Action"
  """
  Action(
    """distinct select on columns"""
    distinct_on: [Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Action_order_by!]

    """filter the rows returned"""
    where: Action_bool_exp
  ): [Action!]!

  """
  fetch aggregated fields from the table: "Action"
  """
  Action_aggregate(
    """distinct select on columns"""
    distinct_on: [Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Action_order_by!]

    """filter the rows returned"""
    where: Action_bool_exp
  ): Action_aggregate!

  """fetch data from the table: "Action" using primary key columns"""
  Action_by_pk(id: Int!): Action

  """
  fetch data from the table in a streaming manner: "Action"
  """
  Action_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Action_stream_cursor_input]!

    """filter the rows returned"""
    where: Action_bool_exp
  ): [Action!]!

  """
  fetch data from the table: "Activity"
  """
  Activity(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): [Activity!]!

  """
  fetch aggregated fields from the table: "Activity"
  """
  Activity_aggregate(
    """distinct select on columns"""
    distinct_on: [Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Activity_order_by!]

    """filter the rows returned"""
    where: Activity_bool_exp
  ): Activity_aggregate!

  """fetch data from the table: "Activity" using primary key columns"""
  Activity_by_pk(id: Int!): Activity

  """
  fetch data from the table in a streaming manner: "Activity"
  """
  Activity_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Activity_stream_cursor_input]!

    """filter the rows returned"""
    where: Activity_bool_exp
  ): [Activity!]!

  """
  fetch data from the table: "Comment"
  """
  Comment(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): [Comment!]!

  """
  fetch aggregated fields from the table: "Comment"
  """
  Comment_aggregate(
    """distinct select on columns"""
    distinct_on: [Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Comment_order_by!]

    """filter the rows returned"""
    where: Comment_bool_exp
  ): Comment_aggregate!

  """fetch data from the table: "Comment" using primary key columns"""
  Comment_by_pk(id: Int!): Comment

  """
  fetch data from the table in a streaming manner: "Comment"
  """
  Comment_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Comment_stream_cursor_input]!

    """filter the rows returned"""
    where: Comment_bool_exp
  ): [Comment!]!

  """
  fetch data from the table: "EventLog"
  """
  EventLog(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """
  fetch aggregated fields from the table: "EventLog"
  """
  EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [EventLog_order_by!]

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): EventLog_aggregate!

  """fetch data from the table: "EventLog" using primary key columns"""
  EventLog_by_pk(id: Int!): EventLog

  """
  fetch data from the table in a streaming manner: "EventLog"
  """
  EventLog_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [EventLog_stream_cursor_input]!

    """filter the rows returned"""
    where: EventLog_bool_exp
  ): [EventLog!]!

  """
  fetch data from the table: "File"
  """
  File(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): [File!]!

  """
  fetch aggregated fields from the table: "File"
  """
  File_aggregate(
    """distinct select on columns"""
    distinct_on: [File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [File_order_by!]

    """filter the rows returned"""
    where: File_bool_exp
  ): File_aggregate!

  """fetch data from the table: "File" using primary key columns"""
  File_by_pk(id: Int!): File

  """
  fetch data from the table in a streaming manner: "File"
  """
  File_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [File_stream_cursor_input]!

    """filter the rows returned"""
    where: File_bool_exp
  ): [File!]!

  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): [MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): MemberOnTeams_aggregate!

  """fetch data from the table: "MemberOnTeams" using primary key columns"""
  MemberOnTeams_by_pk(teamId: String!, userId: Int!): MemberOnTeams

  """
  fetch data from the table in a streaming manner: "MemberOnTeams"
  """
  MemberOnTeams_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [MemberOnTeams_stream_cursor_input]!

    """filter the rows returned"""
    where: MemberOnTeams_bool_exp
  ): [MemberOnTeams!]!

  """
  fetch data from the table: "Organization"
  """
  Organization(
    """distinct select on columns"""
    distinct_on: [Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Organization_order_by!]

    """filter the rows returned"""
    where: Organization_bool_exp
  ): [Organization!]!

  """
  fetch aggregated fields from the table: "Organization"
  """
  Organization_aggregate(
    """distinct select on columns"""
    distinct_on: [Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Organization_order_by!]

    """filter the rows returned"""
    where: Organization_bool_exp
  ): Organization_aggregate!

  """fetch data from the table: "Organization" using primary key columns"""
  Organization_by_pk(id: Int!): Organization

  """
  fetch data from the table in a streaming manner: "Organization"
  """
  Organization_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Organization_stream_cursor_input]!

    """filter the rows returned"""
    where: Organization_bool_exp
  ): [Organization!]!

  """
  fetch data from the table: "Permission"
  """
  Permission(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): [Permission!]!

  """
  fetch data from the table: "PermissionGroup"
  """
  PermissionGroup(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): [PermissionGroup!]!

  """
  fetch aggregated fields from the table: "PermissionGroup"
  """
  PermissionGroup_aggregate(
    """distinct select on columns"""
    distinct_on: [PermissionGroup_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [PermissionGroup_order_by!]

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): PermissionGroup_aggregate!

  """fetch data from the table: "PermissionGroup" using primary key columns"""
  PermissionGroup_by_pk(id: Int!): PermissionGroup

  """
  fetch data from the table in a streaming manner: "PermissionGroup"
  """
  PermissionGroup_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [PermissionGroup_stream_cursor_input]!

    """filter the rows returned"""
    where: PermissionGroup_bool_exp
  ): [PermissionGroup!]!

  """
  fetch aggregated fields from the table: "Permission"
  """
  Permission_aggregate(
    """distinct select on columns"""
    distinct_on: [Permission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Permission_order_by!]

    """filter the rows returned"""
    where: Permission_bool_exp
  ): Permission_aggregate!

  """fetch data from the table: "Permission" using primary key columns"""
  Permission_by_pk(id: Int!): Permission

  """
  fetch data from the table in a streaming manner: "Permission"
  """
  Permission_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Permission_stream_cursor_input]!

    """filter the rows returned"""
    where: Permission_bool_exp
  ): [Permission!]!

  """
  fetch data from the table: "Post"
  """
  Post(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): [Post!]!

  """
  fetch aggregated fields from the table: "Post"
  """
  Post_aggregate(
    """distinct select on columns"""
    distinct_on: [Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Post_order_by!]

    """filter the rows returned"""
    where: Post_bool_exp
  ): Post_aggregate!

  """fetch data from the table: "Post" using primary key columns"""
  Post_by_pk(id: Int!): Post

  """
  fetch data from the table in a streaming manner: "Post"
  """
  Post_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Post_stream_cursor_input]!

    """filter the rows returned"""
    where: Post_bool_exp
  ): [Post!]!

  """An array relationship"""
  Settings(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): [Settings!]!

  """An aggregate relationship"""
  Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Settings_order_by!]

    """filter the rows returned"""
    where: Settings_bool_exp
  ): Settings_aggregate!

  """fetch data from the table: "Settings" using primary key columns"""
  Settings_by_pk(id: Int!): Settings

  """
  fetch data from the table in a streaming manner: "Settings"
  """
  Settings_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Settings_stream_cursor_input]!

    """filter the rows returned"""
    where: Settings_bool_exp
  ): [Settings!]!

  """
  fetch data from the table: "Task"
  """
  Task(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """
  fetch data from the table: "TaskDefinition"
  """
  TaskDefinition(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """
  fetch aggregated fields from the table: "TaskDefinition"
  """
  TaskDefinition_aggregate(
    """distinct select on columns"""
    distinct_on: [TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [TaskDefinition_order_by!]

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): TaskDefinition_aggregate!

  """fetch data from the table: "TaskDefinition" using primary key columns"""
  TaskDefinition_by_pk(id: Int!): TaskDefinition

  """
  fetch data from the table in a streaming manner: "TaskDefinition"
  """
  TaskDefinition_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [TaskDefinition_stream_cursor_input]!

    """filter the rows returned"""
    where: TaskDefinition_bool_exp
  ): [TaskDefinition!]!

  """
  fetch aggregated fields from the table: "Task"
  """
  Task_aggregate(
    """distinct select on columns"""
    distinct_on: [Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Task_order_by!]

    """filter the rows returned"""
    where: Task_bool_exp
  ): Task_aggregate!

  """fetch data from the table: "Task" using primary key columns"""
  Task_by_pk(id: String!): Task

  """
  fetch data from the table in a streaming manner: "Task"
  """
  Task_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Task_stream_cursor_input]!

    """filter the rows returned"""
    where: Task_bool_exp
  ): [Task!]!

  """
  fetch data from the table: "Team"
  """
  Team(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """
  fetch aggregated fields from the table: "Team"
  """
  Team_aggregate(
    """distinct select on columns"""
    distinct_on: [Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Team_order_by!]

    """filter the rows returned"""
    where: Team_bool_exp
  ): Team_aggregate!

  """fetch data from the table: "Team" using primary key columns"""
  Team_by_pk(id: String!): Team

  """
  fetch data from the table in a streaming manner: "Team"
  """
  Team_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Team_stream_cursor_input]!

    """filter the rows returned"""
    where: Team_bool_exp
  ): [Team!]!

  """
  fetch data from the table: "Trigger"
  """
  Trigger(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): [Trigger!]!

  """
  fetch aggregated fields from the table: "Trigger"
  """
  Trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Trigger_order_by!]

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): Trigger_aggregate!

  """fetch data from the table: "Trigger" using primary key columns"""
  Trigger_by_pk(id: Int!): Trigger

  """
  fetch data from the table in a streaming manner: "Trigger"
  """
  Trigger_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Trigger_stream_cursor_input]!

    """filter the rows returned"""
    where: Trigger_bool_exp
  ): [Trigger!]!

  """
  fetch data from the table: "User"
  """
  User(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): [User!]!

  """
  fetch data from the table: "UserPermission"
  """
  UserPermission(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): [UserPermission!]!

  """
  fetch aggregated fields from the table: "UserPermission"
  """
  UserPermission_aggregate(
    """distinct select on columns"""
    distinct_on: [UserPermission_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [UserPermission_order_by!]

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): UserPermission_aggregate!

  """fetch data from the table: "UserPermission" using primary key columns"""
  UserPermission_by_pk(id: String!): UserPermission

  """
  fetch data from the table in a streaming manner: "UserPermission"
  """
  UserPermission_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [UserPermission_stream_cursor_input]!

    """filter the rows returned"""
    where: UserPermission_bool_exp
  ): [UserPermission!]!

  """
  fetch aggregated fields from the table: "User"
  """
  User_aggregate(
    """distinct select on columns"""
    distinct_on: [User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [User_order_by!]

    """filter the rows returned"""
    where: User_bool_exp
  ): User_aggregate!

  """fetch data from the table: "User" using primary key columns"""
  User_by_pk(id: Int!): User

  """
  fetch data from the table in a streaming manner: "User"
  """
  User_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [User_stream_cursor_input]!

    """filter the rows returned"""
    where: User_bool_exp
  ): [User!]!

  """
  fetch data from the table: "Workflow"
  """
  Workflow(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): [Workflow!]!

  """
  fetch aggregated fields from the table: "Workflow"
  """
  Workflow_aggregate(
    """distinct select on columns"""
    distinct_on: [Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Workflow_order_by!]

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): Workflow_aggregate!

  """fetch data from the table: "Workflow" using primary key columns"""
  Workflow_by_pk(id: Int!): Workflow

  """
  fetch data from the table in a streaming manner: "Workflow"
  """
  Workflow_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [Workflow_stream_cursor_input]!

    """filter the rows returned"""
    where: Workflow_bool_exp
  ): [Workflow!]!

  """
  fetch data from the table: "_prisma_migrations"
  """
  _prisma_migrations(
    """distinct select on columns"""
    distinct_on: [_prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_prisma_migrations_order_by!]

    """filter the rows returned"""
    where: _prisma_migrations_bool_exp
  ): [_prisma_migrations!]!

  """
  fetch aggregated fields from the table: "_prisma_migrations"
  """
  _prisma_migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [_prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [_prisma_migrations_order_by!]

    """filter the rows returned"""
    where: _prisma_migrations_bool_exp
  ): _prisma_migrations_aggregate!

  """
  fetch data from the table: "_prisma_migrations" using primary key columns
  """
  _prisma_migrations_by_pk(id: String!): _prisma_migrations

  """
  fetch data from the table in a streaming manner: "_prisma_migrations"
  """
  _prisma_migrations_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [_prisma_migrations_stream_cursor_input]!

    """filter the rows returned"""
    where: _prisma_migrations_bool_exp
  ): [_prisma_migrations!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

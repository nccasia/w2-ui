schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

scalar ActionType

"""
Boolean expression to compare columns of type "ActionType". All fields are combined with logical 'AND'.
"""
input ActionType_comparison_exp {
  _eq: ActionType
  _gt: ActionType
  _gte: ActionType
  _in: [ActionType!]
  _is_null: Boolean
  _lt: ActionType
  _lte: ActionType
  _neq: ActionType
  _nin: [ActionType!]
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

scalar FileType

"""
Boolean expression to compare columns of type "FileType". All fields are combined with logical 'AND'.
"""
input FileType_comparison_exp {
  _eq: FileType
  _gt: FileType
  _gte: FileType
  _in: [FileType!]
  _is_null: Boolean
  _lt: FileType
  _lte: FileType
  _neq: FileType
  _nin: [FileType!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar Role

"""
Boolean expression to compare columns of type "Role". All fields are combined with logical 'AND'.
"""
input Role_comparison_exp {
  _eq: Role
  _gt: Role
  _gte: Role
  _in: [Role!]
  _is_null: Boolean
  _lt: Role
  _lte: Role
  _neq: Role
  _nin: [Role!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar TaskPriority

"""
Boolean expression to compare columns of type "TaskPriority". All fields are combined with logical 'AND'.
"""
input TaskPriority_comparison_exp {
  _eq: TaskPriority
  _gt: TaskPriority
  _gte: TaskPriority
  _in: [TaskPriority!]
  _is_null: Boolean
  _lt: TaskPriority
  _lte: TaskPriority
  _neq: TaskPriority
  _nin: [TaskPriority!]
}

scalar TaskStatus

"""
Boolean expression to compare columns of type "TaskStatus". All fields are combined with logical 'AND'.
"""
input TaskStatus_comparison_exp {
  _eq: TaskStatus
  _gt: TaskStatus
  _gte: TaskStatus
  _in: [TaskStatus!]
  _is_null: Boolean
  _lt: TaskStatus
  _lte: TaskStatus
  _neq: TaskStatus
  _nin: [TaskStatus!]
}

scalar TriggerType

"""
Boolean expression to compare columns of type "TriggerType". All fields are combined with logical 'AND'.
"""
input TriggerType_comparison_exp {
  _eq: TriggerType
  _gt: TriggerType
  _gte: TriggerType
  _in: [TriggerType!]
  _is_null: Boolean
  _lt: TriggerType
  _lte: TriggerType
  _neq: TriggerType
  _nin: [TriggerType!]
}

"""
columns and relationships of "blog.Action"
"""
type blog_Action {
  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!
  action: String!
  content: String!
  createdAt: timestamp!
  domain: String!
  id: String!
  intent: String!
  type: ActionType!
}

"""
aggregated selection of "blog.Action"
"""
type blog_Action_aggregate {
  aggregate: blog_Action_aggregate_fields
  nodes: [blog_Action!]!
}

"""
aggregate fields of "blog.Action"
"""
type blog_Action_aggregate_fields {
  count(columns: [blog_Action_select_column!], distinct: Boolean): Int!
  max: blog_Action_max_fields
  min: blog_Action_min_fields
}

"""
Boolean expression to filter rows from the table "blog.Action". All fields are combined with a logical 'AND'.
"""
input blog_Action_bool_exp {
  EventLogs: blog_EventLog_bool_exp
  _and: [blog_Action_bool_exp!]
  _not: blog_Action_bool_exp
  _or: [blog_Action_bool_exp!]
  action: String_comparison_exp
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  domain: String_comparison_exp
  id: String_comparison_exp
  intent: String_comparison_exp
  type: ActionType_comparison_exp
}

"""
unique or primary key constraints on table "blog.Action"
"""
enum blog_Action_constraint {
  """unique or primary key constraint"""
  Action_pkey
}

"""
input type for inserting data into table "blog.Action"
"""
input blog_Action_insert_input {
  EventLogs: blog_EventLog_arr_rel_insert_input
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: String
  intent: String
  type: ActionType
}

"""aggregate max on columns"""
type blog_Action_max_fields {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: String
  intent: String
}

"""aggregate min on columns"""
type blog_Action_min_fields {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: String
  intent: String
}

"""
response of any mutation on the table "blog.Action"
"""
type blog_Action_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Action!]!
}

"""
input type for inserting object relation for remote table "blog.Action"
"""
input blog_Action_obj_rel_insert_input {
  data: blog_Action_insert_input!

  """upsert condition"""
  on_conflict: blog_Action_on_conflict
}

"""
on_conflict condition type for table "blog.Action"
"""
input blog_Action_on_conflict {
  constraint: blog_Action_constraint!
  update_columns: [blog_Action_update_column!]! = []
  where: blog_Action_bool_exp
}

"""Ordering options when selecting data from "blog.Action"."""
input blog_Action_order_by {
  EventLogs_aggregate: blog_EventLog_aggregate_order_by
  action: order_by
  content: order_by
  createdAt: order_by
  domain: order_by
  id: order_by
  intent: order_by
  type: order_by
}

"""primary key columns input for table: blog_Action"""
input blog_Action_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Action"
"""
enum blog_Action_select_column {
  """column name"""
  action

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  domain

  """column name"""
  id

  """column name"""
  intent

  """column name"""
  type
}

"""
input type for updating data in table "blog.Action"
"""
input blog_Action_set_input {
  action: String
  content: String
  createdAt: timestamp
  domain: String
  id: String
  intent: String
  type: ActionType
}

"""
update columns of table "blog.Action"
"""
enum blog_Action_update_column {
  """column name"""
  action

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  domain

  """column name"""
  id

  """column name"""
  intent

  """column name"""
  type
}

"""
columns and relationships of "blog.Activity"
"""
type blog_Activity {
  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!

  """An array relationship"""
  Triggers(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): [blog_Trigger!]!

  """An aggregate relationship"""
  Triggers_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): blog_Trigger_aggregate!

  """An object relationship"""
  Workflow: blog_Workflow!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: String!
  name: String!
  updatedAt: timestamp!
  workflowId: String!
}

"""
aggregated selection of "blog.Activity"
"""
type blog_Activity_aggregate {
  aggregate: blog_Activity_aggregate_fields
  nodes: [blog_Activity!]!
}

"""
aggregate fields of "blog.Activity"
"""
type blog_Activity_aggregate_fields {
  count(columns: [blog_Activity_select_column!], distinct: Boolean): Int!
  max: blog_Activity_max_fields
  min: blog_Activity_min_fields
}

"""
order by aggregate values of table "blog.Activity"
"""
input blog_Activity_aggregate_order_by {
  count: order_by
  max: blog_Activity_max_order_by
  min: blog_Activity_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input blog_Activity_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "blog.Activity"
"""
input blog_Activity_arr_rel_insert_input {
  data: [blog_Activity_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Activity_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Activity". All fields are combined with a logical 'AND'.
"""
input blog_Activity_bool_exp {
  TaskDefinitions: blog_TaskDefinition_bool_exp
  Triggers: blog_Trigger_bool_exp
  Workflow: blog_Workflow_bool_exp
  _and: [blog_Activity_bool_exp!]
  _not: blog_Activity_bool_exp
  _or: [blog_Activity_bool_exp!]
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  workflowId: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.Activity"
"""
enum blog_Activity_constraint {
  """unique or primary key constraint"""
  Activity_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input blog_Activity_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input blog_Activity_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input blog_Activity_delete_key_input {
  config: String
}

"""
input type for inserting data into table "blog.Activity"
"""
input blog_Activity_insert_input {
  TaskDefinitions: blog_TaskDefinition_arr_rel_insert_input
  Triggers: blog_Trigger_arr_rel_insert_input
  Workflow: blog_Workflow_obj_rel_insert_input
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
  workflowId: String
}

"""aggregate max on columns"""
type blog_Activity_max_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
  workflowId: String
}

"""
order by max() on columns of table "blog.Activity"
"""
input blog_Activity_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""aggregate min on columns"""
type blog_Activity_min_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
  workflowId: String
}

"""
order by min() on columns of table "blog.Activity"
"""
input blog_Activity_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""
response of any mutation on the table "blog.Activity"
"""
type blog_Activity_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Activity!]!
}

"""
input type for inserting object relation for remote table "blog.Activity"
"""
input blog_Activity_obj_rel_insert_input {
  data: blog_Activity_insert_input!

  """upsert condition"""
  on_conflict: blog_Activity_on_conflict
}

"""
on_conflict condition type for table "blog.Activity"
"""
input blog_Activity_on_conflict {
  constraint: blog_Activity_constraint!
  update_columns: [blog_Activity_update_column!]! = []
  where: blog_Activity_bool_exp
}

"""Ordering options when selecting data from "blog.Activity"."""
input blog_Activity_order_by {
  TaskDefinitions_aggregate: blog_TaskDefinition_aggregate_order_by
  Triggers_aggregate: blog_Trigger_aggregate_order_by
  Workflow: blog_Workflow_order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""primary key columns input for table: blog_Activity"""
input blog_Activity_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input blog_Activity_prepend_input {
  config: jsonb
}

"""
select columns of table "blog.Activity"
"""
enum blog_Activity_select_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
input type for updating data in table "blog.Activity"
"""
input blog_Activity_set_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
  workflowId: String
}

"""
update columns of table "blog.Activity"
"""
enum blog_Activity_update_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
columns and relationships of "blog.Comment"
"""
type blog_Comment {
  """An object relationship"""
  Task: blog_Task!

  """An object relationship"""
  User: blog_User!
  content: String!
  createdAt: timestamp!
  creatorId: String!
  id: String!
  taskId: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.Comment"
"""
type blog_Comment_aggregate {
  aggregate: blog_Comment_aggregate_fields
  nodes: [blog_Comment!]!
}

"""
aggregate fields of "blog.Comment"
"""
type blog_Comment_aggregate_fields {
  count(columns: [blog_Comment_select_column!], distinct: Boolean): Int!
  max: blog_Comment_max_fields
  min: blog_Comment_min_fields
}

"""
order by aggregate values of table "blog.Comment"
"""
input blog_Comment_aggregate_order_by {
  count: order_by
  max: blog_Comment_max_order_by
  min: blog_Comment_min_order_by
}

"""
input type for inserting array relation for remote table "blog.Comment"
"""
input blog_Comment_arr_rel_insert_input {
  data: [blog_Comment_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Comment_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Comment". All fields are combined with a logical 'AND'.
"""
input blog_Comment_bool_exp {
  Task: blog_Task_bool_exp
  User: blog_User_bool_exp
  _and: [blog_Comment_bool_exp!]
  _not: blog_Comment_bool_exp
  _or: [blog_Comment_bool_exp!]
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: String_comparison_exp
  id: String_comparison_exp
  taskId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Comment"
"""
enum blog_Comment_constraint {
  """unique or primary key constraint"""
  Comment_pkey
}

"""
input type for inserting data into table "blog.Comment"
"""
input blog_Comment_insert_input {
  Task: blog_Task_obj_rel_insert_input
  User: blog_User_obj_rel_insert_input
  content: String
  createdAt: timestamp
  creatorId: String
  id: String
  taskId: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Comment_max_fields {
  content: String
  createdAt: timestamp
  creatorId: String
  id: String
  taskId: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Comment"
"""
input blog_Comment_max_order_by {
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Comment_min_fields {
  content: String
  createdAt: timestamp
  creatorId: String
  id: String
  taskId: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Comment"
"""
input blog_Comment_min_order_by {
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Comment"
"""
type blog_Comment_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Comment!]!
}

"""
on_conflict condition type for table "blog.Comment"
"""
input blog_Comment_on_conflict {
  constraint: blog_Comment_constraint!
  update_columns: [blog_Comment_update_column!]! = []
  where: blog_Comment_bool_exp
}

"""Ordering options when selecting data from "blog.Comment"."""
input blog_Comment_order_by {
  Task: blog_Task_order_by
  User: blog_User_order_by
  content: order_by
  createdAt: order_by
  creatorId: order_by
  id: order_by
  taskId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Comment"""
input blog_Comment_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Comment"
"""
enum blog_Comment_select_column {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  taskId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Comment"
"""
input blog_Comment_set_input {
  content: String
  createdAt: timestamp
  creatorId: String
  id: String
  taskId: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Comment"
"""
enum blog_Comment_update_column {
  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  id

  """column name"""
  taskId

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.EventLog"
"""
type blog_EventLog {
  """An object relationship"""
  Action: blog_Action!

  """An object relationship"""
  Organization: blog_Organization!

  """An object relationship"""
  Task: blog_Task

  """An object relationship"""
  User: blog_User
  actionId: String!
  createdAt: timestamp!
  id: String!
  organizationId: String!
  taskId: String
  userId: String
}

"""
aggregated selection of "blog.EventLog"
"""
type blog_EventLog_aggregate {
  aggregate: blog_EventLog_aggregate_fields
  nodes: [blog_EventLog!]!
}

"""
aggregate fields of "blog.EventLog"
"""
type blog_EventLog_aggregate_fields {
  count(columns: [blog_EventLog_select_column!], distinct: Boolean): Int!
  max: blog_EventLog_max_fields
  min: blog_EventLog_min_fields
}

"""
order by aggregate values of table "blog.EventLog"
"""
input blog_EventLog_aggregate_order_by {
  count: order_by
  max: blog_EventLog_max_order_by
  min: blog_EventLog_min_order_by
}

"""
input type for inserting array relation for remote table "blog.EventLog"
"""
input blog_EventLog_arr_rel_insert_input {
  data: [blog_EventLog_insert_input!]!

  """upsert condition"""
  on_conflict: blog_EventLog_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.EventLog". All fields are combined with a logical 'AND'.
"""
input blog_EventLog_bool_exp {
  Action: blog_Action_bool_exp
  Organization: blog_Organization_bool_exp
  Task: blog_Task_bool_exp
  User: blog_User_bool_exp
  _and: [blog_EventLog_bool_exp!]
  _not: blog_EventLog_bool_exp
  _or: [blog_EventLog_bool_exp!]
  actionId: String_comparison_exp
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  organizationId: String_comparison_exp
  taskId: String_comparison_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.EventLog"
"""
enum blog_EventLog_constraint {
  """unique or primary key constraint"""
  EventLog_pkey
}

"""
input type for inserting data into table "blog.EventLog"
"""
input blog_EventLog_insert_input {
  Action: blog_Action_obj_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  Task: blog_Task_obj_rel_insert_input
  User: blog_User_obj_rel_insert_input
  actionId: String
  createdAt: timestamp
  id: String
  organizationId: String
  taskId: String
  userId: String
}

"""aggregate max on columns"""
type blog_EventLog_max_fields {
  actionId: String
  createdAt: timestamp
  id: String
  organizationId: String
  taskId: String
  userId: String
}

"""
order by max() on columns of table "blog.EventLog"
"""
input blog_EventLog_max_order_by {
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type blog_EventLog_min_fields {
  actionId: String
  createdAt: timestamp
  id: String
  organizationId: String
  taskId: String
  userId: String
}

"""
order by min() on columns of table "blog.EventLog"
"""
input blog_EventLog_min_order_by {
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""
response of any mutation on the table "blog.EventLog"
"""
type blog_EventLog_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_EventLog!]!
}

"""
on_conflict condition type for table "blog.EventLog"
"""
input blog_EventLog_on_conflict {
  constraint: blog_EventLog_constraint!
  update_columns: [blog_EventLog_update_column!]! = []
  where: blog_EventLog_bool_exp
}

"""Ordering options when selecting data from "blog.EventLog"."""
input blog_EventLog_order_by {
  Action: blog_Action_order_by
  Organization: blog_Organization_order_by
  Task: blog_Task_order_by
  User: blog_User_order_by
  actionId: order_by
  createdAt: order_by
  id: order_by
  organizationId: order_by
  taskId: order_by
  userId: order_by
}

"""primary key columns input for table: blog_EventLog"""
input blog_EventLog_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.EventLog"
"""
enum blog_EventLog_select_column {
  """column name"""
  actionId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  taskId

  """column name"""
  userId
}

"""
input type for updating data in table "blog.EventLog"
"""
input blog_EventLog_set_input {
  actionId: String
  createdAt: timestamp
  id: String
  organizationId: String
  taskId: String
  userId: String
}

"""
update columns of table "blog.EventLog"
"""
enum blog_EventLog_update_column {
  """column name"""
  actionId

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  taskId

  """column name"""
  userId
}

"""
columns and relationships of "blog.File"
"""
type blog_File {
  """An object relationship"""
  File: blog_File

  """An array relationship"""
  Files(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): [blog_File!]!

  """An aggregate relationship"""
  Files_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): blog_File_aggregate!

  """An object relationship"""
  Organization: blog_Organization!
  cdnUrl: String!
  createdAt: timestamp!
  data: String!
  encoding: String!
  fileType: FileType!
  filename: String!
  id: String!
  mimetype: String!
  organizationId: String!
  updatedAt: timestamp!
  varantName: String
  variantKey: String
  variantOfId: String
  variantValue: String
}

"""
aggregated selection of "blog.File"
"""
type blog_File_aggregate {
  aggregate: blog_File_aggregate_fields
  nodes: [blog_File!]!
}

"""
aggregate fields of "blog.File"
"""
type blog_File_aggregate_fields {
  count(columns: [blog_File_select_column!], distinct: Boolean): Int!
  max: blog_File_max_fields
  min: blog_File_min_fields
}

"""
order by aggregate values of table "blog.File"
"""
input blog_File_aggregate_order_by {
  count: order_by
  max: blog_File_max_order_by
  min: blog_File_min_order_by
}

"""
input type for inserting array relation for remote table "blog.File"
"""
input blog_File_arr_rel_insert_input {
  data: [blog_File_insert_input!]!

  """upsert condition"""
  on_conflict: blog_File_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.File". All fields are combined with a logical 'AND'.
"""
input blog_File_bool_exp {
  File: blog_File_bool_exp
  Files: blog_File_bool_exp
  Organization: blog_Organization_bool_exp
  _and: [blog_File_bool_exp!]
  _not: blog_File_bool_exp
  _or: [blog_File_bool_exp!]
  cdnUrl: String_comparison_exp
  createdAt: timestamp_comparison_exp
  data: String_comparison_exp
  encoding: String_comparison_exp
  fileType: FileType_comparison_exp
  filename: String_comparison_exp
  id: String_comparison_exp
  mimetype: String_comparison_exp
  organizationId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  varantName: String_comparison_exp
  variantKey: String_comparison_exp
  variantOfId: String_comparison_exp
  variantValue: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.File"
"""
enum blog_File_constraint {
  """unique or primary key constraint"""
  File_pkey
}

"""
input type for inserting data into table "blog.File"
"""
input blog_File_insert_input {
  File: blog_File_obj_rel_insert_input
  Files: blog_File_arr_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: String
  mimetype: String
  organizationId: String
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: String
  variantValue: String
}

"""aggregate max on columns"""
type blog_File_max_fields {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  filename: String
  id: String
  mimetype: String
  organizationId: String
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: String
  variantValue: String
}

"""
order by max() on columns of table "blog.File"
"""
input blog_File_max_order_by {
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""aggregate min on columns"""
type blog_File_min_fields {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  filename: String
  id: String
  mimetype: String
  organizationId: String
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: String
  variantValue: String
}

"""
order by min() on columns of table "blog.File"
"""
input blog_File_min_order_by {
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""
response of any mutation on the table "blog.File"
"""
type blog_File_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_File!]!
}

"""
input type for inserting object relation for remote table "blog.File"
"""
input blog_File_obj_rel_insert_input {
  data: blog_File_insert_input!

  """upsert condition"""
  on_conflict: blog_File_on_conflict
}

"""
on_conflict condition type for table "blog.File"
"""
input blog_File_on_conflict {
  constraint: blog_File_constraint!
  update_columns: [blog_File_update_column!]! = []
  where: blog_File_bool_exp
}

"""Ordering options when selecting data from "blog.File"."""
input blog_File_order_by {
  File: blog_File_order_by
  Files_aggregate: blog_File_aggregate_order_by
  Organization: blog_Organization_order_by
  cdnUrl: order_by
  createdAt: order_by
  data: order_by
  encoding: order_by
  fileType: order_by
  filename: order_by
  id: order_by
  mimetype: order_by
  organizationId: order_by
  updatedAt: order_by
  varantName: order_by
  variantKey: order_by
  variantOfId: order_by
  variantValue: order_by
}

"""primary key columns input for table: blog_File"""
input blog_File_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.File"
"""
enum blog_File_select_column {
  """column name"""
  cdnUrl

  """column name"""
  createdAt

  """column name"""
  data

  """column name"""
  encoding

  """column name"""
  fileType

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  mimetype

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  varantName

  """column name"""
  variantKey

  """column name"""
  variantOfId

  """column name"""
  variantValue
}

"""
input type for updating data in table "blog.File"
"""
input blog_File_set_input {
  cdnUrl: String
  createdAt: timestamp
  data: String
  encoding: String
  fileType: FileType
  filename: String
  id: String
  mimetype: String
  organizationId: String
  updatedAt: timestamp
  varantName: String
  variantKey: String
  variantOfId: String
  variantValue: String
}

"""
update columns of table "blog.File"
"""
enum blog_File_update_column {
  """column name"""
  cdnUrl

  """column name"""
  createdAt

  """column name"""
  data

  """column name"""
  encoding

  """column name"""
  fileType

  """column name"""
  filename

  """column name"""
  id

  """column name"""
  mimetype

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  varantName

  """column name"""
  variantKey

  """column name"""
  variantOfId

  """column name"""
  variantValue
}

"""
columns and relationships of "blog.MemberOnTeams"
"""
type blog_MemberOnTeams {
  """An object relationship"""
  Team: blog_Team!

  """An object relationship"""
  User: blog_User!
  assignedAt: timestamp!
  assignedBy: String!
  teamId: String!
  userId: String!
}

"""
aggregated selection of "blog.MemberOnTeams"
"""
type blog_MemberOnTeams_aggregate {
  aggregate: blog_MemberOnTeams_aggregate_fields
  nodes: [blog_MemberOnTeams!]!
}

"""
aggregate fields of "blog.MemberOnTeams"
"""
type blog_MemberOnTeams_aggregate_fields {
  count(columns: [blog_MemberOnTeams_select_column!], distinct: Boolean): Int!
  max: blog_MemberOnTeams_max_fields
  min: blog_MemberOnTeams_min_fields
}

"""
order by aggregate values of table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_aggregate_order_by {
  count: order_by
  max: blog_MemberOnTeams_max_order_by
  min: blog_MemberOnTeams_min_order_by
}

"""
input type for inserting array relation for remote table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_arr_rel_insert_input {
  data: [blog_MemberOnTeams_insert_input!]!

  """upsert condition"""
  on_conflict: blog_MemberOnTeams_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.MemberOnTeams". All fields are combined with a logical 'AND'.
"""
input blog_MemberOnTeams_bool_exp {
  Team: blog_Team_bool_exp
  User: blog_User_bool_exp
  _and: [blog_MemberOnTeams_bool_exp!]
  _not: blog_MemberOnTeams_bool_exp
  _or: [blog_MemberOnTeams_bool_exp!]
  assignedAt: timestamp_comparison_exp
  assignedBy: String_comparison_exp
  teamId: String_comparison_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.MemberOnTeams"
"""
enum blog_MemberOnTeams_constraint {
  """unique or primary key constraint"""
  MemberOnTeams_pkey
}

"""
input type for inserting data into table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_insert_input {
  Team: blog_Team_obj_rel_insert_input
  User: blog_User_obj_rel_insert_input
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: String
}

"""aggregate max on columns"""
type blog_MemberOnTeams_max_fields {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: String
}

"""
order by max() on columns of table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_max_order_by {
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""aggregate min on columns"""
type blog_MemberOnTeams_min_fields {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: String
}

"""
order by min() on columns of table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_min_order_by {
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""
response of any mutation on the table "blog.MemberOnTeams"
"""
type blog_MemberOnTeams_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_MemberOnTeams!]!
}

"""
on_conflict condition type for table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_on_conflict {
  constraint: blog_MemberOnTeams_constraint!
  update_columns: [blog_MemberOnTeams_update_column!]! = []
  where: blog_MemberOnTeams_bool_exp
}

"""Ordering options when selecting data from "blog.MemberOnTeams"."""
input blog_MemberOnTeams_order_by {
  Team: blog_Team_order_by
  User: blog_User_order_by
  assignedAt: order_by
  assignedBy: order_by
  teamId: order_by
  userId: order_by
}

"""primary key columns input for table: blog_MemberOnTeams"""
input blog_MemberOnTeams_pk_columns_input {
  teamId: String!
  userId: String!
}

"""
select columns of table "blog.MemberOnTeams"
"""
enum blog_MemberOnTeams_select_column {
  """column name"""
  assignedAt

  """column name"""
  assignedBy

  """column name"""
  teamId

  """column name"""
  userId
}

"""
input type for updating data in table "blog.MemberOnTeams"
"""
input blog_MemberOnTeams_set_input {
  assignedAt: timestamp
  assignedBy: String
  teamId: String
  userId: String
}

"""
update columns of table "blog.MemberOnTeams"
"""
enum blog_MemberOnTeams_update_column {
  """column name"""
  assignedAt

  """column name"""
  assignedBy

  """column name"""
  teamId

  """column name"""
  userId
}

"""
columns and relationships of "blog.Organization"
"""
type blog_Organization {
  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!

  """An array relationship"""
  Files(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): [blog_File!]!

  """An aggregate relationship"""
  Files_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): blog_File_aggregate!

  """An array relationship"""
  Settings(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): [blog_Settings!]!

  """An aggregate relationship"""
  Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): blog_Settings_aggregate!

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): [blog_Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): blog_Task_aggregate!

  """An array relationship"""
  Teams(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): [blog_Team!]!

  """An aggregate relationship"""
  Teams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): blog_Team_aggregate!

  """An array relationship"""
  Users(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): [blog_User!]!

  """An aggregate relationship"""
  Users_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): blog_User_aggregate!

  """An array relationship"""
  Workflows(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): [blog_Workflow!]!

  """An aggregate relationship"""
  Workflows_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): blog_Workflow_aggregate!
  createdAt: timestamp!
  description: String!
  id: String!
  name: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.Organization"
"""
type blog_Organization_aggregate {
  aggregate: blog_Organization_aggregate_fields
  nodes: [blog_Organization!]!
}

"""
aggregate fields of "blog.Organization"
"""
type blog_Organization_aggregate_fields {
  count(columns: [blog_Organization_select_column!], distinct: Boolean): Int!
  max: blog_Organization_max_fields
  min: blog_Organization_min_fields
}

"""
Boolean expression to filter rows from the table "blog.Organization". All fields are combined with a logical 'AND'.
"""
input blog_Organization_bool_exp {
  EventLogs: blog_EventLog_bool_exp
  Files: blog_File_bool_exp
  Settings: blog_Settings_bool_exp
  TaskDefinitions: blog_TaskDefinition_bool_exp
  Tasks: blog_Task_bool_exp
  Teams: blog_Team_bool_exp
  Users: blog_User_bool_exp
  Workflows: blog_Workflow_bool_exp
  _and: [blog_Organization_bool_exp!]
  _not: blog_Organization_bool_exp
  _or: [blog_Organization_bool_exp!]
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Organization"
"""
enum blog_Organization_constraint {
  """unique or primary key constraint"""
  Organization_pkey
}

"""
input type for inserting data into table "blog.Organization"
"""
input blog_Organization_insert_input {
  EventLogs: blog_EventLog_arr_rel_insert_input
  Files: blog_File_arr_rel_insert_input
  Settings: blog_Settings_arr_rel_insert_input
  TaskDefinitions: blog_TaskDefinition_arr_rel_insert_input
  Tasks: blog_Task_arr_rel_insert_input
  Teams: blog_Team_arr_rel_insert_input
  Users: blog_User_arr_rel_insert_input
  Workflows: blog_Workflow_arr_rel_insert_input
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Organization_max_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""aggregate min on columns"""
type blog_Organization_min_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""
response of any mutation on the table "blog.Organization"
"""
type blog_Organization_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Organization!]!
}

"""
input type for inserting object relation for remote table "blog.Organization"
"""
input blog_Organization_obj_rel_insert_input {
  data: blog_Organization_insert_input!

  """upsert condition"""
  on_conflict: blog_Organization_on_conflict
}

"""
on_conflict condition type for table "blog.Organization"
"""
input blog_Organization_on_conflict {
  constraint: blog_Organization_constraint!
  update_columns: [blog_Organization_update_column!]! = []
  where: blog_Organization_bool_exp
}

"""Ordering options when selecting data from "blog.Organization"."""
input blog_Organization_order_by {
  EventLogs_aggregate: blog_EventLog_aggregate_order_by
  Files_aggregate: blog_File_aggregate_order_by
  Settings_aggregate: blog_Settings_aggregate_order_by
  TaskDefinitions_aggregate: blog_TaskDefinition_aggregate_order_by
  Tasks_aggregate: blog_Task_aggregate_order_by
  Teams_aggregate: blog_Team_aggregate_order_by
  Users_aggregate: blog_User_aggregate_order_by
  Workflows_aggregate: blog_Workflow_aggregate_order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Organization"""
input blog_Organization_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Organization"
"""
enum blog_Organization_select_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Organization"
"""
input blog_Organization_set_input {
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Organization"
"""
enum blog_Organization_update_column {
  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.Post"
"""
type blog_Post {
  """An object relationship"""
  User: blog_User
  authorId: String
  content: String
  createdAt: timestamp!
  id: String!
  published: Boolean!
  title: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.Post"
"""
type blog_Post_aggregate {
  aggregate: blog_Post_aggregate_fields
  nodes: [blog_Post!]!
}

"""
aggregate fields of "blog.Post"
"""
type blog_Post_aggregate_fields {
  count(columns: [blog_Post_select_column!], distinct: Boolean): Int!
  max: blog_Post_max_fields
  min: blog_Post_min_fields
}

"""
order by aggregate values of table "blog.Post"
"""
input blog_Post_aggregate_order_by {
  count: order_by
  max: blog_Post_max_order_by
  min: blog_Post_min_order_by
}

"""
input type for inserting array relation for remote table "blog.Post"
"""
input blog_Post_arr_rel_insert_input {
  data: [blog_Post_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Post_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Post". All fields are combined with a logical 'AND'.
"""
input blog_Post_bool_exp {
  User: blog_User_bool_exp
  _and: [blog_Post_bool_exp!]
  _not: blog_Post_bool_exp
  _or: [blog_Post_bool_exp!]
  authorId: String_comparison_exp
  content: String_comparison_exp
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  published: Boolean_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Post"
"""
enum blog_Post_constraint {
  """unique or primary key constraint"""
  Post_pkey
}

"""
input type for inserting data into table "blog.Post"
"""
input blog_Post_insert_input {
  User: blog_User_obj_rel_insert_input
  authorId: String
  content: String
  createdAt: timestamp
  id: String
  published: Boolean
  title: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Post_max_fields {
  authorId: String
  content: String
  createdAt: timestamp
  id: String
  title: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Post"
"""
input blog_Post_max_order_by {
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  title: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Post_min_fields {
  authorId: String
  content: String
  createdAt: timestamp
  id: String
  title: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Post"
"""
input blog_Post_min_order_by {
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  title: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Post"
"""
type blog_Post_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Post!]!
}

"""
on_conflict condition type for table "blog.Post"
"""
input blog_Post_on_conflict {
  constraint: blog_Post_constraint!
  update_columns: [blog_Post_update_column!]! = []
  where: blog_Post_bool_exp
}

"""Ordering options when selecting data from "blog.Post"."""
input blog_Post_order_by {
  User: blog_User_order_by
  authorId: order_by
  content: order_by
  createdAt: order_by
  id: order_by
  published: order_by
  title: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Post"""
input blog_Post_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Post"
"""
enum blog_Post_select_column {
  """column name"""
  authorId

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  published

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Post"
"""
input blog_Post_set_input {
  authorId: String
  content: String
  createdAt: timestamp
  id: String
  published: Boolean
  title: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Post"
"""
enum blog_Post_update_column {
  """column name"""
  authorId

  """column name"""
  content

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  published

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.Settings"
"""
type blog_Settings {
  """An object relationship"""
  Organization: blog_Organization!
  createdAt: timestamp!
  id: String!
  key: String!
  organizationId: String!
  updatedAt: timestamp!
  value: String!
}

"""
aggregated selection of "blog.Settings"
"""
type blog_Settings_aggregate {
  aggregate: blog_Settings_aggregate_fields
  nodes: [blog_Settings!]!
}

"""
aggregate fields of "blog.Settings"
"""
type blog_Settings_aggregate_fields {
  count(columns: [blog_Settings_select_column!], distinct: Boolean): Int!
  max: blog_Settings_max_fields
  min: blog_Settings_min_fields
}

"""
order by aggregate values of table "blog.Settings"
"""
input blog_Settings_aggregate_order_by {
  count: order_by
  max: blog_Settings_max_order_by
  min: blog_Settings_min_order_by
}

"""
input type for inserting array relation for remote table "blog.Settings"
"""
input blog_Settings_arr_rel_insert_input {
  data: [blog_Settings_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Settings_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Settings". All fields are combined with a logical 'AND'.
"""
input blog_Settings_bool_exp {
  Organization: blog_Organization_bool_exp
  _and: [blog_Settings_bool_exp!]
  _not: blog_Settings_bool_exp
  _or: [blog_Settings_bool_exp!]
  createdAt: timestamp_comparison_exp
  id: String_comparison_exp
  key: String_comparison_exp
  organizationId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.Settings"
"""
enum blog_Settings_constraint {
  """unique or primary key constraint"""
  Settings_pkey
}

"""
input type for inserting data into table "blog.Settings"
"""
input blog_Settings_insert_input {
  Organization: blog_Organization_obj_rel_insert_input
  createdAt: timestamp
  id: String
  key: String
  organizationId: String
  updatedAt: timestamp
  value: String
}

"""aggregate max on columns"""
type blog_Settings_max_fields {
  createdAt: timestamp
  id: String
  key: String
  organizationId: String
  updatedAt: timestamp
  value: String
}

"""
order by max() on columns of table "blog.Settings"
"""
input blog_Settings_max_order_by {
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""aggregate min on columns"""
type blog_Settings_min_fields {
  createdAt: timestamp
  id: String
  key: String
  organizationId: String
  updatedAt: timestamp
  value: String
}

"""
order by min() on columns of table "blog.Settings"
"""
input blog_Settings_min_order_by {
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""
response of any mutation on the table "blog.Settings"
"""
type blog_Settings_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Settings!]!
}

"""
on_conflict condition type for table "blog.Settings"
"""
input blog_Settings_on_conflict {
  constraint: blog_Settings_constraint!
  update_columns: [blog_Settings_update_column!]! = []
  where: blog_Settings_bool_exp
}

"""Ordering options when selecting data from "blog.Settings"."""
input blog_Settings_order_by {
  Organization: blog_Organization_order_by
  createdAt: order_by
  id: order_by
  key: order_by
  organizationId: order_by
  updatedAt: order_by
  value: order_by
}

"""primary key columns input for table: blog_Settings"""
input blog_Settings_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Settings"
"""
enum blog_Settings_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  key

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  value
}

"""
input type for updating data in table "blog.Settings"
"""
input blog_Settings_set_input {
  createdAt: timestamp
  id: String
  key: String
  organizationId: String
  updatedAt: timestamp
  value: String
}

"""
update columns of table "blog.Settings"
"""
enum blog_Settings_update_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  key

  """column name"""
  organizationId

  """column name"""
  updatedAt

  """column name"""
  value
}

"""
columns and relationships of "blog.Task"
"""
type blog_Task {
  """An array relationship"""
  Comments(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): [blog_Comment!]!

  """An aggregate relationship"""
  Comments_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): blog_Comment_aggregate!

  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!

  """An object relationship"""
  Organization: blog_Organization!

  """An object relationship"""
  Task: blog_Task

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): [blog_Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): blog_Task_aggregate!

  """An object relationship"""
  Team: blog_Team!
  assigneeId: String!
  createdAt: timestamp!
  creatorId: String!
  description: String!
  dueDate: timestamp!
  id: String!
  organizationId: String!
  parentId: String
  priority: TaskPriority!
  projectId: String!
  status: TaskStatus!
  teamId: String!
  title: String!
  updatedAt: timestamp!
}

"""
columns and relationships of "blog.TaskDefinition"
"""
type blog_TaskDefinition {
  """An object relationship"""
  Activity: blog_Activity!

  """An object relationship"""
  Organization: blog_Organization!

  """An object relationship"""
  TaskDefinition: blog_TaskDefinition

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!

  """An object relationship"""
  Workflow: blog_Workflow!
  actvityId: String!
  config: String!
  createdAt: timestamp!
  description: String!
  icon: String!
  id: String!
  organizationId: String!
  parentId: String
  thumbnail: String!
  title: String!
  updatedAt: timestamp!
  workflowId: String!
}

"""
aggregated selection of "blog.TaskDefinition"
"""
type blog_TaskDefinition_aggregate {
  aggregate: blog_TaskDefinition_aggregate_fields
  nodes: [blog_TaskDefinition!]!
}

"""
aggregate fields of "blog.TaskDefinition"
"""
type blog_TaskDefinition_aggregate_fields {
  count(columns: [blog_TaskDefinition_select_column!], distinct: Boolean): Int!
  max: blog_TaskDefinition_max_fields
  min: blog_TaskDefinition_min_fields
}

"""
order by aggregate values of table "blog.TaskDefinition"
"""
input blog_TaskDefinition_aggregate_order_by {
  count: order_by
  max: blog_TaskDefinition_max_order_by
  min: blog_TaskDefinition_min_order_by
}

"""
input type for inserting array relation for remote table "blog.TaskDefinition"
"""
input blog_TaskDefinition_arr_rel_insert_input {
  data: [blog_TaskDefinition_insert_input!]!

  """upsert condition"""
  on_conflict: blog_TaskDefinition_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.TaskDefinition". All fields are combined with a logical 'AND'.
"""
input blog_TaskDefinition_bool_exp {
  Activity: blog_Activity_bool_exp
  Organization: blog_Organization_bool_exp
  TaskDefinition: blog_TaskDefinition_bool_exp
  TaskDefinitions: blog_TaskDefinition_bool_exp
  Workflow: blog_Workflow_bool_exp
  _and: [blog_TaskDefinition_bool_exp!]
  _not: blog_TaskDefinition_bool_exp
  _or: [blog_TaskDefinition_bool_exp!]
  actvityId: String_comparison_exp
  config: String_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  icon: String_comparison_exp
  id: String_comparison_exp
  organizationId: String_comparison_exp
  parentId: String_comparison_exp
  thumbnail: String_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  workflowId: String_comparison_exp
}

"""
unique or primary key constraints on table "blog.TaskDefinition"
"""
enum blog_TaskDefinition_constraint {
  """unique or primary key constraint"""
  TaskDefinition_pkey
}

"""
input type for inserting data into table "blog.TaskDefinition"
"""
input blog_TaskDefinition_insert_input {
  Activity: blog_Activity_obj_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  TaskDefinition: blog_TaskDefinition_obj_rel_insert_input
  TaskDefinitions: blog_TaskDefinition_arr_rel_insert_input
  Workflow: blog_Workflow_obj_rel_insert_input
  actvityId: String
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: String
  organizationId: String
  parentId: String
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: String
}

"""aggregate max on columns"""
type blog_TaskDefinition_max_fields {
  actvityId: String
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: String
  organizationId: String
  parentId: String
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: String
}

"""
order by max() on columns of table "blog.TaskDefinition"
"""
input blog_TaskDefinition_max_order_by {
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""aggregate min on columns"""
type blog_TaskDefinition_min_fields {
  actvityId: String
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: String
  organizationId: String
  parentId: String
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: String
}

"""
order by min() on columns of table "blog.TaskDefinition"
"""
input blog_TaskDefinition_min_order_by {
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""
response of any mutation on the table "blog.TaskDefinition"
"""
type blog_TaskDefinition_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_TaskDefinition!]!
}

"""
input type for inserting object relation for remote table "blog.TaskDefinition"
"""
input blog_TaskDefinition_obj_rel_insert_input {
  data: blog_TaskDefinition_insert_input!

  """upsert condition"""
  on_conflict: blog_TaskDefinition_on_conflict
}

"""
on_conflict condition type for table "blog.TaskDefinition"
"""
input blog_TaskDefinition_on_conflict {
  constraint: blog_TaskDefinition_constraint!
  update_columns: [blog_TaskDefinition_update_column!]! = []
  where: blog_TaskDefinition_bool_exp
}

"""Ordering options when selecting data from "blog.TaskDefinition"."""
input blog_TaskDefinition_order_by {
  Activity: blog_Activity_order_by
  Organization: blog_Organization_order_by
  TaskDefinition: blog_TaskDefinition_order_by
  TaskDefinitions_aggregate: blog_TaskDefinition_aggregate_order_by
  Workflow: blog_Workflow_order_by
  actvityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  icon: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  thumbnail: order_by
  title: order_by
  updatedAt: order_by
  workflowId: order_by
}

"""primary key columns input for table: blog_TaskDefinition"""
input blog_TaskDefinition_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.TaskDefinition"
"""
enum blog_TaskDefinition_select_column {
  """column name"""
  actvityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  icon

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  thumbnail

  """column name"""
  title

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
input type for updating data in table "blog.TaskDefinition"
"""
input blog_TaskDefinition_set_input {
  actvityId: String
  config: String
  createdAt: timestamp
  description: String
  icon: String
  id: String
  organizationId: String
  parentId: String
  thumbnail: String
  title: String
  updatedAt: timestamp
  workflowId: String
}

"""
update columns of table "blog.TaskDefinition"
"""
enum blog_TaskDefinition_update_column {
  """column name"""
  actvityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  icon

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  thumbnail

  """column name"""
  title

  """column name"""
  updatedAt

  """column name"""
  workflowId
}

"""
aggregated selection of "blog.Task"
"""
type blog_Task_aggregate {
  aggregate: blog_Task_aggregate_fields
  nodes: [blog_Task!]!
}

"""
aggregate fields of "blog.Task"
"""
type blog_Task_aggregate_fields {
  count(columns: [blog_Task_select_column!], distinct: Boolean): Int!
  max: blog_Task_max_fields
  min: blog_Task_min_fields
}

"""
order by aggregate values of table "blog.Task"
"""
input blog_Task_aggregate_order_by {
  count: order_by
  max: blog_Task_max_order_by
  min: blog_Task_min_order_by
}

"""
input type for inserting array relation for remote table "blog.Task"
"""
input blog_Task_arr_rel_insert_input {
  data: [blog_Task_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Task_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Task". All fields are combined with a logical 'AND'.
"""
input blog_Task_bool_exp {
  Comments: blog_Comment_bool_exp
  EventLogs: blog_EventLog_bool_exp
  Organization: blog_Organization_bool_exp
  Task: blog_Task_bool_exp
  Tasks: blog_Task_bool_exp
  Team: blog_Team_bool_exp
  _and: [blog_Task_bool_exp!]
  _not: blog_Task_bool_exp
  _or: [blog_Task_bool_exp!]
  assigneeId: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: String_comparison_exp
  description: String_comparison_exp
  dueDate: timestamp_comparison_exp
  id: String_comparison_exp
  organizationId: String_comparison_exp
  parentId: String_comparison_exp
  priority: TaskPriority_comparison_exp
  projectId: String_comparison_exp
  status: TaskStatus_comparison_exp
  teamId: String_comparison_exp
  title: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Task"
"""
enum blog_Task_constraint {
  """unique or primary key constraint"""
  Task_pkey
}

"""
input type for inserting data into table "blog.Task"
"""
input blog_Task_insert_input {
  Comments: blog_Comment_arr_rel_insert_input
  EventLogs: blog_EventLog_arr_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  Task: blog_Task_obj_rel_insert_input
  Tasks: blog_Task_arr_rel_insert_input
  Team: blog_Team_obj_rel_insert_input
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: String
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Task_max_fields {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: String
  parentId: String
  projectId: String
  teamId: String
  title: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Task"
"""
input blog_Task_max_order_by {
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  projectId: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Task_min_fields {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: String
  parentId: String
  projectId: String
  teamId: String
  title: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Task"
"""
input blog_Task_min_order_by {
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  projectId: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Task"
"""
type blog_Task_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Task!]!
}

"""
input type for inserting object relation for remote table "blog.Task"
"""
input blog_Task_obj_rel_insert_input {
  data: blog_Task_insert_input!

  """upsert condition"""
  on_conflict: blog_Task_on_conflict
}

"""
on_conflict condition type for table "blog.Task"
"""
input blog_Task_on_conflict {
  constraint: blog_Task_constraint!
  update_columns: [blog_Task_update_column!]! = []
  where: blog_Task_bool_exp
}

"""Ordering options when selecting data from "blog.Task"."""
input blog_Task_order_by {
  Comments_aggregate: blog_Comment_aggregate_order_by
  EventLogs_aggregate: blog_EventLog_aggregate_order_by
  Organization: blog_Organization_order_by
  Task: blog_Task_order_by
  Tasks_aggregate: blog_Task_aggregate_order_by
  Team: blog_Team_order_by
  assigneeId: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  dueDate: order_by
  id: order_by
  organizationId: order_by
  parentId: order_by
  priority: order_by
  projectId: order_by
  status: order_by
  teamId: order_by
  title: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Task"""
input blog_Task_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Task"
"""
enum blog_Task_select_column {
  """column name"""
  assigneeId

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  priority

  """column name"""
  projectId

  """column name"""
  status

  """column name"""
  teamId

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Task"
"""
input blog_Task_set_input {
  assigneeId: String
  createdAt: timestamp
  creatorId: String
  description: String
  dueDate: timestamp
  id: String
  organizationId: String
  parentId: String
  priority: TaskPriority
  projectId: String
  status: TaskStatus
  teamId: String
  title: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Task"
"""
enum blog_Task_update_column {
  """column name"""
  assigneeId

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  dueDate

  """column name"""
  id

  """column name"""
  organizationId

  """column name"""
  parentId

  """column name"""
  priority

  """column name"""
  projectId

  """column name"""
  status

  """column name"""
  teamId

  """column name"""
  title

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.Team"
"""
type blog_Team {
  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): [blog_MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): blog_MemberOnTeams_aggregate!

  """An object relationship"""
  Organization: blog_Organization!

  """An array relationship"""
  Tasks(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): [blog_Task!]!

  """An aggregate relationship"""
  Tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): blog_Task_aggregate!

  """An object relationship"""
  User: blog_User!
  bio: String!
  createdAt: timestamp!
  creatorId: String!
  description: String!
  id: String!
  managerId: String!
  name: String!
  organizationId: String!
  updatedAt: timestamp!

  """An object relationship"""
  userByManagerid: blog_User!
}

"""
aggregated selection of "blog.Team"
"""
type blog_Team_aggregate {
  aggregate: blog_Team_aggregate_fields
  nodes: [blog_Team!]!
}

"""
aggregate fields of "blog.Team"
"""
type blog_Team_aggregate_fields {
  count(columns: [blog_Team_select_column!], distinct: Boolean): Int!
  max: blog_Team_max_fields
  min: blog_Team_min_fields
}

"""
order by aggregate values of table "blog.Team"
"""
input blog_Team_aggregate_order_by {
  count: order_by
  max: blog_Team_max_order_by
  min: blog_Team_min_order_by
}

"""
input type for inserting array relation for remote table "blog.Team"
"""
input blog_Team_arr_rel_insert_input {
  data: [blog_Team_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Team_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Team". All fields are combined with a logical 'AND'.
"""
input blog_Team_bool_exp {
  MemberOnTeams: blog_MemberOnTeams_bool_exp
  Organization: blog_Organization_bool_exp
  Tasks: blog_Task_bool_exp
  User: blog_User_bool_exp
  _and: [blog_Team_bool_exp!]
  _not: blog_Team_bool_exp
  _or: [blog_Team_bool_exp!]
  bio: String_comparison_exp
  createdAt: timestamp_comparison_exp
  creatorId: String_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  managerId: String_comparison_exp
  name: String_comparison_exp
  organizationId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
  userByManagerid: blog_User_bool_exp
}

"""
unique or primary key constraints on table "blog.Team"
"""
enum blog_Team_constraint {
  """unique or primary key constraint"""
  Team_pkey
}

"""
input type for inserting data into table "blog.Team"
"""
input blog_Team_insert_input {
  MemberOnTeams: blog_MemberOnTeams_arr_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  Tasks: blog_Task_arr_rel_insert_input
  User: blog_User_obj_rel_insert_input
  bio: String
  createdAt: timestamp
  creatorId: String
  description: String
  id: String
  managerId: String
  name: String
  organizationId: String
  updatedAt: timestamp
  userByManagerid: blog_User_obj_rel_insert_input
}

"""aggregate max on columns"""
type blog_Team_max_fields {
  bio: String
  createdAt: timestamp
  creatorId: String
  description: String
  id: String
  managerId: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Team"
"""
input blog_Team_max_order_by {
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Team_min_fields {
  bio: String
  createdAt: timestamp
  creatorId: String
  description: String
  id: String
  managerId: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Team"
"""
input blog_Team_min_order_by {
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Team"
"""
type blog_Team_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Team!]!
}

"""
input type for inserting object relation for remote table "blog.Team"
"""
input blog_Team_obj_rel_insert_input {
  data: blog_Team_insert_input!

  """upsert condition"""
  on_conflict: blog_Team_on_conflict
}

"""
on_conflict condition type for table "blog.Team"
"""
input blog_Team_on_conflict {
  constraint: blog_Team_constraint!
  update_columns: [blog_Team_update_column!]! = []
  where: blog_Team_bool_exp
}

"""Ordering options when selecting data from "blog.Team"."""
input blog_Team_order_by {
  MemberOnTeams_aggregate: blog_MemberOnTeams_aggregate_order_by
  Organization: blog_Organization_order_by
  Tasks_aggregate: blog_Task_aggregate_order_by
  User: blog_User_order_by
  bio: order_by
  createdAt: order_by
  creatorId: order_by
  description: order_by
  id: order_by
  managerId: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
  userByManagerid: blog_User_order_by
}

"""primary key columns input for table: blog_Team"""
input blog_Team_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.Team"
"""
enum blog_Team_select_column {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  id

  """column name"""
  managerId

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Team"
"""
input blog_Team_set_input {
  bio: String
  createdAt: timestamp
  creatorId: String
  description: String
  id: String
  managerId: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Team"
"""
enum blog_Team_update_column {
  """column name"""
  bio

  """column name"""
  createdAt

  """column name"""
  creatorId

  """column name"""
  description

  """column name"""
  id

  """column name"""
  managerId

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.Trigger"
"""
type blog_Trigger {
  """An object relationship"""
  Activity: blog_Activity!
  activityId: String!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: String!
  name: String!
  type: TriggerType!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.Trigger"
"""
type blog_Trigger_aggregate {
  aggregate: blog_Trigger_aggregate_fields
  nodes: [blog_Trigger!]!
}

"""
aggregate fields of "blog.Trigger"
"""
type blog_Trigger_aggregate_fields {
  count(columns: [blog_Trigger_select_column!], distinct: Boolean): Int!
  max: blog_Trigger_max_fields
  min: blog_Trigger_min_fields
}

"""
order by aggregate values of table "blog.Trigger"
"""
input blog_Trigger_aggregate_order_by {
  count: order_by
  max: blog_Trigger_max_order_by
  min: blog_Trigger_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input blog_Trigger_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "blog.Trigger"
"""
input blog_Trigger_arr_rel_insert_input {
  data: [blog_Trigger_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Trigger_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Trigger". All fields are combined with a logical 'AND'.
"""
input blog_Trigger_bool_exp {
  Activity: blog_Activity_bool_exp
  _and: [blog_Trigger_bool_exp!]
  _not: blog_Trigger_bool_exp
  _or: [blog_Trigger_bool_exp!]
  activityId: String_comparison_exp
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  type: TriggerType_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Trigger"
"""
enum blog_Trigger_constraint {
  """unique or primary key constraint"""
  Trigger_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input blog_Trigger_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input blog_Trigger_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input blog_Trigger_delete_key_input {
  config: String
}

"""
input type for inserting data into table "blog.Trigger"
"""
input blog_Trigger_insert_input {
  Activity: blog_Activity_obj_rel_insert_input
  activityId: String
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Trigger_max_fields {
  activityId: String
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Trigger"
"""
input blog_Trigger_max_order_by {
  activityId: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Trigger_min_fields {
  activityId: String
  createdAt: timestamp
  description: String
  id: String
  name: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Trigger"
"""
input blog_Trigger_min_order_by {
  activityId: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Trigger"
"""
type blog_Trigger_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Trigger!]!
}

"""
on_conflict condition type for table "blog.Trigger"
"""
input blog_Trigger_on_conflict {
  constraint: blog_Trigger_constraint!
  update_columns: [blog_Trigger_update_column!]! = []
  where: blog_Trigger_bool_exp
}

"""Ordering options when selecting data from "blog.Trigger"."""
input blog_Trigger_order_by {
  Activity: blog_Activity_order_by
  activityId: order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  type: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Trigger"""
input blog_Trigger_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input blog_Trigger_prepend_input {
  config: jsonb
}

"""
select columns of table "blog.Trigger"
"""
enum blog_Trigger_select_column {
  """column name"""
  activityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Trigger"
"""
input blog_Trigger_set_input {
  activityId: String
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  type: TriggerType
  updatedAt: timestamp
}

"""
update columns of table "blog.Trigger"
"""
enum blog_Trigger_update_column {
  """column name"""
  activityId

  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  type

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.User"
"""
type blog_User {
  """An array relationship"""
  Comments(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): [blog_Comment!]!

  """An aggregate relationship"""
  Comments_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): blog_Comment_aggregate!

  """An array relationship"""
  EventLogs(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """An aggregate relationship"""
  EventLogs_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!

  """An array relationship"""
  MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): [blog_MemberOnTeams!]!

  """An aggregate relationship"""
  MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): blog_MemberOnTeams_aggregate!

  """An object relationship"""
  Organization: blog_Organization!

  """An array relationship"""
  Posts(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): [blog_Post!]!

  """An aggregate relationship"""
  Posts_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): blog_Post_aggregate!

  """An array relationship"""
  Teams(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): [blog_Team!]!

  """An aggregate relationship"""
  Teams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): blog_Team_aggregate!
  createdAt: timestamp!
  email: String!
  firstname: String
  id: String!
  lastname: String
  organizationId: String!
  password: String!
  role: Role!

  """An array relationship"""
  teamsByManagerid(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): [blog_Team!]!

  """An aggregate relationship"""
  teamsByManagerid_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): blog_Team_aggregate!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.User"
"""
type blog_User_aggregate {
  aggregate: blog_User_aggregate_fields
  nodes: [blog_User!]!
}

"""
aggregate fields of "blog.User"
"""
type blog_User_aggregate_fields {
  count(columns: [blog_User_select_column!], distinct: Boolean): Int!
  max: blog_User_max_fields
  min: blog_User_min_fields
}

"""
order by aggregate values of table "blog.User"
"""
input blog_User_aggregate_order_by {
  count: order_by
  max: blog_User_max_order_by
  min: blog_User_min_order_by
}

"""
input type for inserting array relation for remote table "blog.User"
"""
input blog_User_arr_rel_insert_input {
  data: [blog_User_insert_input!]!

  """upsert condition"""
  on_conflict: blog_User_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.User". All fields are combined with a logical 'AND'.
"""
input blog_User_bool_exp {
  Comments: blog_Comment_bool_exp
  EventLogs: blog_EventLog_bool_exp
  MemberOnTeams: blog_MemberOnTeams_bool_exp
  Organization: blog_Organization_bool_exp
  Posts: blog_Post_bool_exp
  Teams: blog_Team_bool_exp
  _and: [blog_User_bool_exp!]
  _not: blog_User_bool_exp
  _or: [blog_User_bool_exp!]
  createdAt: timestamp_comparison_exp
  email: String_comparison_exp
  firstname: String_comparison_exp
  id: String_comparison_exp
  lastname: String_comparison_exp
  organizationId: String_comparison_exp
  password: String_comparison_exp
  role: Role_comparison_exp
  teamsByManagerid: blog_Team_bool_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.User"
"""
enum blog_User_constraint {
  """unique or primary key constraint"""
  User_email_key

  """unique or primary key constraint"""
  User_pkey
}

"""
input type for inserting data into table "blog.User"
"""
input blog_User_insert_input {
  Comments: blog_Comment_arr_rel_insert_input
  EventLogs: blog_EventLog_arr_rel_insert_input
  MemberOnTeams: blog_MemberOnTeams_arr_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  Posts: blog_Post_arr_rel_insert_input
  Teams: blog_Team_arr_rel_insert_input
  createdAt: timestamp
  email: String
  firstname: String
  id: String
  lastname: String
  organizationId: String
  password: String
  role: Role
  teamsByManagerid: blog_Team_arr_rel_insert_input
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_User_max_fields {
  createdAt: timestamp
  email: String
  firstname: String
  id: String
  lastname: String
  organizationId: String
  password: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.User"
"""
input blog_User_max_order_by {
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_User_min_fields {
  createdAt: timestamp
  email: String
  firstname: String
  id: String
  lastname: String
  organizationId: String
  password: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.User"
"""
input blog_User_min_order_by {
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.User"
"""
type blog_User_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_User!]!
}

"""
input type for inserting object relation for remote table "blog.User"
"""
input blog_User_obj_rel_insert_input {
  data: blog_User_insert_input!

  """upsert condition"""
  on_conflict: blog_User_on_conflict
}

"""
on_conflict condition type for table "blog.User"
"""
input blog_User_on_conflict {
  constraint: blog_User_constraint!
  update_columns: [blog_User_update_column!]! = []
  where: blog_User_bool_exp
}

"""Ordering options when selecting data from "blog.User"."""
input blog_User_order_by {
  Comments_aggregate: blog_Comment_aggregate_order_by
  EventLogs_aggregate: blog_EventLog_aggregate_order_by
  MemberOnTeams_aggregate: blog_MemberOnTeams_aggregate_order_by
  Organization: blog_Organization_order_by
  Posts_aggregate: blog_Post_aggregate_order_by
  Teams_aggregate: blog_Team_aggregate_order_by
  createdAt: order_by
  email: order_by
  firstname: order_by
  id: order_by
  lastname: order_by
  organizationId: order_by
  password: order_by
  role: order_by
  teamsByManagerid_aggregate: blog_Team_aggregate_order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_User"""
input blog_User_pk_columns_input {
  id: String!
}

"""
select columns of table "blog.User"
"""
enum blog_User_select_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  organizationId

  """column name"""
  password

  """column name"""
  role

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.User"
"""
input blog_User_set_input {
  createdAt: timestamp
  email: String
  firstname: String
  id: String
  lastname: String
  organizationId: String
  password: String
  role: Role
  updatedAt: timestamp
}

"""
update columns of table "blog.User"
"""
enum blog_User_update_column {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstname

  """column name"""
  id

  """column name"""
  lastname

  """column name"""
  organizationId

  """column name"""
  password

  """column name"""
  role

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog.Workflow"
"""
type blog_Workflow {
  """An array relationship"""
  Activities(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): [blog_Activity!]!

  """An aggregate relationship"""
  Activities_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): blog_Activity_aggregate!

  """An object relationship"""
  Organization: blog_Organization!

  """An array relationship"""
  TaskDefinitions(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """An aggregate relationship"""
  TaskDefinitions_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!
  config(
    """JSON select path"""
    path: String
  ): jsonb!
  createdAt: timestamp!
  description: String!
  id: String!
  name: String!
  organizationId: String!
  updatedAt: timestamp!
}

"""
aggregated selection of "blog.Workflow"
"""
type blog_Workflow_aggregate {
  aggregate: blog_Workflow_aggregate_fields
  nodes: [blog_Workflow!]!
}

"""
aggregate fields of "blog.Workflow"
"""
type blog_Workflow_aggregate_fields {
  count(columns: [blog_Workflow_select_column!], distinct: Boolean): Int!
  max: blog_Workflow_max_fields
  min: blog_Workflow_min_fields
}

"""
order by aggregate values of table "blog.Workflow"
"""
input blog_Workflow_aggregate_order_by {
  count: order_by
  max: blog_Workflow_max_order_by
  min: blog_Workflow_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input blog_Workflow_append_input {
  config: jsonb
}

"""
input type for inserting array relation for remote table "blog.Workflow"
"""
input blog_Workflow_arr_rel_insert_input {
  data: [blog_Workflow_insert_input!]!

  """upsert condition"""
  on_conflict: blog_Workflow_on_conflict
}

"""
Boolean expression to filter rows from the table "blog.Workflow". All fields are combined with a logical 'AND'.
"""
input blog_Workflow_bool_exp {
  Activities: blog_Activity_bool_exp
  Organization: blog_Organization_bool_exp
  TaskDefinitions: blog_TaskDefinition_bool_exp
  _and: [blog_Workflow_bool_exp!]
  _not: blog_Workflow_bool_exp
  _or: [blog_Workflow_bool_exp!]
  config: jsonb_comparison_exp
  createdAt: timestamp_comparison_exp
  description: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  organizationId: String_comparison_exp
  updatedAt: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "blog.Workflow"
"""
enum blog_Workflow_constraint {
  """unique or primary key constraint"""
  Workflow_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input blog_Workflow_delete_at_path_input {
  config: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input blog_Workflow_delete_elem_input {
  config: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input blog_Workflow_delete_key_input {
  config: String
}

"""
input type for inserting data into table "blog.Workflow"
"""
input blog_Workflow_insert_input {
  Activities: blog_Activity_arr_rel_insert_input
  Organization: blog_Organization_obj_rel_insert_input
  TaskDefinitions: blog_TaskDefinition_arr_rel_insert_input
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""aggregate max on columns"""
type blog_Workflow_max_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
order by max() on columns of table "blog.Workflow"
"""
input blog_Workflow_max_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type blog_Workflow_min_fields {
  createdAt: timestamp
  description: String
  id: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
order by min() on columns of table "blog.Workflow"
"""
input blog_Workflow_min_order_by {
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "blog.Workflow"
"""
type blog_Workflow_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog_Workflow!]!
}

"""
input type for inserting object relation for remote table "blog.Workflow"
"""
input blog_Workflow_obj_rel_insert_input {
  data: blog_Workflow_insert_input!

  """upsert condition"""
  on_conflict: blog_Workflow_on_conflict
}

"""
on_conflict condition type for table "blog.Workflow"
"""
input blog_Workflow_on_conflict {
  constraint: blog_Workflow_constraint!
  update_columns: [blog_Workflow_update_column!]! = []
  where: blog_Workflow_bool_exp
}

"""Ordering options when selecting data from "blog.Workflow"."""
input blog_Workflow_order_by {
  Activities_aggregate: blog_Activity_aggregate_order_by
  Organization: blog_Organization_order_by
  TaskDefinitions_aggregate: blog_TaskDefinition_aggregate_order_by
  config: order_by
  createdAt: order_by
  description: order_by
  id: order_by
  name: order_by
  organizationId: order_by
  updatedAt: order_by
}

"""primary key columns input for table: blog_Workflow"""
input blog_Workflow_pk_columns_input {
  id: String!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input blog_Workflow_prepend_input {
  config: jsonb
}

"""
select columns of table "blog.Workflow"
"""
enum blog_Workflow_select_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
input type for updating data in table "blog.Workflow"
"""
input blog_Workflow_set_input {
  config: jsonb
  createdAt: timestamp
  description: String
  id: String
  name: String
  organizationId: String
  updatedAt: timestamp
}

"""
update columns of table "blog.Workflow"
"""
enum blog_Workflow_update_column {
  """column name"""
  config

  """column name"""
  createdAt

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  organizationId

  """column name"""
  updatedAt
}

"""
columns and relationships of "blog._prisma_migrations"
"""
type blog__prisma_migrations {
  applied_steps_count: Int!
  checksum: String!
  finished_at: timestamptz
  id: String!
  logs: String
  migration_name: String!
  rolled_back_at: timestamptz
  started_at: timestamptz!
}

"""
aggregated selection of "blog._prisma_migrations"
"""
type blog__prisma_migrations_aggregate {
  aggregate: blog__prisma_migrations_aggregate_fields
  nodes: [blog__prisma_migrations!]!
}

"""
aggregate fields of "blog._prisma_migrations"
"""
type blog__prisma_migrations_aggregate_fields {
  avg: blog__prisma_migrations_avg_fields
  count(columns: [blog__prisma_migrations_select_column!], distinct: Boolean): Int!
  max: blog__prisma_migrations_max_fields
  min: blog__prisma_migrations_min_fields
  stddev: blog__prisma_migrations_stddev_fields
  stddev_pop: blog__prisma_migrations_stddev_pop_fields
  stddev_samp: blog__prisma_migrations_stddev_samp_fields
  sum: blog__prisma_migrations_sum_fields
  var_pop: blog__prisma_migrations_var_pop_fields
  var_samp: blog__prisma_migrations_var_samp_fields
  variance: blog__prisma_migrations_variance_fields
}

"""aggregate avg on columns"""
type blog__prisma_migrations_avg_fields {
  applied_steps_count: Float
}

"""
Boolean expression to filter rows from the table "blog._prisma_migrations". All fields are combined with a logical 'AND'.
"""
input blog__prisma_migrations_bool_exp {
  _and: [blog__prisma_migrations_bool_exp!]
  _not: blog__prisma_migrations_bool_exp
  _or: [blog__prisma_migrations_bool_exp!]
  applied_steps_count: Int_comparison_exp
  checksum: String_comparison_exp
  finished_at: timestamptz_comparison_exp
  id: String_comparison_exp
  logs: String_comparison_exp
  migration_name: String_comparison_exp
  rolled_back_at: timestamptz_comparison_exp
  started_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "blog._prisma_migrations"
"""
enum blog__prisma_migrations_constraint {
  """unique or primary key constraint"""
  _prisma_migrations_pkey
}

"""
input type for incrementing numeric columns in table "blog._prisma_migrations"
"""
input blog__prisma_migrations_inc_input {
  applied_steps_count: Int
}

"""
input type for inserting data into table "blog._prisma_migrations"
"""
input blog__prisma_migrations_insert_input {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate max on columns"""
type blog__prisma_migrations_max_fields {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate min on columns"""
type blog__prisma_migrations_min_fields {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""
response of any mutation on the table "blog._prisma_migrations"
"""
type blog__prisma_migrations_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blog__prisma_migrations!]!
}

"""
on_conflict condition type for table "blog._prisma_migrations"
"""
input blog__prisma_migrations_on_conflict {
  constraint: blog__prisma_migrations_constraint!
  update_columns: [blog__prisma_migrations_update_column!]! = []
  where: blog__prisma_migrations_bool_exp
}

"""Ordering options when selecting data from "blog._prisma_migrations"."""
input blog__prisma_migrations_order_by {
  applied_steps_count: order_by
  checksum: order_by
  finished_at: order_by
  id: order_by
  logs: order_by
  migration_name: order_by
  rolled_back_at: order_by
  started_at: order_by
}

"""primary key columns input for table: blog__prisma_migrations"""
input blog__prisma_migrations_pk_columns_input {
  id: String!
}

"""
select columns of table "blog._prisma_migrations"
"""
enum blog__prisma_migrations_select_column {
  """column name"""
  applied_steps_count

  """column name"""
  checksum

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  logs

  """column name"""
  migration_name

  """column name"""
  rolled_back_at

  """column name"""
  started_at
}

"""
input type for updating data in table "blog._prisma_migrations"
"""
input blog__prisma_migrations_set_input {
  applied_steps_count: Int
  checksum: String
  finished_at: timestamptz
  id: String
  logs: String
  migration_name: String
  rolled_back_at: timestamptz
  started_at: timestamptz
}

"""aggregate stddev on columns"""
type blog__prisma_migrations_stddev_fields {
  applied_steps_count: Float
}

"""aggregate stddev_pop on columns"""
type blog__prisma_migrations_stddev_pop_fields {
  applied_steps_count: Float
}

"""aggregate stddev_samp on columns"""
type blog__prisma_migrations_stddev_samp_fields {
  applied_steps_count: Float
}

"""aggregate sum on columns"""
type blog__prisma_migrations_sum_fields {
  applied_steps_count: Int
}

"""
update columns of table "blog._prisma_migrations"
"""
enum blog__prisma_migrations_update_column {
  """column name"""
  applied_steps_count

  """column name"""
  checksum

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  logs

  """column name"""
  migration_name

  """column name"""
  rolled_back_at

  """column name"""
  started_at
}

"""aggregate var_pop on columns"""
type blog__prisma_migrations_var_pop_fields {
  applied_steps_count: Float
}

"""aggregate var_samp on columns"""
type blog__prisma_migrations_var_samp_fields {
  applied_steps_count: Float
}

"""aggregate variance on columns"""
type blog__prisma_migrations_variance_fields {
  applied_steps_count: Float
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "blog.Action"
  """
  delete_blog_Action(
    """filter the rows which have to be deleted"""
    where: blog_Action_bool_exp!
  ): blog_Action_mutation_response

  """
  delete single row from the table: "blog.Action"
  """
  delete_blog_Action_by_pk(id: String!): blog_Action

  """
  delete data from the table: "blog.Activity"
  """
  delete_blog_Activity(
    """filter the rows which have to be deleted"""
    where: blog_Activity_bool_exp!
  ): blog_Activity_mutation_response

  """
  delete single row from the table: "blog.Activity"
  """
  delete_blog_Activity_by_pk(id: String!): blog_Activity

  """
  delete data from the table: "blog.Comment"
  """
  delete_blog_Comment(
    """filter the rows which have to be deleted"""
    where: blog_Comment_bool_exp!
  ): blog_Comment_mutation_response

  """
  delete single row from the table: "blog.Comment"
  """
  delete_blog_Comment_by_pk(id: String!): blog_Comment

  """
  delete data from the table: "blog.EventLog"
  """
  delete_blog_EventLog(
    """filter the rows which have to be deleted"""
    where: blog_EventLog_bool_exp!
  ): blog_EventLog_mutation_response

  """
  delete single row from the table: "blog.EventLog"
  """
  delete_blog_EventLog_by_pk(id: String!): blog_EventLog

  """
  delete data from the table: "blog.File"
  """
  delete_blog_File(
    """filter the rows which have to be deleted"""
    where: blog_File_bool_exp!
  ): blog_File_mutation_response

  """
  delete single row from the table: "blog.File"
  """
  delete_blog_File_by_pk(id: String!): blog_File

  """
  delete data from the table: "blog.MemberOnTeams"
  """
  delete_blog_MemberOnTeams(
    """filter the rows which have to be deleted"""
    where: blog_MemberOnTeams_bool_exp!
  ): blog_MemberOnTeams_mutation_response

  """
  delete single row from the table: "blog.MemberOnTeams"
  """
  delete_blog_MemberOnTeams_by_pk(teamId: String!, userId: String!): blog_MemberOnTeams

  """
  delete data from the table: "blog.Organization"
  """
  delete_blog_Organization(
    """filter the rows which have to be deleted"""
    where: blog_Organization_bool_exp!
  ): blog_Organization_mutation_response

  """
  delete single row from the table: "blog.Organization"
  """
  delete_blog_Organization_by_pk(id: String!): blog_Organization

  """
  delete data from the table: "blog.Post"
  """
  delete_blog_Post(
    """filter the rows which have to be deleted"""
    where: blog_Post_bool_exp!
  ): blog_Post_mutation_response

  """
  delete single row from the table: "blog.Post"
  """
  delete_blog_Post_by_pk(id: String!): blog_Post

  """
  delete data from the table: "blog.Settings"
  """
  delete_blog_Settings(
    """filter the rows which have to be deleted"""
    where: blog_Settings_bool_exp!
  ): blog_Settings_mutation_response

  """
  delete single row from the table: "blog.Settings"
  """
  delete_blog_Settings_by_pk(id: String!): blog_Settings

  """
  delete data from the table: "blog.Task"
  """
  delete_blog_Task(
    """filter the rows which have to be deleted"""
    where: blog_Task_bool_exp!
  ): blog_Task_mutation_response

  """
  delete data from the table: "blog.TaskDefinition"
  """
  delete_blog_TaskDefinition(
    """filter the rows which have to be deleted"""
    where: blog_TaskDefinition_bool_exp!
  ): blog_TaskDefinition_mutation_response

  """
  delete single row from the table: "blog.TaskDefinition"
  """
  delete_blog_TaskDefinition_by_pk(id: String!): blog_TaskDefinition

  """
  delete single row from the table: "blog.Task"
  """
  delete_blog_Task_by_pk(id: String!): blog_Task

  """
  delete data from the table: "blog.Team"
  """
  delete_blog_Team(
    """filter the rows which have to be deleted"""
    where: blog_Team_bool_exp!
  ): blog_Team_mutation_response

  """
  delete single row from the table: "blog.Team"
  """
  delete_blog_Team_by_pk(id: String!): blog_Team

  """
  delete data from the table: "blog.Trigger"
  """
  delete_blog_Trigger(
    """filter the rows which have to be deleted"""
    where: blog_Trigger_bool_exp!
  ): blog_Trigger_mutation_response

  """
  delete single row from the table: "blog.Trigger"
  """
  delete_blog_Trigger_by_pk(id: String!): blog_Trigger

  """
  delete data from the table: "blog.User"
  """
  delete_blog_User(
    """filter the rows which have to be deleted"""
    where: blog_User_bool_exp!
  ): blog_User_mutation_response

  """
  delete single row from the table: "blog.User"
  """
  delete_blog_User_by_pk(id: String!): blog_User

  """
  delete data from the table: "blog.Workflow"
  """
  delete_blog_Workflow(
    """filter the rows which have to be deleted"""
    where: blog_Workflow_bool_exp!
  ): blog_Workflow_mutation_response

  """
  delete single row from the table: "blog.Workflow"
  """
  delete_blog_Workflow_by_pk(id: String!): blog_Workflow

  """
  delete data from the table: "blog._prisma_migrations"
  """
  delete_blog__prisma_migrations(
    """filter the rows which have to be deleted"""
    where: blog__prisma_migrations_bool_exp!
  ): blog__prisma_migrations_mutation_response

  """
  delete single row from the table: "blog._prisma_migrations"
  """
  delete_blog__prisma_migrations_by_pk(id: String!): blog__prisma_migrations

  """
  insert data into the table: "blog.Action"
  """
  insert_blog_Action(
    """the rows to be inserted"""
    objects: [blog_Action_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Action_on_conflict
  ): blog_Action_mutation_response

  """
  insert a single row into the table: "blog.Action"
  """
  insert_blog_Action_one(
    """the row to be inserted"""
    object: blog_Action_insert_input!

    """upsert condition"""
    on_conflict: blog_Action_on_conflict
  ): blog_Action

  """
  insert data into the table: "blog.Activity"
  """
  insert_blog_Activity(
    """the rows to be inserted"""
    objects: [blog_Activity_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Activity_on_conflict
  ): blog_Activity_mutation_response

  """
  insert a single row into the table: "blog.Activity"
  """
  insert_blog_Activity_one(
    """the row to be inserted"""
    object: blog_Activity_insert_input!

    """upsert condition"""
    on_conflict: blog_Activity_on_conflict
  ): blog_Activity

  """
  insert data into the table: "blog.Comment"
  """
  insert_blog_Comment(
    """the rows to be inserted"""
    objects: [blog_Comment_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Comment_on_conflict
  ): blog_Comment_mutation_response

  """
  insert a single row into the table: "blog.Comment"
  """
  insert_blog_Comment_one(
    """the row to be inserted"""
    object: blog_Comment_insert_input!

    """upsert condition"""
    on_conflict: blog_Comment_on_conflict
  ): blog_Comment

  """
  insert data into the table: "blog.EventLog"
  """
  insert_blog_EventLog(
    """the rows to be inserted"""
    objects: [blog_EventLog_insert_input!]!

    """upsert condition"""
    on_conflict: blog_EventLog_on_conflict
  ): blog_EventLog_mutation_response

  """
  insert a single row into the table: "blog.EventLog"
  """
  insert_blog_EventLog_one(
    """the row to be inserted"""
    object: blog_EventLog_insert_input!

    """upsert condition"""
    on_conflict: blog_EventLog_on_conflict
  ): blog_EventLog

  """
  insert data into the table: "blog.File"
  """
  insert_blog_File(
    """the rows to be inserted"""
    objects: [blog_File_insert_input!]!

    """upsert condition"""
    on_conflict: blog_File_on_conflict
  ): blog_File_mutation_response

  """
  insert a single row into the table: "blog.File"
  """
  insert_blog_File_one(
    """the row to be inserted"""
    object: blog_File_insert_input!

    """upsert condition"""
    on_conflict: blog_File_on_conflict
  ): blog_File

  """
  insert data into the table: "blog.MemberOnTeams"
  """
  insert_blog_MemberOnTeams(
    """the rows to be inserted"""
    objects: [blog_MemberOnTeams_insert_input!]!

    """upsert condition"""
    on_conflict: blog_MemberOnTeams_on_conflict
  ): blog_MemberOnTeams_mutation_response

  """
  insert a single row into the table: "blog.MemberOnTeams"
  """
  insert_blog_MemberOnTeams_one(
    """the row to be inserted"""
    object: blog_MemberOnTeams_insert_input!

    """upsert condition"""
    on_conflict: blog_MemberOnTeams_on_conflict
  ): blog_MemberOnTeams

  """
  insert data into the table: "blog.Organization"
  """
  insert_blog_Organization(
    """the rows to be inserted"""
    objects: [blog_Organization_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Organization_on_conflict
  ): blog_Organization_mutation_response

  """
  insert a single row into the table: "blog.Organization"
  """
  insert_blog_Organization_one(
    """the row to be inserted"""
    object: blog_Organization_insert_input!

    """upsert condition"""
    on_conflict: blog_Organization_on_conflict
  ): blog_Organization

  """
  insert data into the table: "blog.Post"
  """
  insert_blog_Post(
    """the rows to be inserted"""
    objects: [blog_Post_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Post_on_conflict
  ): blog_Post_mutation_response

  """
  insert a single row into the table: "blog.Post"
  """
  insert_blog_Post_one(
    """the row to be inserted"""
    object: blog_Post_insert_input!

    """upsert condition"""
    on_conflict: blog_Post_on_conflict
  ): blog_Post

  """
  insert data into the table: "blog.Settings"
  """
  insert_blog_Settings(
    """the rows to be inserted"""
    objects: [blog_Settings_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Settings_on_conflict
  ): blog_Settings_mutation_response

  """
  insert a single row into the table: "blog.Settings"
  """
  insert_blog_Settings_one(
    """the row to be inserted"""
    object: blog_Settings_insert_input!

    """upsert condition"""
    on_conflict: blog_Settings_on_conflict
  ): blog_Settings

  """
  insert data into the table: "blog.Task"
  """
  insert_blog_Task(
    """the rows to be inserted"""
    objects: [blog_Task_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Task_on_conflict
  ): blog_Task_mutation_response

  """
  insert data into the table: "blog.TaskDefinition"
  """
  insert_blog_TaskDefinition(
    """the rows to be inserted"""
    objects: [blog_TaskDefinition_insert_input!]!

    """upsert condition"""
    on_conflict: blog_TaskDefinition_on_conflict
  ): blog_TaskDefinition_mutation_response

  """
  insert a single row into the table: "blog.TaskDefinition"
  """
  insert_blog_TaskDefinition_one(
    """the row to be inserted"""
    object: blog_TaskDefinition_insert_input!

    """upsert condition"""
    on_conflict: blog_TaskDefinition_on_conflict
  ): blog_TaskDefinition

  """
  insert a single row into the table: "blog.Task"
  """
  insert_blog_Task_one(
    """the row to be inserted"""
    object: blog_Task_insert_input!

    """upsert condition"""
    on_conflict: blog_Task_on_conflict
  ): blog_Task

  """
  insert data into the table: "blog.Team"
  """
  insert_blog_Team(
    """the rows to be inserted"""
    objects: [blog_Team_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Team_on_conflict
  ): blog_Team_mutation_response

  """
  insert a single row into the table: "blog.Team"
  """
  insert_blog_Team_one(
    """the row to be inserted"""
    object: blog_Team_insert_input!

    """upsert condition"""
    on_conflict: blog_Team_on_conflict
  ): blog_Team

  """
  insert data into the table: "blog.Trigger"
  """
  insert_blog_Trigger(
    """the rows to be inserted"""
    objects: [blog_Trigger_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Trigger_on_conflict
  ): blog_Trigger_mutation_response

  """
  insert a single row into the table: "blog.Trigger"
  """
  insert_blog_Trigger_one(
    """the row to be inserted"""
    object: blog_Trigger_insert_input!

    """upsert condition"""
    on_conflict: blog_Trigger_on_conflict
  ): blog_Trigger

  """
  insert data into the table: "blog.User"
  """
  insert_blog_User(
    """the rows to be inserted"""
    objects: [blog_User_insert_input!]!

    """upsert condition"""
    on_conflict: blog_User_on_conflict
  ): blog_User_mutation_response

  """
  insert a single row into the table: "blog.User"
  """
  insert_blog_User_one(
    """the row to be inserted"""
    object: blog_User_insert_input!

    """upsert condition"""
    on_conflict: blog_User_on_conflict
  ): blog_User

  """
  insert data into the table: "blog.Workflow"
  """
  insert_blog_Workflow(
    """the rows to be inserted"""
    objects: [blog_Workflow_insert_input!]!

    """upsert condition"""
    on_conflict: blog_Workflow_on_conflict
  ): blog_Workflow_mutation_response

  """
  insert a single row into the table: "blog.Workflow"
  """
  insert_blog_Workflow_one(
    """the row to be inserted"""
    object: blog_Workflow_insert_input!

    """upsert condition"""
    on_conflict: blog_Workflow_on_conflict
  ): blog_Workflow

  """
  insert data into the table: "blog._prisma_migrations"
  """
  insert_blog__prisma_migrations(
    """the rows to be inserted"""
    objects: [blog__prisma_migrations_insert_input!]!

    """upsert condition"""
    on_conflict: blog__prisma_migrations_on_conflict
  ): blog__prisma_migrations_mutation_response

  """
  insert a single row into the table: "blog._prisma_migrations"
  """
  insert_blog__prisma_migrations_one(
    """the row to be inserted"""
    object: blog__prisma_migrations_insert_input!

    """upsert condition"""
    on_conflict: blog__prisma_migrations_on_conflict
  ): blog__prisma_migrations

  """
  update data of the table: "blog.Action"
  """
  update_blog_Action(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Action_set_input

    """filter the rows which have to be updated"""
    where: blog_Action_bool_exp!
  ): blog_Action_mutation_response

  """
  update single row of the table: "blog.Action"
  """
  update_blog_Action_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Action_set_input
    pk_columns: blog_Action_pk_columns_input!
  ): blog_Action

  """
  update data of the table: "blog.Activity"
  """
  update_blog_Activity(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Activity_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Activity_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Activity_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Activity_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Activity_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Activity_set_input

    """filter the rows which have to be updated"""
    where: blog_Activity_bool_exp!
  ): blog_Activity_mutation_response

  """
  update single row of the table: "blog.Activity"
  """
  update_blog_Activity_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Activity_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Activity_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Activity_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Activity_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Activity_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Activity_set_input
    pk_columns: blog_Activity_pk_columns_input!
  ): blog_Activity

  """
  update data of the table: "blog.Comment"
  """
  update_blog_Comment(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Comment_set_input

    """filter the rows which have to be updated"""
    where: blog_Comment_bool_exp!
  ): blog_Comment_mutation_response

  """
  update single row of the table: "blog.Comment"
  """
  update_blog_Comment_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Comment_set_input
    pk_columns: blog_Comment_pk_columns_input!
  ): blog_Comment

  """
  update data of the table: "blog.EventLog"
  """
  update_blog_EventLog(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_EventLog_set_input

    """filter the rows which have to be updated"""
    where: blog_EventLog_bool_exp!
  ): blog_EventLog_mutation_response

  """
  update single row of the table: "blog.EventLog"
  """
  update_blog_EventLog_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_EventLog_set_input
    pk_columns: blog_EventLog_pk_columns_input!
  ): blog_EventLog

  """
  update data of the table: "blog.File"
  """
  update_blog_File(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_File_set_input

    """filter the rows which have to be updated"""
    where: blog_File_bool_exp!
  ): blog_File_mutation_response

  """
  update single row of the table: "blog.File"
  """
  update_blog_File_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_File_set_input
    pk_columns: blog_File_pk_columns_input!
  ): blog_File

  """
  update data of the table: "blog.MemberOnTeams"
  """
  update_blog_MemberOnTeams(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_MemberOnTeams_set_input

    """filter the rows which have to be updated"""
    where: blog_MemberOnTeams_bool_exp!
  ): blog_MemberOnTeams_mutation_response

  """
  update single row of the table: "blog.MemberOnTeams"
  """
  update_blog_MemberOnTeams_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_MemberOnTeams_set_input
    pk_columns: blog_MemberOnTeams_pk_columns_input!
  ): blog_MemberOnTeams

  """
  update data of the table: "blog.Organization"
  """
  update_blog_Organization(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Organization_set_input

    """filter the rows which have to be updated"""
    where: blog_Organization_bool_exp!
  ): blog_Organization_mutation_response

  """
  update single row of the table: "blog.Organization"
  """
  update_blog_Organization_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Organization_set_input
    pk_columns: blog_Organization_pk_columns_input!
  ): blog_Organization

  """
  update data of the table: "blog.Post"
  """
  update_blog_Post(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Post_set_input

    """filter the rows which have to be updated"""
    where: blog_Post_bool_exp!
  ): blog_Post_mutation_response

  """
  update single row of the table: "blog.Post"
  """
  update_blog_Post_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Post_set_input
    pk_columns: blog_Post_pk_columns_input!
  ): blog_Post

  """
  update data of the table: "blog.Settings"
  """
  update_blog_Settings(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Settings_set_input

    """filter the rows which have to be updated"""
    where: blog_Settings_bool_exp!
  ): blog_Settings_mutation_response

  """
  update single row of the table: "blog.Settings"
  """
  update_blog_Settings_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Settings_set_input
    pk_columns: blog_Settings_pk_columns_input!
  ): blog_Settings

  """
  update data of the table: "blog.Task"
  """
  update_blog_Task(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Task_set_input

    """filter the rows which have to be updated"""
    where: blog_Task_bool_exp!
  ): blog_Task_mutation_response

  """
  update data of the table: "blog.TaskDefinition"
  """
  update_blog_TaskDefinition(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_TaskDefinition_set_input

    """filter the rows which have to be updated"""
    where: blog_TaskDefinition_bool_exp!
  ): blog_TaskDefinition_mutation_response

  """
  update single row of the table: "blog.TaskDefinition"
  """
  update_blog_TaskDefinition_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_TaskDefinition_set_input
    pk_columns: blog_TaskDefinition_pk_columns_input!
  ): blog_TaskDefinition

  """
  update single row of the table: "blog.Task"
  """
  update_blog_Task_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Task_set_input
    pk_columns: blog_Task_pk_columns_input!
  ): blog_Task

  """
  update data of the table: "blog.Team"
  """
  update_blog_Team(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Team_set_input

    """filter the rows which have to be updated"""
    where: blog_Team_bool_exp!
  ): blog_Team_mutation_response

  """
  update single row of the table: "blog.Team"
  """
  update_blog_Team_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_Team_set_input
    pk_columns: blog_Team_pk_columns_input!
  ): blog_Team

  """
  update data of the table: "blog.Trigger"
  """
  update_blog_Trigger(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Trigger_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Trigger_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Trigger_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Trigger_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Trigger_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Trigger_set_input

    """filter the rows which have to be updated"""
    where: blog_Trigger_bool_exp!
  ): blog_Trigger_mutation_response

  """
  update single row of the table: "blog.Trigger"
  """
  update_blog_Trigger_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Trigger_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Trigger_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Trigger_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Trigger_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Trigger_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Trigger_set_input
    pk_columns: blog_Trigger_pk_columns_input!
  ): blog_Trigger

  """
  update data of the table: "blog.User"
  """
  update_blog_User(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_User_set_input

    """filter the rows which have to be updated"""
    where: blog_User_bool_exp!
  ): blog_User_mutation_response

  """
  update single row of the table: "blog.User"
  """
  update_blog_User_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_User_set_input
    pk_columns: blog_User_pk_columns_input!
  ): blog_User

  """
  update data of the table: "blog.Workflow"
  """
  update_blog_Workflow(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Workflow_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Workflow_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Workflow_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Workflow_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Workflow_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Workflow_set_input

    """filter the rows which have to be updated"""
    where: blog_Workflow_bool_exp!
  ): blog_Workflow_mutation_response

  """
  update single row of the table: "blog.Workflow"
  """
  update_blog_Workflow_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blog_Workflow_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blog_Workflow_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blog_Workflow_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blog_Workflow_delete_key_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blog_Workflow_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog_Workflow_set_input
    pk_columns: blog_Workflow_pk_columns_input!
  ): blog_Workflow

  """
  update data of the table: "blog._prisma_migrations"
  """
  update_blog__prisma_migrations(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blog__prisma_migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog__prisma_migrations_set_input

    """filter the rows which have to be updated"""
    where: blog__prisma_migrations_bool_exp!
  ): blog__prisma_migrations_mutation_response

  """
  update single row of the table: "blog._prisma_migrations"
  """
  update_blog__prisma_migrations_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blog__prisma_migrations_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: blog__prisma_migrations_set_input
    pk_columns: blog__prisma_migrations_pk_columns_input!
  ): blog__prisma_migrations
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "blog.Action"
  """
  blog_Action(
    """distinct select on columns"""
    distinct_on: [blog_Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Action_order_by!]

    """filter the rows returned"""
    where: blog_Action_bool_exp
  ): [blog_Action!]!

  """
  fetch aggregated fields from the table: "blog.Action"
  """
  blog_Action_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Action_order_by!]

    """filter the rows returned"""
    where: blog_Action_bool_exp
  ): blog_Action_aggregate!

  """fetch data from the table: "blog.Action" using primary key columns"""
  blog_Action_by_pk(id: String!): blog_Action

  """
  fetch data from the table: "blog.Activity"
  """
  blog_Activity(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): [blog_Activity!]!

  """
  fetch aggregated fields from the table: "blog.Activity"
  """
  blog_Activity_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): blog_Activity_aggregate!

  """fetch data from the table: "blog.Activity" using primary key columns"""
  blog_Activity_by_pk(id: String!): blog_Activity

  """
  fetch data from the table: "blog.Comment"
  """
  blog_Comment(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): [blog_Comment!]!

  """
  fetch aggregated fields from the table: "blog.Comment"
  """
  blog_Comment_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): blog_Comment_aggregate!

  """fetch data from the table: "blog.Comment" using primary key columns"""
  blog_Comment_by_pk(id: String!): blog_Comment

  """
  fetch data from the table: "blog.EventLog"
  """
  blog_EventLog(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """
  fetch aggregated fields from the table: "blog.EventLog"
  """
  blog_EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!

  """fetch data from the table: "blog.EventLog" using primary key columns"""
  blog_EventLog_by_pk(id: String!): blog_EventLog

  """
  fetch data from the table: "blog.File"
  """
  blog_File(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): [blog_File!]!

  """
  fetch aggregated fields from the table: "blog.File"
  """
  blog_File_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): blog_File_aggregate!

  """fetch data from the table: "blog.File" using primary key columns"""
  blog_File_by_pk(id: String!): blog_File

  """
  fetch data from the table: "blog.MemberOnTeams"
  """
  blog_MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): [blog_MemberOnTeams!]!

  """
  fetch aggregated fields from the table: "blog.MemberOnTeams"
  """
  blog_MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): blog_MemberOnTeams_aggregate!

  """
  fetch data from the table: "blog.MemberOnTeams" using primary key columns
  """
  blog_MemberOnTeams_by_pk(teamId: String!, userId: String!): blog_MemberOnTeams

  """
  fetch data from the table: "blog.Organization"
  """
  blog_Organization(
    """distinct select on columns"""
    distinct_on: [blog_Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Organization_order_by!]

    """filter the rows returned"""
    where: blog_Organization_bool_exp
  ): [blog_Organization!]!

  """
  fetch aggregated fields from the table: "blog.Organization"
  """
  blog_Organization_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Organization_order_by!]

    """filter the rows returned"""
    where: blog_Organization_bool_exp
  ): blog_Organization_aggregate!

  """
  fetch data from the table: "blog.Organization" using primary key columns
  """
  blog_Organization_by_pk(id: String!): blog_Organization

  """
  fetch data from the table: "blog.Post"
  """
  blog_Post(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): [blog_Post!]!

  """
  fetch aggregated fields from the table: "blog.Post"
  """
  blog_Post_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): blog_Post_aggregate!

  """fetch data from the table: "blog.Post" using primary key columns"""
  blog_Post_by_pk(id: String!): blog_Post

  """
  fetch data from the table: "blog.Settings"
  """
  blog_Settings(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): [blog_Settings!]!

  """
  fetch aggregated fields from the table: "blog.Settings"
  """
  blog_Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): blog_Settings_aggregate!

  """fetch data from the table: "blog.Settings" using primary key columns"""
  blog_Settings_by_pk(id: String!): blog_Settings

  """
  fetch data from the table: "blog.Task"
  """
  blog_Task(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): [blog_Task!]!

  """
  fetch data from the table: "blog.TaskDefinition"
  """
  blog_TaskDefinition(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """
  fetch aggregated fields from the table: "blog.TaskDefinition"
  """
  blog_TaskDefinition_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!

  """
  fetch data from the table: "blog.TaskDefinition" using primary key columns
  """
  blog_TaskDefinition_by_pk(id: String!): blog_TaskDefinition

  """
  fetch aggregated fields from the table: "blog.Task"
  """
  blog_Task_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): blog_Task_aggregate!

  """fetch data from the table: "blog.Task" using primary key columns"""
  blog_Task_by_pk(id: String!): blog_Task

  """
  fetch data from the table: "blog.Team"
  """
  blog_Team(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): [blog_Team!]!

  """
  fetch aggregated fields from the table: "blog.Team"
  """
  blog_Team_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): blog_Team_aggregate!

  """fetch data from the table: "blog.Team" using primary key columns"""
  blog_Team_by_pk(id: String!): blog_Team

  """
  fetch data from the table: "blog.Trigger"
  """
  blog_Trigger(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): [blog_Trigger!]!

  """
  fetch aggregated fields from the table: "blog.Trigger"
  """
  blog_Trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): blog_Trigger_aggregate!

  """fetch data from the table: "blog.Trigger" using primary key columns"""
  blog_Trigger_by_pk(id: String!): blog_Trigger

  """
  fetch data from the table: "blog.User"
  """
  blog_User(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): [blog_User!]!

  """
  fetch aggregated fields from the table: "blog.User"
  """
  blog_User_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): blog_User_aggregate!

  """fetch data from the table: "blog.User" using primary key columns"""
  blog_User_by_pk(id: String!): blog_User

  """
  fetch data from the table: "blog.Workflow"
  """
  blog_Workflow(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): [blog_Workflow!]!

  """
  fetch aggregated fields from the table: "blog.Workflow"
  """
  blog_Workflow_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): blog_Workflow_aggregate!

  """fetch data from the table: "blog.Workflow" using primary key columns"""
  blog_Workflow_by_pk(id: String!): blog_Workflow

  """
  fetch data from the table: "blog._prisma_migrations"
  """
  blog__prisma_migrations(
    """distinct select on columns"""
    distinct_on: [blog__prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog__prisma_migrations_order_by!]

    """filter the rows returned"""
    where: blog__prisma_migrations_bool_exp
  ): [blog__prisma_migrations!]!

  """
  fetch aggregated fields from the table: "blog._prisma_migrations"
  """
  blog__prisma_migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [blog__prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog__prisma_migrations_order_by!]

    """filter the rows returned"""
    where: blog__prisma_migrations_bool_exp
  ): blog__prisma_migrations_aggregate!

  """
  fetch data from the table: "blog._prisma_migrations" using primary key columns
  """
  blog__prisma_migrations_by_pk(id: String!): blog__prisma_migrations
}

type subscription_root {
  """
  fetch data from the table: "blog.Action"
  """
  blog_Action(
    """distinct select on columns"""
    distinct_on: [blog_Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Action_order_by!]

    """filter the rows returned"""
    where: blog_Action_bool_exp
  ): [blog_Action!]!

  """
  fetch aggregated fields from the table: "blog.Action"
  """
  blog_Action_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Action_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Action_order_by!]

    """filter the rows returned"""
    where: blog_Action_bool_exp
  ): blog_Action_aggregate!

  """fetch data from the table: "blog.Action" using primary key columns"""
  blog_Action_by_pk(id: String!): blog_Action

  """
  fetch data from the table: "blog.Activity"
  """
  blog_Activity(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): [blog_Activity!]!

  """
  fetch aggregated fields from the table: "blog.Activity"
  """
  blog_Activity_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Activity_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Activity_order_by!]

    """filter the rows returned"""
    where: blog_Activity_bool_exp
  ): blog_Activity_aggregate!

  """fetch data from the table: "blog.Activity" using primary key columns"""
  blog_Activity_by_pk(id: String!): blog_Activity

  """
  fetch data from the table: "blog.Comment"
  """
  blog_Comment(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): [blog_Comment!]!

  """
  fetch aggregated fields from the table: "blog.Comment"
  """
  blog_Comment_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Comment_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Comment_order_by!]

    """filter the rows returned"""
    where: blog_Comment_bool_exp
  ): blog_Comment_aggregate!

  """fetch data from the table: "blog.Comment" using primary key columns"""
  blog_Comment_by_pk(id: String!): blog_Comment

  """
  fetch data from the table: "blog.EventLog"
  """
  blog_EventLog(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): [blog_EventLog!]!

  """
  fetch aggregated fields from the table: "blog.EventLog"
  """
  blog_EventLog_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_EventLog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_EventLog_order_by!]

    """filter the rows returned"""
    where: blog_EventLog_bool_exp
  ): blog_EventLog_aggregate!

  """fetch data from the table: "blog.EventLog" using primary key columns"""
  blog_EventLog_by_pk(id: String!): blog_EventLog

  """
  fetch data from the table: "blog.File"
  """
  blog_File(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): [blog_File!]!

  """
  fetch aggregated fields from the table: "blog.File"
  """
  blog_File_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_File_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_File_order_by!]

    """filter the rows returned"""
    where: blog_File_bool_exp
  ): blog_File_aggregate!

  """fetch data from the table: "blog.File" using primary key columns"""
  blog_File_by_pk(id: String!): blog_File

  """
  fetch data from the table: "blog.MemberOnTeams"
  """
  blog_MemberOnTeams(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): [blog_MemberOnTeams!]!

  """
  fetch aggregated fields from the table: "blog.MemberOnTeams"
  """
  blog_MemberOnTeams_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_MemberOnTeams_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_MemberOnTeams_order_by!]

    """filter the rows returned"""
    where: blog_MemberOnTeams_bool_exp
  ): blog_MemberOnTeams_aggregate!

  """
  fetch data from the table: "blog.MemberOnTeams" using primary key columns
  """
  blog_MemberOnTeams_by_pk(teamId: String!, userId: String!): blog_MemberOnTeams

  """
  fetch data from the table: "blog.Organization"
  """
  blog_Organization(
    """distinct select on columns"""
    distinct_on: [blog_Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Organization_order_by!]

    """filter the rows returned"""
    where: blog_Organization_bool_exp
  ): [blog_Organization!]!

  """
  fetch aggregated fields from the table: "blog.Organization"
  """
  blog_Organization_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Organization_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Organization_order_by!]

    """filter the rows returned"""
    where: blog_Organization_bool_exp
  ): blog_Organization_aggregate!

  """
  fetch data from the table: "blog.Organization" using primary key columns
  """
  blog_Organization_by_pk(id: String!): blog_Organization

  """
  fetch data from the table: "blog.Post"
  """
  blog_Post(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): [blog_Post!]!

  """
  fetch aggregated fields from the table: "blog.Post"
  """
  blog_Post_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Post_order_by!]

    """filter the rows returned"""
    where: blog_Post_bool_exp
  ): blog_Post_aggregate!

  """fetch data from the table: "blog.Post" using primary key columns"""
  blog_Post_by_pk(id: String!): blog_Post

  """
  fetch data from the table: "blog.Settings"
  """
  blog_Settings(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): [blog_Settings!]!

  """
  fetch aggregated fields from the table: "blog.Settings"
  """
  blog_Settings_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Settings_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Settings_order_by!]

    """filter the rows returned"""
    where: blog_Settings_bool_exp
  ): blog_Settings_aggregate!

  """fetch data from the table: "blog.Settings" using primary key columns"""
  blog_Settings_by_pk(id: String!): blog_Settings

  """
  fetch data from the table: "blog.Task"
  """
  blog_Task(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): [blog_Task!]!

  """
  fetch data from the table: "blog.TaskDefinition"
  """
  blog_TaskDefinition(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): [blog_TaskDefinition!]!

  """
  fetch aggregated fields from the table: "blog.TaskDefinition"
  """
  blog_TaskDefinition_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_TaskDefinition_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_TaskDefinition_order_by!]

    """filter the rows returned"""
    where: blog_TaskDefinition_bool_exp
  ): blog_TaskDefinition_aggregate!

  """
  fetch data from the table: "blog.TaskDefinition" using primary key columns
  """
  blog_TaskDefinition_by_pk(id: String!): blog_TaskDefinition

  """
  fetch aggregated fields from the table: "blog.Task"
  """
  blog_Task_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Task_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Task_order_by!]

    """filter the rows returned"""
    where: blog_Task_bool_exp
  ): blog_Task_aggregate!

  """fetch data from the table: "blog.Task" using primary key columns"""
  blog_Task_by_pk(id: String!): blog_Task

  """
  fetch data from the table: "blog.Team"
  """
  blog_Team(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): [blog_Team!]!

  """
  fetch aggregated fields from the table: "blog.Team"
  """
  blog_Team_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Team_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Team_order_by!]

    """filter the rows returned"""
    where: blog_Team_bool_exp
  ): blog_Team_aggregate!

  """fetch data from the table: "blog.Team" using primary key columns"""
  blog_Team_by_pk(id: String!): blog_Team

  """
  fetch data from the table: "blog.Trigger"
  """
  blog_Trigger(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): [blog_Trigger!]!

  """
  fetch aggregated fields from the table: "blog.Trigger"
  """
  blog_Trigger_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Trigger_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Trigger_order_by!]

    """filter the rows returned"""
    where: blog_Trigger_bool_exp
  ): blog_Trigger_aggregate!

  """fetch data from the table: "blog.Trigger" using primary key columns"""
  blog_Trigger_by_pk(id: String!): blog_Trigger

  """
  fetch data from the table: "blog.User"
  """
  blog_User(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): [blog_User!]!

  """
  fetch aggregated fields from the table: "blog.User"
  """
  blog_User_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_User_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_User_order_by!]

    """filter the rows returned"""
    where: blog_User_bool_exp
  ): blog_User_aggregate!

  """fetch data from the table: "blog.User" using primary key columns"""
  blog_User_by_pk(id: String!): blog_User

  """
  fetch data from the table: "blog.Workflow"
  """
  blog_Workflow(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): [blog_Workflow!]!

  """
  fetch aggregated fields from the table: "blog.Workflow"
  """
  blog_Workflow_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_Workflow_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog_Workflow_order_by!]

    """filter the rows returned"""
    where: blog_Workflow_bool_exp
  ): blog_Workflow_aggregate!

  """fetch data from the table: "blog.Workflow" using primary key columns"""
  blog_Workflow_by_pk(id: String!): blog_Workflow

  """
  fetch data from the table: "blog._prisma_migrations"
  """
  blog__prisma_migrations(
    """distinct select on columns"""
    distinct_on: [blog__prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog__prisma_migrations_order_by!]

    """filter the rows returned"""
    where: blog__prisma_migrations_bool_exp
  ): [blog__prisma_migrations!]!

  """
  fetch aggregated fields from the table: "blog._prisma_migrations"
  """
  blog__prisma_migrations_aggregate(
    """distinct select on columns"""
    distinct_on: [blog__prisma_migrations_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blog__prisma_migrations_order_by!]

    """filter the rows returned"""
    where: blog__prisma_migrations_bool_exp
  ): blog__prisma_migrations_aggregate!

  """
  fetch data from the table: "blog._prisma_migrations" using primary key columns
  """
  blog__prisma_migrations_by_pk(id: String!): blog__prisma_migrations
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
